{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":6934,\"hp\":10,\"max_hp\":10,\"strength\":3,\"defense\":3,\"dexterity\":3,\"agility\":3,\"charisma\":3,\"intelligence\":383,\"hacking_chance_mult\":4.5295293807896835,\"hacking_speed_mult\":4.43110958001643,\"hacking_money_mult\":14.694997288200742,\"hacking_grow_mult\":6.867689480726414,\"hacking_exp\":59868616415.74219,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":83995873.12602426,\"hacking_mult\":11.906245901780835,\"strength_mult\":3.4837602779424213,\"defense_mult\":3.332292439771012,\"dexterity_mult\":4.0237431210234975,\"agility_mult\":3.339865831679583,\"charisma_mult\":3.6352281161138307,\"hacking_exp_mult\":17.556975969592685,\"strength_exp_mult\":4.180512333530905,\"defense_exp_mult\":4.180512333530905,\"dexterity_exp_mult\":4.180512333530905,\"agility_exp_mult\":4.180512333530905,\"charisma_exp_mult\":3.4837602779424213,\"company_rep_mult\":4.598563566883996,\"faction_rep_mult\":3.4837602779424213,\"money\":447312080306870.25,\"city\":\"Volhaven\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Daedalus\",\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":77},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":1,\"n\":12}],\"numPeopleKilled\":0,\"karma\":-11.200000000000003,\"crime_money_mult\":4.165365549713766,\"crime_success_mult\":3.442450867532037,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"Daedalus\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":2.5819082308224535,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":28.963655308246164,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":139.42304446441233,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":1564.0373866452935,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":12800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":3.0293567634281926,\"hacknet_node_money_mult\":2.7539606940256296,\"hacknet_node_purchase_cost_mult\":0.33464529904122964,\"hacknet_node_ram_cost_mult\":0.33464529904122964,\"hacknet_node_core_cost_mult\":0.33464529904122964,\"hacknet_node_level_cost_mult\":0.33464529904122964,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":12,\"entropy\":0,\"lastUpdate\":1651764889650,\"lastSave\":1651764889216,\"totalPlaytime\":1440412800,\"playtimeSinceLastAug\":1725800,\"playtimeSinceLastBitnode\":47837400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":448263719186328,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":447312080305864.25,\"work\":0,\"servers\":-951356380463.3722,\"other\":-282500000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1397058823.5294118,\"corporation\":0,\"crime\":2765473.7619044348,\"gang\":0,\"hacking\":4192589298153102,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":681289768878198.5,\"work\":0,\"servers\":-3037141174813458,\"other\":-4116233280070.097,\"augmentations\":-470043521005670.2}},\"scriptProdSinceLastAug\":447659769687276,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1650324486138},{\"ID\":\"NS2\",\"unlockedOn\":1650324546145},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1650324546160},{\"ID\":\"TOR\",\"unlockedOn\":1650391063083},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1650391183084},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1650391483076},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1650391903083},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1650392023089},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1650393523078},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1650393523090},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1650401983076},{\"ID\":\"NITESEC\",\"unlockedOn\":1650404563078},{\"ID\":\"TRAVEL\",\"unlockedOn\":1650404623079},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1650411943077},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1650491553987},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1650497974019},{\"ID\":\"DONATION\",\"unlockedOn\":1650557917705},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1650558457734},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1650570937733},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1650579229114},{\"ID\":\"SF1.1\",\"unlockedOn\":1650583669108},{\"ID\":\"FAST_BN\",\"unlockedOn\":1650689077088},{\"ID\":\"SF5.1\",\"unlockedOn\":1650689096885},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1650918820305},{\"ID\":\"WORKOUT\",\"unlockedOn\":1650924940304},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1650926358224},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1650929298223},{\"ID\":\"INTELLIGENCE_255\",\"unlockedOn\":1650931195995},{\"ID\":\"SF4.1\",\"unlockedOn\":1650990161290},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1651401489555},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1651403049557},{\"ID\":\"SF12.1\",\"unlockedOn\":1651717107037}],\"terminalCommandHistory\":[\"join\",\"run buy_augs.js -a\",\"run buy_augs.js -n\",\"run fl1ght.exe\",\"ka\",\"hack --limit 5\",\"ka\",\"hack --limit 3\",\"run buy_augs.js -n\",\"run buy_augs.js -en\",\"run buy_augs.js -n\",\"run buy_augs.js -ng\",\"reset\",\"ka\",\"hack --limit 2\",\"join\",\"ps\",\"ka\",\"ps\",\"ka\",\"controller\",\"hack --limit 10\",\"ka\",\"controller\",\"run fl1ght.exe\",\"join\",\"run buy_augs.js\",\"ka\",\"run buy_augs.js\",\"run buy_augs.js -n\",\"share\",\"run buy_augs.js -n\",\"crime\",\"join\",\"run buy_augs.js -n\",\"run buy_augs.js -ng\",\"reset\",\"run fl\",\"run fl1ght.exe\",\"join\",\"run buy_augs.js\",\"run buy_augs.js -a\",\"run fl1ght.exe\",\"run buy_augs.js -an\",\"resetjoin\",\"join\",\"reset\",\"join\",\"run buy_augs.js -n\",\"run fl1ght.exe\"],\"identifier\":\"172bb4264c21a4\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"54.3.1.6\",\"isConnectedTo\":true,\"maxRam\":4194304,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///4cba1438-3bfd-49e5-bd63-f47d6760530a\",\"moduleSequenceNumber\":395679}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Slow hack using minimal footprint\\r\\nimport { allHosts, HACKJS, GROWJS, WEAKENJS } from \\\"/lib/util\\\";\\r\\nasync function doWeaken(ns, targetHostname, ownedHostnames) {\\r\\n    // check to see if we need to weaken the server\\r\\n    const targetSecurityLevel = Math.max(ns.getServerMinSecurityLevel(targetHostname) * 1.15, ns.getServerMinSecurityLevel(targetHostname) + 3);\\r\\n    if (ns.getServerSecurityLevel(targetHostname) > targetSecurityLevel) {\\r\\n        while (ns.getServerSecurityLevel(targetHostname) > ns.getServerMinSecurityLevel(targetHostname)) {\\r\\n            ns.tprintf(\\\"Weaken %s: %f > %f\\\", targetHostname, ns.getServerSecurityLevel(targetHostname), targetSecurityLevel);\\r\\n            let waitPID = 0;\\r\\n            for (const hostname of ownedHostnames) {\\r\\n                const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n                const threads = Math.floor(availableRam / ns.getScriptRam(WEAKENJS));\\r\\n                if (threads <= 0)\\r\\n                    continue;\\r\\n                waitPID = ns.exec(WEAKENJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel());\\r\\n            }\\r\\n            while (ns.getRunningScript(waitPID) !== null) {\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            // wait a little bit longer to make sure everything else finished too\\r\\n            await ns.sleep(500);\\r\\n        }\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished weakening %s (%f / %f)\\\", targetHostname, ns.getServerMinSecurityLevel(targetHostname), ns.getServerSecurityLevel(targetHostname));\\r\\n}\\r\\nasync function doGrow(ns, targetHostname, ownedHostnames) {\\r\\n    while (ns.getServerMoneyAvailable(targetHostname) < ns.getServerMaxMoney(targetHostname)) {\\r\\n        ns.tprintf(\\\"Grow %s: %s < %s\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(targetHostname), \\\"$0.000a\\\"));\\r\\n        let waitPID = 0;\\r\\n        for (const hostname of ownedHostnames) {\\r\\n            const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n            const threads = Math.floor(availableRam / ns.getScriptRam(GROWJS));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            waitPID = ns.exec(GROWJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel());\\r\\n        }\\r\\n        while (ns.getRunningScript(waitPID) !== null) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        // wait a little bit longer to make sure everything else finished too\\r\\n        await ns.sleep(500);\\r\\n        await doWeaken(ns, targetHostname, ownedHostnames);\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished growing %s (%s / %s)\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(targetHostname), \\\"$0.000a\\\"));\\r\\n}\\r\\nasync function doHack(ns, targetHostname, ownedHostnames) {\\r\\n    const targetMoneyAvailable = ns.getServerMaxMoney(targetHostname) * 0.8;\\r\\n    while (ns.getServerMoneyAvailable(targetHostname) > targetMoneyAvailable) {\\r\\n        ns.tprintf(\\\"Hack %s %s > %s\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(targetMoneyAvailable, \\\"$0.000a\\\"));\\r\\n        let waitPID = 0;\\r\\n        for (const hostname of ownedHostnames) {\\r\\n            const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n            const threads = Math.floor(availableRam / ns.getScriptRam(HACKJS));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            waitPID = ns.exec(HACKJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel(), \\\"--hackLvlEffect\\\", ns.getHackingLevel());\\r\\n        }\\r\\n        while (ns.getRunningScript(waitPID) !== null) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        // wait a little bit longer to make sure everything else finished too\\r\\n        await ns.sleep(500);\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished hacking %s\\\", targetHostname);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    const targetHostname = flags[\\\"target\\\"];\\r\\n    if (!ns.serverExists(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Server does not exist\\\", targetHostname);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.hasRootAccess(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetHostname);\\r\\n        return;\\r\\n    }\\r\\n    if (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetHostname, ns.getHackingLevel(), ns.getServerRequiredHackingLevel(targetHostname));\\r\\n        return;\\r\\n    }\\r\\n    // collect all available ram\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const ownedHostnames = allHostnames.filter((a) => ns.hasRootAccess(a));\\r\\n    // trasfer hacking scripts to the hosts\\r\\n    for (const hostname of ownedHostnames.filter((a) => a !== \\\"home\\\")) {\\r\\n        await ns.scp(HACKJS, hostname);\\r\\n        await ns.scp(GROWJS, hostname);\\r\\n        await ns.scp(WEAKENJS, hostname);\\r\\n    }\\r\\n    while (true) {\\r\\n        await doWeaken(ns, targetHostname, ownedHostnames);\\r\\n        await doGrow(ns, targetHostname, ownedHostnames);\\r\\n        await doHack(ns, targetHostname, ownedHostnames);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja18xLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrXzEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBSWpELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFL0QsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFNLEVBQUUsY0FBc0IsRUFBRSxjQUF3QjtJQUM1RSwrQ0FBK0M7SUFDL0MsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUNoQyxFQUFFLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxFQUNuRCxFQUFFLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUNuRCxDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEdBQUcsbUJBQW1CLEVBQUU7UUFDakUsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQzdGLEVBQUUsQ0FBQyxPQUFPLENBQ04sb0JBQW9CLEVBQ3BCLGNBQWMsRUFDZCxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEVBQ3pDLG1CQUFtQixDQUN0QixDQUFDO1lBQ0YsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLEtBQUssTUFBTSxRQUFRLElBQUksY0FBYyxFQUFFO2dCQUNuQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbEYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlB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\",\"filename\":\"/archive/hack_1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"home\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d9f508bf-3f5f-49d7-9cc9-542b0259eec5\",\"moduleSequenceNumber\":396445}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///da11c06a-fdd2-4ef7-abe1-e0eab386f558\",\"moduleSequenceNumber\":396015}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRandomInt(min, max) {\\r\\n    const lower = Math.min(min, max);\\r\\n    const upper = Math.max(min, max);\\r\\n    return Math.floor(Math.random() * (upper - lower + 1)) + lower;\\r\\n}\\r\\nfunction gen() {\\r\\n    const height = getRandomInt(6, 12);\\r\\n    const width = getRandomInt(6, 12);\\r\\n    const dstY = height - 1;\\r\\n    const dstX = width - 1;\\r\\n    const minPathLength = dstY + dstX; // Math.abs(dstY - srcY) + Math.abs(dstX - srcX)\\r\\n    const grid = new Array(height);\\r\\n    for (let y = 0; y < height; y++)\\r\\n        grid[y] = new Array(width).fill(0);\\r\\n    for (let y = 0; y < height; y++) {\\r\\n        for (let x = 0; x < width; x++) {\\r\\n            if (y == 0 && x == 0)\\r\\n                continue; // Don't block start\\r\\n            if (y == dstY && x == dstX)\\r\\n                continue; // Don't block destination\\r\\n            // Generate more obstacles the farther a position is from start and destination.\\r\\n            // Raw distance factor peaks at 50% at half-way mark. Rescale to 40% max.\\r\\n            // Obstacle chance range of [15%, 40%] produces ~78% solvable puzzles\\r\\n            const distanceFactor = (Math.min(y + x, dstY - y + dstX - x) / minPathLength) * 0.8;\\r\\n            if (Math.random() < Math.max(0.15, distanceFactor))\\r\\n                grid[y][x] = 1;\\r\\n        }\\r\\n    }\\r\\n    return grid;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const grid = gen();\\r\\n    const data = grid;\\r\\n    const width = data[0].length;\\r\\n    const height = data.length;\\r\\n    const dstY = height - 1;\\r\\n    const dstX = width - 1;\\r\\n    const paths = new Array(height);\\r\\n    for (let y = 0; y < height; y++) {\\r\\n        paths[y] = new Array(width);\\r\\n    }\\r\\n    function validPosition(y, x) {\\r\\n        return y >= 0 && y < height && x >= 0 && x < width && data[y][x] == 0;\\r\\n    }\\r\\n    // List in-bounds and passable neighbors\\r\\n    function* neighbors(y, x) {\\r\\n        if (validPosition(y - 1, x))\\r\\n            yield [y - 1, x]; // Up\\r\\n        if (validPosition(y + 1, x))\\r\\n            yield [y + 1, x]; // Down\\r\\n        if (validPosition(y, x - 1))\\r\\n            yield [y, x - 1]; // Left\\r\\n        if (validPosition(y, x + 1))\\r\\n            yield [y, x + 1]; // Right\\r\\n    }\\r\\n    // Prepare starting point\\r\\n    paths[0][0] = [-1, -1];\\r\\n    const queue = [[0, 0]];\\r\\n    while (queue.length > 0) {\\r\\n        const cur = queue.shift();\\r\\n        if (!cur)\\r\\n            break;\\r\\n        for (const n of neighbors(cur[0], cur[1])) {\\r\\n            const y = n[0];\\r\\n            const x = n[1];\\r\\n            if (!paths[y][x]) {\\r\\n                paths[y][x] = cur;\\r\\n                queue.push(n);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    if (paths[dstY][dstX]) {\\r\\n        ns.tprintf(\\\"CAN COMPLETE\\\");\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(\\\"CANT COMPLETE\\\");\\r\\n    }\\r\\n    function translate(cy, cx, ny, nx) {\\r\\n        if (ny === -1 && nx === -1)\\r\\n            return \\\"X\\\";\\r\\n        if (cy === ny) {\\r\\n            if (cx > nx)\\r\\n                return \\\"L\\\";\\r\\n            return \\\"R\\\";\\r\\n        }\\r\\n        if (cy > ny) {\\r\\n            return \\\"U\\\";\\r\\n        }\\r\\n        return \\\"D\\\";\\r\\n    }\\r\\n    for (let y = 0; y < height; y++) {\\r\\n        let xstr = \\\"\\\";\\r\\n        for (let x = 0; x < width; x++) {\\r\\n            const n = paths[y][x];\\r\\n            const nstr = n ? `[${translate(y, x, n[0], n[1])}]` : \\\"[ ]\\\";\\r\\n            xstr = ns.sprintf(\\\"%s%s\\\", xstr, validPosition(y, x) ? nstr : \\\"[-]\\\");\\r\\n        }\\r\\n        ns.tprintf(xstr);\\r\\n    }\\r\\n    // reverse the path\\r\\n    let path = \\\"\\\";\\r\\n    let cur = [dstY, dstX];\\r\\n    while (validPosition(cur[0], cur[1])) {\\r\\n        const cy = cur[0];\\r\\n        const cx = cur[1];\\r\\n        const n = paths[cy][cx];\\r\\n        if (!n)\\r\\n            break;\\r\\n        const ny = n[0];\\r\\n        const nx = n[1];\\r\\n        switch (translate(cy, cx, ny, nx)) {\\r\\n            case \\\"L\\\":\\r\\n                path = \\\"R\\\" + path;\\r\\n                break;\\r\\n            case \\\"R\\\":\\r\\n                path = \\\"L\\\" + path;\\r\\n                break;\\r\\n            case \\\"U\\\":\\r\\n                path = \\\"D\\\" + path;\\r\\n                break;\\r\\n            case \\\"D\\\":\\r\\n                path = \\\"U\\\" + path;\\r\\n                break;\\r\\n        }\\r\\n        cur = n;\\r\\n    }\\r\\n    ns.tprintf(path);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxZQUFZLENBQUMsR0FBVyxFQUFFLEdBQVc7SUFDMUMsTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDekMsTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFekMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDbkUsQ0FBQztBQUVELFNBQVMsR0FBRztJQUNSLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkMsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLE1BQU0sSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdkIsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLGdEQUFnRDtJQUVuRixNQUFNLElBQUksR0FBZSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRTtRQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEUsS0FBSyxJQUFJLENBQUMsR0FBRyxD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\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///8f945708-ac5e-4186-9d5e-ddd0b13ad16c\",\"moduleSequenceNumber\":55929}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b2260138-d26f-45de-9b1d-a1842ac50fc2\",\"moduleSequenceNumber\":395697}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///a3a5c74d-e4fb-4781-bb4e-3a5e333ae6ce\",\"moduleSequenceNumber\":396016}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var SERVICE_PORTS;\\r\\n(function (SERVICE_PORTS) {\\r\\n    SERVICE_PORTS[SERVICE_PORTS[\\\"SERVER\\\"] = 7] = \\\"SERVER\\\";\\r\\n})(SERVICE_PORTS || (SERVICE_PORTS = {}));\\r\\nexport function getServerService(ns, portNum = SERVICE_PORTS.SERVER) {\\r\\n    const portHandle = ns.getPortHandle(portNum);\\r\\n    if (!portHandle.empty()) {\\r\\n        return portHandle.peek();\\r\\n    }\\r\\n    throw new Error(\\\"Server Service must be initialized before getServerService() may be called\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZV9oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VfaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQU4sSUFBWSxhQUVYO0FBRkQsV0FBWSxhQUFhO0lBQ3JCLHFEQUFVLENBQUE7QUFDZCxDQUFDLEVBRlcsYUFBYSxLQUFiLGFBQWEsUUFFeEI7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsRUFBTSxFQUFFLE9BQU8sR0FBRyxhQUFhLENBQUMsTUFBTTtJQUNuRSxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDckIsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDNUI7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRFQUE0RSxDQUFDLENBQUM7QUFDbEcsQ0FBQyJ9\",\"filename\":\"/lib/service_helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const CONSTSHAREJS = \\\"/lib/exec/const_share.js\\\";\\r\\nexport const CONSTWEAKENJS = \\\"/lib/exec/const_weaken.js\\\";\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.printf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args);\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    try {\\r\\n        ns.brutessh(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.ftpcrack(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.httpworm(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.relaysmtp(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.sqlinject(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport function canBackdoor(ns, hostname) {\\r\\n    const hosts = mapHosts(ns);\\r\\n    const trail = hosts[hostname];\\r\\n    const server = ns.getServer(hostname);\\r\\n    if (server.backdoorInstalled)\\r\\n        return true;\\r\\n    if (server.requiredHackingSkill > ns.getHackingLevel()) {\\r\\n        return false;\\r\\n    }\\r\\n    if (!server.hasAdminRights && !softenServer(ns, hostname)) {\\r\\n        return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport async function doBackdoor(ns, hostname) {\\r\\n    const hosts = mapHosts(ns);\\r\\n    const trail = hosts[hostname];\\r\\n    const server = ns.getServer(hostname);\\r\\n    if (server.backdoorInstalled)\\r\\n        return true;\\r\\n    if (server.requiredHackingSkill > ns.getHackingLevel()) {\\r\\n        llog(ns, \\\"Unable to backdoor server %s - Hacking level %d < %d\\\", hostname, ns.getHackingLevel(), server.requiredHackingSkill);\\r\\n        return false;\\r\\n    }\\r\\n    if (!server.hasAdminRights && !softenServer(ns, hostname)) {\\r\\n        llog(ns, \\\"Unable to backdoor server %s - Unable to obtain admin rights\\\", hostname, ns.getHackingLevel(), server.requiredHackingSkill);\\r\\n        return false;\\r\\n    }\\r\\n    for (const hostHopName of trail) {\\r\\n        ns.connect(hostHopName);\\r\\n    }\\r\\n    await ns.installBackdoor();\\r\\n    ns.connect(\\\"home\\\");\\r\\n    return true;\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\"];\\r\\n    //const targetHosts = [\\\"megacorp\\\",\\\"fulcrumassets\\\",\\\"kuai-gong\\\",\\\"fulcrumtech\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"omnitek\\\",\\\"clarkinc\\\"]\\r\\n    for (const hostname of targetHosts) {\\r\\n        await doBackdoor(ns, hostname);\\r\\n    }\\r\\n    // for (const hostname of allHosts(ns)) {\\r\\n    //     if (hostname === \\\"w0r1d_d43m0n\\\") continue;\\r\\n    //     await doBackdoor(ns, hostname);\\r\\n    // }\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRywwQkFBMEIsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsMkJBQTJCLENBQUM7QUFFekQsTUFBTSxVQUFVLElBQUksQ0FBQyxFQUFNLEVBQUUsR0FBVyxFQUFFLEdBQUcsSUFBeUI7SUFDbEUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDakQsSUFBSTtRQUNBLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDekI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUU7S0FDTDtJQUVELElBQUk7UUFDQSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3pCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFO0tBQ0w7SUFFRCxJQUFJO1FBQ0EsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN6QjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsRUFBRTtLQUNMO0lBRUQsSUFBSTtRQUNBLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDMUI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUU7S0FDTDtJQUVELElBQUk7UUFDQSxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzFCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFO0tBQ0w7SUFFRCxJQUFJO1FBQ0EsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNyQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FDcEIsRUFBTSxFQUNOLFFBQWtDLEVBQUUsRUFDcEMsVUFBb0IsRUFBRSxFQUN0QixPQUFPLEdBQUcsTUFBTTtJQUVoQixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxVQUFVLENBQUM7SUFFNUIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLEtBQUssTUFBTSxLQUFLLElBQUksUUFBUSxFQUFFO1FBQzFCLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMxQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQU07SUFDM0IsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQU07SUFDaEMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRTlCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSztRQUFFLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUUxRCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLO1FBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV2RyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNO1FBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV4RyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHO1FBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUV2RyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJO1FBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV0RyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLO1FBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM3RyxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU07SUFDcEMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCLEtBQUssTUFBTSxRQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ2pDLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUI7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxFQUFNLEVBQUUsRUFBVSxFQUFFLE1BQU0sR0FBRyxLQUFLLEVBQUUsUUFBUSxHQUFHLEtBQUs7SUFDekUsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUMzQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUM7SUFFOUIsSUFBSSxNQUFNLEVBQUU7UUFDUixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMzRyxJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDckYsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDekQ7U0FBTTtRQUNILElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDeEYsSUFBSSxPQUFPLEdBQUcsQ0FBQztZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDdEM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxFQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsS0FBSztJQUN4RCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0lBRXJELElBQUksTUFBTSxFQUFFO1FBQ1IsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUN6RCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0tBQ3REO1NBQU07UUFDSCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMzQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNoRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTlCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdEMsSUFBSSxNQUFNLENBQUMsaUJBQWlCO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFMUMsSUFBSSxNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBQ3BELE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFO1FBQ3ZELE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsVUFBVSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNyRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTlCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdEMsSUFBSSxNQUFNLENBQUMsaUJBQWlCO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFMUMsSUFBSSxNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBQ3BELElBQUksQ0FDQSxFQUFFLEVBQ0Ysc0RBQXNELEVBQ3RELFFBQVEsRUFDUixFQUFFLENBQUMsZUFBZSxFQUFFLEVBQ3BCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FDOUIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFO1FBQ3ZELElBQUksQ0FDQSxFQUFFLEVBQ0YsOERBQThELEVBQzlELFFBQVEsRUFDUixFQUFFLENBQUMsZUFBZSxFQUFFLEVBQ3BCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FDOUIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsS0FBSyxNQUFNLFdBQVcsSUFBSSxLQUFLLEVBQUU7UUFDN0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUMzQjtJQUVELE1BQU0sRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbkIsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU07SUFDcEMseUZBQXlGO0lBQ3pGLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDdkUsd0hBQXdIO0lBRXhILEtBQUssTUFBTSxRQUFRLElBQUksV0FBVyxFQUFFO1FBQ2hDLE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNsQztJQUVELHlDQUF5QztJQUN6QyxpREFBaUQ7SUFDakQsc0NBQXNDO0lBQ3RDLElBQUk7QUFDUixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLFlBQVk7SUFDWixVQUFVO0lBQ1YsY0FBYztJQUNkLE9BQU87SUFDUCxVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixLQUFLO0lBQ0wscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNULGFBQWE7SUFDYixZQUFZO0lBQ1osYUFBYTtJQUNiLFVBQVU7SUFDVixjQUFjO0lBQ2QsMkJBQTJCO0NBQzlCLENBQUMifQ==\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.75,\"server\":\"home\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Inspiration taken from https://github.com/jjclark1982/bitburner-scripts/blob/main/service/servers.js */\\r\\nimport { allHosts } from \\\"/lib/util\\\";\\r\\nlet uid = 0;\\r\\nvar CodingContractRewardType;\\r\\n(function (CodingContractRewardType) {\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"FactionReputation\\\"] = 0] = \\\"FactionReputation\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"FactionReputationAll\\\"] = 1] = \\\"FactionReputationAll\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"CompanyReputation\\\"] = 2] = \\\"CompanyReputation\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"Money\\\"] = 3] = \\\"Money\\\";\\r\\n})(CodingContractRewardType || (CodingContractRewardType = {}));\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"help\\\", false],\\r\\n    [\\\"port\\\", 7],\\r\\n];\\r\\nexport function getScriptExecutionArg(args, arg) {\\r\\n    const argIndex = args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1)\\r\\n        return args[argIndex + 1];\\r\\n    return;\\r\\n}\\r\\nfunction timingSearch(server, timingFunction, ms, start, end, precision) {\\r\\n    const mid = (start + end) / 2;\\r\\n    const midMs = timingFunction(server.hostname, mid);\\r\\n    if (precision && midMs - precision < ms && midMs + precision > ms)\\r\\n        return mid;\\r\\n    else if (Math.round(ms) === Math.round(midMs))\\r\\n        return mid;\\r\\n    if (midMs > ms)\\r\\n        return timingSearch(server, timingFunction, ms, mid, end, precision);\\r\\n    return timingSearch(server, timingFunction, ms, start, mid, precision);\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"asleep\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.clearLog();\\r\\n    options = ns.flags(argsSchema);\\r\\n    if (options.help) {\\r\\n        ns.tprint(\\\"Provide server information on a netscript port\\\");\\r\\n        return;\\r\\n    }\\r\\n    const serverService = new ServerService(ns);\\r\\n    eval(\\\"window\\\").serverService = serverService;\\r\\n    const portHandle = ns.getPortHandle(options.port);\\r\\n    portHandle.clear();\\r\\n    portHandle.write(serverService);\\r\\n    ns.atExit(() => {\\r\\n        portHandle.clear();\\r\\n        delete eval(\\\"window\\\").serverService;\\r\\n    });\\r\\n    ns.print(`Started Server Service on port ${options.port}`);\\r\\n    while (true) {\\r\\n        await ns.asleep(60 * 60 * 1000);\\r\\n    }\\r\\n}\\r\\nexport class ServerService {\\r\\n    ns;\\r\\n    allHostsCache = [];\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n    loadServer(hostname) {\\r\\n        return new Server(this.ns, hostname);\\r\\n    }\\r\\n    getAllServers(homeReserve) {\\r\\n        const allServers = {};\\r\\n        for (const hostname of this.getAllHosts()) {\\r\\n            allServers[hostname] = this.loadServer(hostname);\\r\\n        }\\r\\n        if (homeReserve && homeReserve > 0)\\r\\n            allServers[\\\"home\\\"].reservedRam = homeReserve;\\r\\n        return allServers;\\r\\n    }\\r\\n    getScriptableServers(homeReserve) {\\r\\n        return Object.values(this.getAllServers(homeReserve)).filter((server) => server.canRunScripts());\\r\\n    }\\r\\n    getHackableServers(hacking) {\\r\\n        return Object.values(this.getAllServers()).filter((server) => server.canBeHacked(hacking));\\r\\n    }\\r\\n    getAllHosts(force = false) {\\r\\n        if (!this.allHostsCache.length || force) {\\r\\n            this.allHostsCache = allHosts(this.ns);\\r\\n        }\\r\\n        return this.allHostsCache;\\r\\n    }\\r\\n}\\r\\nexport class Server {\\r\\n    // base server memebers\\r\\n    contracts = [];\\r\\n    cpuCores = 1;\\r\\n    ftpPortOpen = false;\\r\\n    hasAdminRights = false;\\r\\n    hostname = \\\"\\\";\\r\\n    httpPortOpen = false;\\r\\n    ip = \\\"\\\";\\r\\n    isConnectedTo = false;\\r\\n    maxRam = 0;\\r\\n    messages = [];\\r\\n    organizationName = \\\"\\\";\\r\\n    programs = [];\\r\\n    ramUsed = 0;\\r\\n    runningScripts = [];\\r\\n    scripts = [];\\r\\n    serversOnNetwork = [];\\r\\n    smtpPortOpen = false;\\r\\n    sqlPortOpen = false;\\r\\n    sshPortOpen = false;\\r\\n    textFiles = [];\\r\\n    purchasedByPlayer = false;\\r\\n    // server members\\r\\n    backdoorInstalled = false;\\r\\n    baseDifficulty = 1;\\r\\n    hackDifficulty = 1;\\r\\n    minDifficulty = 1;\\r\\n    moneyAvailable = 0;\\r\\n    moneyMax = 0;\\r\\n    numOpenPortsRequired = 5;\\r\\n    openPortCount = 0;\\r\\n    requiredHackingSkill = 1;\\r\\n    serverGrowth = 1;\\r\\n    suppression = 0;\\r\\n    activeSuppressionThreads = [];\\r\\n    suppressionIntervalID = null;\\r\\n    suppressionLastUpdateTime = 0;\\r\\n    // hacknet server members\\r\\n    cache = 1;\\r\\n    cores = 1;\\r\\n    hashCapacity = 0;\\r\\n    hashRate = 0;\\r\\n    level = 1;\\r\\n    onlineTimeSeconds = 0;\\r\\n    totalHashesGenerated = 0;\\r\\n    // my server members\\r\\n    ns;\\r\\n    reservedRam = 0;\\r\\n    reservedScripts = [];\\r\\n    constructor(ns, data) {\\r\\n        this.ns = ns;\\r\\n        if (typeof data === \\\"string\\\") {\\r\\n            this.hostname = data;\\r\\n            data = undefined;\\r\\n        }\\r\\n        this.reload(data);\\r\\n    }\\r\\n    reload(data) {\\r\\n        data ||= this.ns.getServer(this.hostname);\\r\\n        Object.assign(this, data);\\r\\n        return this;\\r\\n    }\\r\\n    canRunScripts() {\\r\\n        return this.hasAdminRights && this.maxRam > 0;\\r\\n    }\\r\\n    canBeHacked(hacking) {\\r\\n        return this.hasAdminRights && this.moneyMax > 0 && this.requiredHackingSkill <= hacking;\\r\\n    }\\r\\n    reservedScriptRam() {\\r\\n        return this.reservedScripts.reduce((tally, script) => tally + script.ram, 0);\\r\\n    }\\r\\n    reserveScript(filename, ram, threads, args = []) {\\r\\n        const totalRam = ram * threads;\\r\\n        const offset = Number(getScriptExecutionArg(args, \\\"--offset\\\"));\\r\\n        const batchID = Number(getScriptExecutionArg(args, \\\"--batchID\\\"));\\r\\n        if (this.availableRam() >= totalRam) {\\r\\n            this.reservedScripts.push({\\r\\n                filename: filename,\\r\\n                hostname: this.hostname,\\r\\n                ram: totalRam,\\r\\n                threads: threads,\\r\\n                args: args.concat(\\\"--uid\\\", uid++),\\r\\n                offset: offset,\\r\\n                batchID: batchID\\r\\n            });\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    popReservedScripts() {\\r\\n        const tmp = [...this.reservedScripts];\\r\\n        this.reservedScripts = [];\\r\\n        return tmp;\\r\\n    }\\r\\n    clearReservedScripts() {\\r\\n        this.reservedScripts = [];\\r\\n    }\\r\\n    availableRam() {\\r\\n        return Math.max(0, this.maxRam - this.ramUsed - this.reservedRam - this.reservedScriptRam());\\r\\n    }\\r\\n    threadsAvailable(threadSize = 1.75) {\\r\\n        return Math.floor(this.availableRam() / threadSize) || 0;\\r\\n    }\\r\\n    hackTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackTime(this, player, hackOverride);\\r\\n        return this.ns.getHackTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    hackAnalyze(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackPercent(this, player, hackOverride);\\r\\n        return this.ns.hackAnalyze(this.hostname, hackOverride);\\r\\n    }\\r\\n    hackLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getHackTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getHackTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getHackTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    hackAmountSecurity(threads = 1) {\\r\\n        //return this.ns.hackAnalyzeSecurity(threads);\\r\\n        return 0.002 * threads;\\r\\n    }\\r\\n    growthAmount(player, growMult, cores) {\\r\\n        growMult ||= this.moneyMax / this.moneyAvailable;\\r\\n        growMult = Math.max(1, growMult);\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.numCycleForGrowth(this, growMult, player, cores);\\r\\n        return this.ns.growthAnalyze(this.hostname, growMult, cores);\\r\\n    }\\r\\n    growPercent(threads, player, cores) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growPercent(this, threads, player, cores);\\r\\n        return 0;\\r\\n    }\\r\\n    growthAmountSecurity(threads = 1) {\\r\\n        //return this.ns.growthAnalyzeSecurity(threads);\\r\\n        return 0.004 * threads;\\r\\n    }\\r\\n    growTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growTime(this, player, hackOverride);\\r\\n        return this.ns.getGrowTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    growLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getGrowTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getGrowTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getGrowTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    weakenTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.weakenTime(this, player, hackOverride);\\r\\n        return this.ns.getWeakenTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n    weakenAmount(threads = 1, cores) {\\r\\n        return this.ns.weakenAnalyze(threads, cores);\\r\\n        //return 0.05 * threads;\\r\\n    }\\r\\n    weakenLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.weakenLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getWeakenTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getWeakenTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getWeakenTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    simGrowBatch(growThreads, weakenThreads, player) {\\r\\n        this.moneyAvailable = Math.min(this.growPercent(growThreads, player) * this.moneyAvailable, this.moneyMax);\\r\\n        this.hackDifficulty += this.growthAmountSecurity(growThreads);\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenThreads), this.minDifficulty);\\r\\n    }\\r\\n    hackAmount(hackThreads, hackOverride, player) {\\r\\n        return Math.min(this.hackAnalyze(hackOverride, player) * hackThreads, 1) * this.moneyAvailable;\\r\\n    }\\r\\n    simHackBatch(hackThreads, hackOverride, weakenHackThreads, growThreads, weakenGrowThreads, player) {\\r\\n        const hackAmount = this.hackAmount(hackThreads, hackOverride, player);\\r\\n        this.moneyAvailable = Math.max(this.moneyAvailable - hackAmount, Math.round(this.moneyMax * 0.01));\\r\\n        this.hackDifficulty += this.hackAmountSecurity(hackThreads);\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenHackThreads), this.minDifficulty);\\r\\n        this.simGrowBatch(growThreads, weakenGrowThreads, player);\\r\\n        return hackAmount;\\r\\n    }\\r\\n    simHack(hackThreads, hackOverride, player) {\\r\\n        const hackAmount = this.hackAmount(hackThreads, hackOverride, player);\\r\\n        this.moneyAvailable = Math.max(this.moneyAvailable - hackAmount, Math.round(this.moneyMax * 0.01));\\r\\n        this.hackDifficulty += this.hackAmountSecurity(hackThreads);\\r\\n    }\\r\\n    simGrow(growThreads, hackOverride, player) {\\r\\n        this.moneyAvailable = Math.min(this.growPercent(growThreads, player) * this.moneyAvailable, this.moneyMax);\\r\\n        this.hackDifficulty += this.growthAmountSecurity(growThreads);\\r\\n    }\\r\\n    simWeaken(weakenThreads) {\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenThreads), this.minDifficulty);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic2VydmljZXMvc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBHQUEwRztBQUcxRyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztBQUVaLElBQUssd0JBS0o7QUFMRCxXQUFLLHdCQUF3QjtJQUN6QixpR0FBaUIsQ0FBQTtJQUNqQix1R0FBb0IsQ0FBQTtJQUNwQixpR0FBaUIsQ0FBQTtJQUNqQix5RUFBSyxDQUFBO0FBQ1QsQ0FBQyxFQUxJLHdCQUF3QixLQUF4Qix3QkFBd0IsUUFLNUI7QUFnRkQsSUFBSSxPQUFPLENBQUM7QUFDWixNQUFNLFVBQVUsR0FBcUQ7SUFDakUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO0lBQ2YsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0NBQ2QsQ0FBQztBQUVGLE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxJQUFnQixFQUFFLEdBQVc7SUFDL0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQyxPQUFPO0FBQ1gsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUNqQixNQUFjLEVBQ2QsY0FBaUQsRUFDakQsRUFBVSxFQUNWLEtBQWEsRUFDYixHQUFXLEVBQ1gsU0FBa0I7SUFFbEIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEdB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\",\"filename\":\"/services/server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fd718c04-5524-440b-8757-34536d397273\",\"moduleSequenceNumber\":231933},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///cf8848e3-ada2-4c45-aea9-937297270a06\",\"moduleSequenceNumber\":275606}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"lib/util\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"continuous\\\", false],\\r\\n    [\\\"c\\\", false],\\r\\n];\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    try {\\r\\n        const reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n        if (reward === \\\"\\\") {\\r\\n            ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n            ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"Caught Exception: %s\\\", e);\\r\\n    }\\r\\n}\\r\\nclass CCT {\\r\\n    name;\\r\\n    host;\\r\\n    type;\\r\\n    desc;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    data;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    solve;\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n        switch (this.type) {\\r\\n            case \\\"Find Largest Prime Factor\\\":\\r\\n                this.solve = _.bind(CCT.solveFindLargestPrimeFactor, null, _, this);\\r\\n                break;\\r\\n            case \\\"Subarray with Maximum Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveSubarraywithMaximumSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Total Ways to Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveTotalWaystoSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Total Ways to Sum II\\\":\\r\\n                this.solve = _.bind(CCT.solveTotalWaystoSumII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Spiralize Matrix\\\":\\r\\n                this.solve = _.bind(CCT.solveSpiralizeMatrix, null, _, this);\\r\\n                break;\\r\\n            case \\\"Array Jumping Game\\\":\\r\\n                this.solve = _.bind(CCT.solveArrayJumpingGame, null, _, this);\\r\\n                break;\\r\\n            case \\\"Array Jumping Game II\\\":\\r\\n                this.solve = _.bind(CCT.solveArrayJumpingGameII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Merge Overlapping Intervals\\\":\\r\\n                this.solve = _.bind(CCT.solveMergeOverlappingIntervals, null, _, this);\\r\\n                break;\\r\\n            case \\\"Generate IP Addresses\\\":\\r\\n                this.solve = _.bind(CCT.solveGenerateIPAddresses, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader I\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader II\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader III\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader IV\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIV, null, _, this);\\r\\n                break;\\r\\n            case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n                this.solve = _.bind(CCT.solveMinimumPathSuminaTriangle, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid I\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid II\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Shortest Path in a Grid\\\":\\r\\n                this.solve = _.bind(CCT.solveShortestPathinaGrid, null, _, this);\\r\\n                break;\\r\\n            case \\\"Sanitize Parentheses in Expression\\\":\\r\\n                this.solve = _.bind(CCT.solveSanitizeParenthesesinExpression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Find All Valid Math Expressions\\\":\\r\\n                this.solve = _.bind(CCT.solveFindAllValidMathExpressions, null, _, this);\\r\\n                break;\\r\\n            case \\\"HammingCodes: Integer to Encoded Binary\\\":\\r\\n                this.solve = _.bind(CCT.solveHammingCodesIntegertoEncodedBinary, null, _, this);\\r\\n                break;\\r\\n            case \\\"HammingCodes: Encoded Binary to Integer\\\":\\r\\n                this.solve = _.bind(CCT.solveHammingCodesEncodedBinarytoInteger, null, _, this);\\r\\n                break;\\r\\n            case \\\"Proper 2-Coloring of a Graph\\\":\\r\\n                this.solve = _.bind(CCT.solveProper2ColoringofaGraph, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression I: RLE Compression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIRLECompression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression II: LZ Decompression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIILZDecompression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression III: LZ Compression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIIILZCompression, null, _, this);\\r\\n                break;\\r\\n        }\\r\\n        //this.print(ns);\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        const ways = [1];\\r\\n        ways.length = cct.data + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 1; i < cct.data; ++i) {\\r\\n            for (let j = i; j <= cct.data; ++j) {\\r\\n                ways[j] += ways[j - i];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[cct.data]);\\r\\n    }\\r\\n    static solveTotalWaystoSumII(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const n = data[0];\\r\\n        const s = data[1];\\r\\n        const ways = [1];\\r\\n        ways.length = n + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 0; i < s.length; i++) {\\r\\n            for (let j = s[i]; j <= n; j++) {\\r\\n                ways[j] += ways[j - s[i]];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[n]);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        const nums = cct.data.slice();\\r\\n        for (let i = 1; i < nums.length; i++) {\\r\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1]);\\r\\n        }\\r\\n        answerCCT(ns, cct, Math.max(...nums));\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        const spiral = [];\\r\\n        const m = cct.data.length;\\r\\n        const n = cct.data[0].length;\\r\\n        let u = 0;\\r\\n        let d = m - 1;\\r\\n        let l = 0;\\r\\n        let r = n - 1;\\r\\n        let k = 0;\\r\\n        while (true) {\\r\\n            // Up\\r\\n            for (let col = l; col <= r; col++) {\\r\\n                spiral[k] = cct.data[u][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++u > d) {\\r\\n                break;\\r\\n            }\\r\\n            // Right\\r\\n            for (let row = u; row <= d; row++) {\\r\\n                spiral[k] = cct.data[row][r];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--r < l) {\\r\\n                break;\\r\\n            }\\r\\n            // Down\\r\\n            for (let col = r; col >= l; col--) {\\r\\n                spiral[k] = cct.data[d][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--d < u) {\\r\\n                break;\\r\\n            }\\r\\n            // Left\\r\\n            for (let row = d; row >= u; row--) {\\r\\n                spiral[k] = cct.data[row][l];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++l > r) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, spiral);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        let i = 0;\\r\\n        for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n            reach = Math.max(i + cct.data[i], reach);\\r\\n        }\\r\\n        answerCCT(ns, cct, i === n ? 1 : 0);\\r\\n    }\\r\\n    static solveArrayJumpingGameII(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const n = data.length;\\r\\n        let reach = 0;\\r\\n        let jumps = 0;\\r\\n        let lastJump = -1;\\r\\n        while (reach < n - 1) {\\r\\n            let jumpedFrom = -1;\\r\\n            for (let i = reach; i > lastJump; i--) {\\r\\n                if (i + data[i] > reach) {\\r\\n                    reach = i + data[i];\\r\\n                    jumpedFrom = i;\\r\\n                }\\r\\n            }\\r\\n            if (jumpedFrom === -1) {\\r\\n                jumps = 0;\\r\\n                break;\\r\\n            }\\r\\n            lastJump = jumpedFrom;\\r\\n            jumps++;\\r\\n        }\\r\\n        answerCCT(ns, cct, jumps);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        function convert2DArrayToString(arr) {\\r\\n            const components = [];\\r\\n            arr.forEach((e) => {\\r\\n                let s = e.toString();\\r\\n                s = [\\\"[\\\", s, \\\"]\\\"].join(\\\"\\\");\\r\\n                components.push(s);\\r\\n            });\\r\\n            return components.join(\\\",\\\").replace(/\\\\s/g, \\\"\\\");\\r\\n        }\\r\\n        const intervals = cct.data.slice();\\r\\n        intervals.sort((a, b) => {\\r\\n            return a[0] - b[0];\\r\\n        });\\r\\n        const result = [];\\r\\n        let start = intervals[0][0];\\r\\n        let end = intervals[0][1];\\r\\n        for (const interval of intervals) {\\r\\n            if (interval[0] <= end) {\\r\\n                end = Math.max(end, interval[1]);\\r\\n            }\\r\\n            else {\\r\\n                result.push([start, end]);\\r\\n                start = interval[0];\\r\\n                end = interval[1];\\r\\n            }\\r\\n        }\\r\\n        result.push([start, end]);\\r\\n        answerCCT(ns, cct, [convert2DArrayToString(result)]);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\")\\r\\n                return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\")\\r\\n                return false;\\r\\n            if (str.length > 3)\\r\\n                return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n        const results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9)\\r\\n                continue;\\r\\n            const a = cct.data.substr(0, i);\\r\\n            if (!validate(a))\\r\\n                continue;\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6)\\r\\n                    continue;\\r\\n                const b = cct.data.substr(i, j);\\r\\n                if (!validate(b))\\r\\n                    continue;\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3)\\r\\n                        continue;\\r\\n                    const c = cct.data.substr(i + j, k);\\r\\n                    const d = cct.data.substr(i + j + k);\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        let maxCur = 0;\\r\\n        let maxSoFar = 0;\\r\\n        for (let i = 1; i < cct.data.length; ++i) {\\r\\n            maxCur = Math.max(0, (maxCur += cct.data[i] - cct.data[i - 1]));\\r\\n            maxSoFar = Math.max(maxCur, maxSoFar);\\r\\n        }\\r\\n        answerCCT(ns, cct, maxSoFar);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        let profit = 0;\\r\\n        for (let p = 1; p < cct.data.length; ++p) {\\r\\n            profit += Math.max(cct.data[p] - cct.data[p - 1], 0);\\r\\n        }\\r\\n        answerCCT(ns, cct, profit);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        let hold1 = Number.MIN_SAFE_INTEGER;\\r\\n        let hold2 = Number.MIN_SAFE_INTEGER;\\r\\n        let release1 = 0;\\r\\n        let release2 = 0;\\r\\n        for (const price of cct.data) {\\r\\n            release2 = Math.max(release2, hold2 + price);\\r\\n            hold2 = Math.max(hold2, release1 - price);\\r\\n            release1 = Math.max(release1, hold1 + price);\\r\\n            hold1 = Math.max(hold1, price * -1);\\r\\n        }\\r\\n        answerCCT(ns, cct, release2);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        const k = cct.data[0];\\r\\n        const prices = cct.data[1];\\r\\n        const len = prices.length;\\r\\n        if (len < 2) {\\r\\n            answerCCT(ns, cct, 0);\\r\\n            return;\\r\\n        }\\r\\n        if (k > len / 2) {\\r\\n            let res = 0;\\r\\n            for (let i = 1; i < len; ++i) {\\r\\n                res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n            }\\r\\n            answerCCT(ns, cct, res);\\r\\n            return;\\r\\n        }\\r\\n        const hold = [];\\r\\n        const rele = [];\\r\\n        hold.length = k + 1;\\r\\n        rele.length = k + 1;\\r\\n        for (let i = 0; i <= k; ++i) {\\r\\n            hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n            rele[i] = 0;\\r\\n        }\\r\\n        let cur;\\r\\n        for (let i = 0; i < len; ++i) {\\r\\n            cur = prices[i];\\r\\n            for (let j = k; j > 0; --j) {\\r\\n                rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, rele[k]);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        const dp = cct.data[n - 1].slice();\\r\\n        for (let i = n - 2; i > -1; --i) {\\r\\n            for (let j = 0; j < cct.data[i].length; ++j) {\\r\\n                dp[j] = Math.min(dp[j], dp[j + 1]) + cct.data[i][j];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, dp[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        const n = cct.data[0]; // Number of rows\\r\\n        const m = cct.data[1]; // Number of columns\\r\\n        const currentRow = [];\\r\\n        currentRow.length = n;\\r\\n        for (let i = 0; i < n; i++) {\\r\\n            currentRow[i] = 1;\\r\\n        }\\r\\n        for (let row = 1; row < m; row++) {\\r\\n            for (let i = 1; i < n; i++) {\\r\\n                currentRow[i] += currentRow[i - 1];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, currentRow[n - 1]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        const obstacleGrid = [];\\r\\n        obstacleGrid.length = cct.data.length;\\r\\n        for (let i = 0; i < obstacleGrid.length; ++i) {\\r\\n            obstacleGrid[i] = cct.data[i].slice();\\r\\n        }\\r\\n        for (let i = 0; i < obstacleGrid.length; i++) {\\r\\n            for (let j = 0; j < obstacleGrid[0].length; j++) {\\r\\n                if (obstacleGrid[i][j] == 1) {\\r\\n                    obstacleGrid[i][j] = 0;\\r\\n                }\\r\\n                else if (i == 0 && j == 0) {\\r\\n                    obstacleGrid[0][0] = 1;\\r\\n                }\\r\\n                else {\\r\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]);\\r\\n    }\\r\\n    static solveShortestPathinaGrid(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const width = data[0].length;\\r\\n        const height = data.length;\\r\\n        const dstY = height - 1;\\r\\n        const dstX = width - 1;\\r\\n        const paths = new Array(height);\\r\\n        for (let y = 0; y < height; y++) {\\r\\n            paths[y] = new Array(width);\\r\\n        }\\r\\n        function validPosition(y, x) {\\r\\n            return y >= 0 && y < height && x >= 0 && x < width && data[y][x] == 0;\\r\\n        }\\r\\n        // List in-bounds and passable neighbors\\r\\n        function* neighbors(y, x) {\\r\\n            if (validPosition(y - 1, x))\\r\\n                yield [y - 1, x]; // Up\\r\\n            if (validPosition(y + 1, x))\\r\\n                yield [y + 1, x]; // Down\\r\\n            if (validPosition(y, x - 1))\\r\\n                yield [y, x - 1]; // Left\\r\\n            if (validPosition(y, x + 1))\\r\\n                yield [y, x + 1]; // Right\\r\\n        }\\r\\n        // Prepare starting point\\r\\n        paths[0][0] = [-1, -1];\\r\\n        const queue = [[0, 0]];\\r\\n        while (queue.length > 0) {\\r\\n            const cur = queue.shift();\\r\\n            if (!cur)\\r\\n                break;\\r\\n            for (const n of neighbors(cur[0], cur[1])) {\\r\\n                const y = n[0];\\r\\n                const x = n[1];\\r\\n                if (!paths[y][x]) {\\r\\n                    paths[y][x] = cur;\\r\\n                    queue.push(n);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        function translate(cy, cx, ny, nx) {\\r\\n            if (ny === -1 && nx === -1)\\r\\n                return \\\"X\\\";\\r\\n            if (cy === ny) {\\r\\n                if (cx > nx)\\r\\n                    return \\\"L\\\";\\r\\n                return \\\"R\\\";\\r\\n            }\\r\\n            if (cy > ny) {\\r\\n                return \\\"U\\\";\\r\\n            }\\r\\n            return \\\"D\\\";\\r\\n        }\\r\\n        // for (let y = 0; y < height; y++) {\\r\\n        //     let xstr = \\\"\\\";\\r\\n        //     for (let x = 0; x < width; x++) {\\r\\n        //         const n = paths[y][x];\\r\\n        //         const nstr = n ? `[${translate(y, x, n[0], n[1])}]` : \\\"[ ]\\\";\\r\\n        //         xstr = ns.sprintf(\\\"%s%s\\\", xstr, validPosition(y, x) ? nstr : \\\"[-]\\\");\\r\\n        //     }\\r\\n        //     ns.tprintf(xstr);\\r\\n        // }\\r\\n        // reverse the path\\r\\n        let path = \\\"\\\";\\r\\n        let cur = [dstY, dstX];\\r\\n        while (validPosition(cur[0], cur[1])) {\\r\\n            const cy = cur[0];\\r\\n            const cx = cur[1];\\r\\n            const n = paths[cy][cx];\\r\\n            if (!n)\\r\\n                break;\\r\\n            const ny = n[0];\\r\\n            const nx = n[1];\\r\\n            switch (translate(cy, cx, ny, nx)) {\\r\\n                case \\\"L\\\":\\r\\n                    path = \\\"R\\\" + path;\\r\\n                    break;\\r\\n                case \\\"R\\\":\\r\\n                    path = \\\"L\\\" + path;\\r\\n                    break;\\r\\n                case \\\"U\\\":\\r\\n                    path = \\\"D\\\" + path;\\r\\n                    break;\\r\\n                case \\\"D\\\":\\r\\n                    path = \\\"U\\\" + path;\\r\\n                    break;\\r\\n            }\\r\\n            cur = n;\\r\\n        }\\r\\n        answerCCT(ns, cct, [path]);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        let left = 0;\\r\\n        let right = 0;\\r\\n        const res = [];\\r\\n        for (let i = 0; i < cct.data.length; ++i) {\\r\\n            if (cct.data[i] === \\\"(\\\") {\\r\\n                ++left;\\r\\n            }\\r\\n            else if (cct.data[i] === \\\")\\\") {\\r\\n                left > 0 ? --left : ++right;\\r\\n            }\\r\\n        }\\r\\n        function dfs(pair, index, left, right, s, solution, res) {\\r\\n            if (s.length === index) {\\r\\n                if (left === 0 && right === 0 && pair === 0) {\\r\\n                    for (let i = 0; i < res.length; i++) {\\r\\n                        if (res[i] === solution) {\\r\\n                            return;\\r\\n                        }\\r\\n                    }\\r\\n                    res.push(solution);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            if (s[index] === \\\"(\\\") {\\r\\n                if (left > 0) {\\r\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n                }\\r\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else if (s[index] === \\\")\\\") {\\r\\n                if (right > 0)\\r\\n                    dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n                if (pair > 0)\\r\\n                    dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else {\\r\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n        }\\r\\n        dfs(0, 0, left, right, cct.data, \\\"\\\", res);\\r\\n        answerCCT(ns, cct, res);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        const num = cct.data[0];\\r\\n        const target = cct.data[1];\\r\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n            if (pos === num.length) {\\r\\n                if (target === evaluated) {\\r\\n                    res.push(path);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            for (let i = pos; i < num.length; ++i) {\\r\\n                if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                    break;\\r\\n                }\\r\\n                const cur = parseInt(num.substring(pos, i + 1));\\r\\n                if (pos === 0) {\\r\\n                    helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n                }\\r\\n                else {\\r\\n                    helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                    helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                    helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const result = [];\\r\\n        helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveHammingCodesIntegertoEncodedBinary(ns, cct) {\\r\\n        answerCCT(ns, cct, [HammingEncode(cct.data)]);\\r\\n    }\\r\\n    static solveHammingCodesEncodedBinarytoInteger(ns, cct) {\\r\\n        answerCCT(ns, cct, HammingDecode(cct.data));\\r\\n    }\\r\\n    static solveProper2ColoringofaGraph(ns, cct) {\\r\\n        // const data = cct.data;\\r\\n        // function neighbourhood(vertex: number): number[] {\\r\\n        //     const adjLeft = data[1].filter(([a, _]) => a == vertex).map(([_, b]) => b);\\r\\n        //     const adjRight = data[1].filter(([_, b]) => b == vertex).map(([a, _]) => a);\\r\\n        //     return adjLeft.concat(adjRight);\\r\\n        // }\\r\\n        // //Verify that there is no solution by attempting to create a proper 2-coloring.\\r\\n        // const coloring: (number | undefined)[] = Array(data[0]).fill(undefined);\\r\\n        // while (coloring.some((val) => val === undefined)) {\\r\\n        //     //Color a vertex in the graph\\r\\n        //     const initialVertex: number = coloring.findIndex((val) => val === undefined);\\r\\n        //     coloring[initialVertex] = 0;\\r\\n        //     const frontier: number[] = [initialVertex];\\r\\n        //     //Propogate the coloring throughout the component containing v greedily\\r\\n        //     while (frontier.length > 0) {\\r\\n        //         const v: number = frontier.pop() || 0;\\r\\n        //         const neighbors: number[] = neighbourhood(v);\\r\\n        //         //For each vertex u adjacent to v\\r\\n        //         for (const id in neighbors) {\\r\\n        //             const u: number = neighbors[id];\\r\\n        //             //Set the color of u to the opposite of v's color if it is new,\\r\\n        //             //then add u to the frontier to continue the algorithm.\\r\\n        //             if (coloring[u] === undefined) {\\r\\n        //                 if (coloring[v] === 0) coloring[u] = 1;\\r\\n        //                 else coloring[u] = 0;\\r\\n        //                 frontier.push(u);\\r\\n        //             }\\r\\n        //             //Assert u,v do not have the same color\\r\\n        //             else if (coloring[u] === coloring[v]) {\\r\\n        //                 //If u,v do have the same color, no proper 2-coloring exists, meaning\\r\\n        //                 //the player was correct to say there is no proper 2-coloring of the graph.\\r\\n        //                 answerCCT(ns, cct, []);\\r\\n        //                 return;\\r\\n        //             }\\r\\n        //         }\\r\\n        //     }\\r\\n        // }\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIRLECompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIILZDecompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIIILZCompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        let fac = 2;\\r\\n        let n = cct.data;\\r\\n        while (n > (fac - 1) * (fac - 1)) {\\r\\n            while (n % fac === 0) {\\r\\n                n = Math.round(n / fac);\\r\\n            }\\r\\n            ++fac;\\r\\n        }\\r\\n        answerCCT(ns, cct, n === 1 ? fac - 1 : n);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    options.continuous = options.continuous || options.c;\\r\\n    const hosts = allHosts(ns);\\r\\n    while (true) {\\r\\n        const ccts = [];\\r\\n        for (const hostname of hosts) {\\r\\n            const ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n            if (ls.length === 0)\\r\\n                continue;\\r\\n            ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n        }\\r\\n        for (const cct of ccts) {\\r\\n            cct.solve(ns);\\r\\n        }\\r\\n        if (!options.continuous)\\r\\n            break;\\r\\n        await ns.sleep(60 * 1000);\\r\\n    }\\r\\n}\\r\\nfunction HammingDecode(_data) {\\r\\n    //check for altered bit and decode\\r\\n    const _build = _data.split(\\\"\\\"); // ye, an array for working, again\\r\\n    const _testArray = []; //for the \\\"truthtable\\\". if any is false, the data has an altered bit, will check for and fix it\\r\\n    const _sumParity = Math.ceil(Math.log2(_data.length)); // sum of parity for later use\\r\\n    const count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\r\\n    // the count.... again ;)\\r\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // store first index, for checking in next step and fix the _build properly later on\\r\\n    _testArray.push(_overallParity == (count(_build, \\\"1\\\") % 2).toString() ? true : false); // first check with the overall parity bit\\r\\n    for (let i = 0; i < _sumParity; i++) {\\r\\n        // for the rest of the remaining parity bits we also \\\"check\\\"\\r\\n        const _tempIndex = Math.pow(2, i) - 1; // get the parityBits Index\\r\\n        const _tempStep = _tempIndex + 1; // set the stepsize\\r\\n        const _tempData = [..._build]; // get a \\\"copy\\\" of the build-data for working\\r\\n        const _tempArray = []; // init empty array for \\\"testing\\\"\\r\\n        while (_tempData[_tempIndex] != undefined) {\\r\\n            // extract from the copied data until the \\\"starting\\\" index is undefined\\r\\n            const _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)]; // extract 2*stepsize\\r\\n            _tempArray.push(..._temp.splice(0, _tempStep)); // and cut again for keeping first half\\r\\n        }\\r\\n        const _tempParity = _tempArray.shift(); // and again save the first index separated for checking with the rest of the data\\r\\n        _testArray.push(_tempParity == (count(_tempArray, \\\"1\\\") % 2).toString() ? true : false);\\r\\n        // is the _tempParity the calculated data? push answer into the 'truthtable'\\r\\n    }\\r\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index and start with 0\\r\\n    for (let i = 1; i < _sumParity + 1; i++) {\\r\\n        // simple binary adding for every boolean in the _testArray, starting from 2nd index of it\\r\\n        _fixIndex += _testArray[i] ? 0 : Math.pow(2, i) / 2;\\r\\n    }\\r\\n    _build.unshift(_overallParity); // now we need the \\\"overall\\\" parity back in it's place\\r\\n    // try fix the actual encoded binary string if there is an error\\r\\n    if (_fixIndex > 0 && _testArray[0] == false) {\\r\\n        // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\r\\n        _build[_fixIndex] = _build[_fixIndex] == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == false) {\\r\\n        // otherwise, if the the overall_parity is the only wrong, fix that one\\r\\n        _overallParity = _overallParity == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == true && _testArray.some((truth) => truth == false)) {\\r\\n        return 0; // uhm, there's some strange going on... 2 bits are altered? How? This should not happen 👀\\r\\n    }\\r\\n    // oof.. halfway through... we fixed an possible altered bit, now \\\"extract\\\" the parity-bits from the _build\\r\\n    for (let i = _sumParity; i >= 0; i--) {\\r\\n        // start from the last parity down the 2nd index one\\r\\n        _build.splice(Math.pow(2, i), 1);\\r\\n    }\\r\\n    _build.splice(0, 1); // remove the overall parity bit and we have our binary value\\r\\n    return parseInt(_build.join(\\\"\\\"), 2); // parse the integer with redux 2 and we're done!\\r\\n}\\r\\nexport function HammingEncode(value) {\\r\\n    // encoding following Hammings rule\\r\\n    function HammingSumOfParity(_lengthOfDBits) {\\r\\n        // will calculate the needed amount of parityBits 'without' the \\\"overall\\\"-Parity (that math took me 4 Days to get it working)\\r\\n        return _lengthOfDBits < 3 || _lengthOfDBits == 0 // oh and of course using ternary operators, it's a pretty neat function\\r\\n            ? _lengthOfDBits == 0\\r\\n                ? 0\\r\\n                : _lengthOfDBits + 1\\r\\n            : // the following math will only work, if the length is greater equal 3, otherwise it's \\\"kind of\\\" broken :D\\r\\n                Math.ceil(Math.log2(_lengthOfDBits * 2)) <=\\r\\n                    Math.ceil(Math.log2(1 + _lengthOfDBits + Math.ceil(Math.log2(_lengthOfDBits))))\\r\\n                    ? Math.ceil(Math.log2(_lengthOfDBits) + 1)\\r\\n                    : Math.ceil(Math.log2(_lengthOfDBits));\\r\\n    }\\r\\n    const _data = value.toString(2).split(\\\"\\\"); // first, change into binary string, then create array with 1 bit per index\\r\\n    const _sumParity = HammingSumOfParity(_data.length); // get the sum of needed parity bits (for later use in encoding)\\r\\n    const count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\r\\n    // function count for specific entries in the array, for later use\\r\\n    const _build = [\\\"x\\\", \\\"x\\\", ..._data.splice(0, 1)]; // init the \\\"pre-build\\\"\\r\\n    for (let i = 2; i < _sumParity; i++) {\\r\\n        // add new paritybits and the corresponding data bits (pre-building array)\\r\\n        _build.push(\\\"x\\\", ..._data.splice(0, Math.pow(2, i) - 1));\\r\\n    }\\r\\n    // now the \\\"calculation\\\"... get the paritybits ('x') working\\r\\n    for (const index of _build.reduce(function (a, e, i) {\\r\\n        if (e == \\\"x\\\")\\r\\n            a.push(i);\\r\\n        return a;\\r\\n    }, [])) {\\r\\n        // that reduce will result in an array of index numbers where the \\\"x\\\" is placed\\r\\n        const _tempcount = index + 1; // set the \\\"stepsize\\\" for the parityBit\\r\\n        const _temparray = []; // temporary array to store the extracted bits\\r\\n        const _tempdata = [..._build]; // only work with a copy of the _build\\r\\n        while (_tempdata[index] !== undefined) {\\r\\n            // as long as there are bits on the starting index, do \\\"cut\\\"\\r\\n            const _temp = _tempdata.splice(index, _tempcount * 2); // cut stepsize*2 bits, then...\\r\\n            _temparray.push(..._temp.splice(0, _tempcount)); // ... cut the result again and keep the first half\\r\\n        }\\r\\n        _temparray.splice(0, 1); // remove first bit, which is the parity one\\r\\n        _build[index] = (count(_temparray, \\\"1\\\") % 2).toString(); // count with remainder of 2 and\\\"toString\\\" to store the parityBit\\r\\n    } // parity done, now the \\\"overall\\\"-parity is set\\r\\n    _build.unshift((count(_build, \\\"1\\\") % 2).toString()); // has to be done as last element\\r\\n    return _build.join(\\\"\\\"); // return the _build as string\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFcEMsOERBQThEO0FBQzlELElBQUksT0FBWSxDQUFDO0FBQ2pCLE1BQU0sVUFBVSxHQUFxRDtJQUNqRSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUM7SUFDckIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQ2YsQ0FBQztBQUVGLFNBQVMsU0FBUyxDQUFDLEVBQU0sRUFBRSxHQUFRLEVBQUUsTUFBeUI7SUFDMUQsSUFBSTtRQUNBLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU3RixJQUFJLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDZixFQUFFLENBQUMsT0FBTyxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEYsRUFBRSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ2hGO2FBQU07WUFDSCxFQUFFLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN6RTtLQUNKO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxDQUFD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QUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxRQUFRO1lBQ1IsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxPQUFPO1lBQ1AsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxPQUFPO1lBQ1AsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7U0FDSjtRQUVELFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBTSxF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\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///6e4f8f17-42f8-48ed-90b6-94cbcf3a00f3\",\"moduleSequenceNumber\":307138},{\"filename\":\"cct.js\",\"url\":\"blob:file:///bb90a010-170a-4493-815e-58094d3d3616\",\"moduleSequenceNumber\":395080}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, doProgramBuys, softenServer, stFormat } from \\\"/lib/util\\\";\\r\\nconst SPECIAL_HOSTS = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"all\\\", false],\\r\\n    [\\\"ch\\\", 5],\\r\\n    [\\\"suppress\\\", false],\\r\\n    [\\\"soften\\\", false],\\r\\n    [\\\"s\\\", false],\\r\\n    [\\\"a\\\", false],\\r\\n    [\\\"b\\\", false],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--ch\\\"].includes(lastFlag))\\r\\n        return [\\\"10\\\"];\\r\\n    return [\\\"-s\\\", \\\"-a\\\", \\\"--all\\\", \\\"--ch\\\", \\\"--suppress\\\", \\\"--soften\\\", \\\"-b\\\"];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (options.ch < 0) {\\r\\n        ns.tprintf(\\\"ERROR: check flag must be > 0\\\");\\r\\n        return;\\r\\n    }\\r\\n    options.soften = options.soften || options.s;\\r\\n    options.all = options.all || options.a;\\r\\n    if (options.b)\\r\\n        doProgramBuys(ns);\\r\\n    const hosts = allHosts(ns).sort((a, b) => ns.getServerRequiredHackingLevel(b) - ns.getServerRequiredHackingLevel(a));\\r\\n    if (options.soften) {\\r\\n        for (const hostname of hosts) {\\r\\n            softenServer(ns, hostname);\\r\\n        }\\r\\n    }\\r\\n    let hostnameMaxLen = 0;\\r\\n    hosts.map((a) => (hostnameMaxLen = Math.max(a.length, hostnameMaxLen)));\\r\\n    if (options.suppress)\\r\\n        return;\\r\\n    let serverListCount = hosts.length;\\r\\n    if (!options.all) {\\r\\n        serverListCount = Math.min(serverListCount, options.ch +\\r\\n            hosts.reduce((tally, hostname) => tally + (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? 1 : 0), 0));\\r\\n    }\\r\\n    const lookHosts = serverListCount < hosts.length ? hosts.slice(-serverListCount) : hosts;\\r\\n    for (const hostname of lookHosts) {\\r\\n        const displayHostname = SPECIAL_HOSTS.includes(hostname) ? \\\"*\\\" + hostname : hostname;\\r\\n        const root = ns.hasRootAccess(hostname);\\r\\n        const requiredSkill = ns.getServerRequiredHackingLevel(hostname);\\r\\n        const canHack = ns.getHackingLevel() >= requiredSkill;\\r\\n        const ram = ns.getServerMaxRam(hostname);\\r\\n        const time = ns.getWeakenTime(hostname);\\r\\n        ns.tprintf(`%${hostnameMaxLen}s %4d %s %s %5s %8s %6.2f/%6.2f %9s/%9s`, displayHostname, requiredSkill, root ? \\\"[R]\\\" : \\\"[ ]\\\", canHack ? \\\"[H]\\\" : \\\"[ ]\\\", ram > 0 ? ns.nFormat(ram * 1e9, \\\"0b\\\") : \\\"-----\\\", stFormat(ns, time), ns.getServerSecurityLevel(hostname), ns.getServerMinSecurityLevel(hostname), ns.nFormat(ns.getServerMoneyAvailable(hostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(hostname), \\\"$0.000a\\\"));\\r\\n    }\\r\\n    const availableRam = hosts.reduce((tally, hostname) => tally + (ns.hasRootAccess(hostname) ? ns.getServerMaxRam(hostname) : 0), 0);\\r\\n    ns.tprintf(\\\"Total RAM available: %s\\\", ns.nFormat(availableRam * 1e9, \\\"0b\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jhd2wuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmF3bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTVFLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXpGLElBQUksT0FBTyxDQUFDO0FBQ1osTUFBTSxVQUFVLEdBQXFEO0lBQ2pFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztJQUNkLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNULENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztJQUNuQixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7SUFDakIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQ2YsQ0FBQztBQUVGLGlIQUFpSDtBQUNqSCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFjO0lBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZ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\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///50eb8d5b-e7d5-433a-9b18-3ed19a1acf23\",\"moduleSequenceNumber\":64601},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///387c907f-ffbe-4b26-baf1-8513a7f2e353\",\"moduleSequenceNumber\":69570}],\"dependents\":[],\"ramUsage\":7.4,\"server\":\"home\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [[\\\"reserve\\\", Number.MAX_SAFE_INTEGER]];\\r\\nlet serverService;\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        //serverService = getServerService(ns);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(\\\"/lib/exec/const_weaken.js\\\", \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    for (const server of scriptableServers) {\\r\\n        const availableRam = server.availableRam();\\r\\n        const availableThreads = Math.floor(availableRam / ns.getScriptRam(\\\"/lib/exec/const_weaken.js\\\"));\\r\\n        if (availableThreads <= 0)\\r\\n            continue;\\r\\n        ns.exec(\\\"/lib/exec/const_weaken.js\\\", server.hostname, availableThreads, \\\"--target\\\", \\\"joesguns\\\");\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiZXhwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxJQUFJLE9BQU8sQ0FBQztBQUNaLE1BQU0sVUFBVSxHQUFxRCxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFFNUcsSUFBSSxhQUE0QixDQUFDO0FBRWpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSTtRQUNBLE9BQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9CLHVDQUF1QztRQUN2QyxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtRQUMvQyxFQUFFLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxPQUFPO0tBQ1Y7SUFFRCxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUUsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDekMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDdEU7SUFFRCxLQUFLLE1BQU0sTUFBTSxJQUFJLGlCQUFpQixFQUFFO1FBQ3BDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzQyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDO1FBRWpHLElBQUksZ0JBQWdCLElBQUksQ0FBQztZQUFFLFNBQVM7UUFFcEMsRUFBRSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztLQUNuRztBQUNMLENBQUMifQ==\",\"filename\":\"exp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///a0b05350-d0ad-4ae7-a0e9-75242123735c\",\"moduleSequenceNumber\":395090},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///80b1de34-24c4-48a3-b07b-642bc6aad917\",\"moduleSequenceNumber\":395091},{\"filename\":\"exp.js\",\"url\":\"blob:file:///9249c4d1-1075-461a-a288-e8f2bade391d\",\"moduleSequenceNumber\":396336}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HACKJS, GROWJS, WEAKENJS, llog, stFormat, CONSTSHAREJS } from \\\"/lib/util\\\";\\r\\nimport { ServerService, Server } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst BATCHSPACER = TSPACER * 4;\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SHARE_RAM = 4;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n    [\\\"goal\\\", Number.MAX_SAFE_INTEGER],\\r\\n    [\\\"rounds\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\", \\\"--goal\\\", \\\"--rounds\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    //////\\r\\n    const shortWeakenTime = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    // If we cant fit a single batch within the time limit, fail the allocation.\\r\\n    if (shortWeakenTime + BATCHSPACER > timeLimit)\\r\\n        return {\\r\\n            totalMoney: 0,\\r\\n            totalPercent: 0,\\r\\n            batchCount: 1000000,\\r\\n            hasPrimary: false,\\r\\n            batchLimit: 0,\\r\\n        };\\r\\n    const maxTimeLimitCycles = Math.floor((timeLimit - shortWeakenTime) / BATCHSPACER);\\r\\n    const maxWeakenLengthCycles = Math.floor(shortWeakenTime / BATCHSPACER);\\r\\n    const maxHackTimeCycles = Math.floor(hackTimeLong / BATCHSPACER);\\r\\n    const batchCountMax = Math.max(Math.min(maxTimeLimitCycles, maxWeakenLengthCycles, maxHackTimeCycles), 1);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"tl %d; wl %d; ht %d\\\", maxTimeLimitCycles, maxWeakenLengthCycles, maxHackTimeCycles);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    const result = {\\r\\n        totalMoney: 0,\\r\\n        totalPercent: 0,\\r\\n        batchCount: 0,\\r\\n        hasPrimary: false,\\r\\n        batchLimit: batchCountMax,\\r\\n    };\\r\\n    if (hackTimeLong < 5000)\\r\\n        return {\\r\\n            totalMoney: 0,\\r\\n            totalPercent: 0,\\r\\n            batchCount: 1000000,\\r\\n            hasPrimary: false,\\r\\n            batchLimit: 0,\\r\\n        };\\r\\n    let batchID = 0;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        // allocate primary thread\\r\\n        const bigBlock = servers\\r\\n            .map((a) => a.availableRam())\\r\\n            .filter((a) => a > 0)\\r\\n            .sort((a, b) => b - a)[0];\\r\\n        // We've run out of available ram, break out and execute reserved scripts\\r\\n        if (bigBlock === undefined || bigBlock < GROW_RAM)\\r\\n            break;\\r\\n        if (moneyDiff > 0 || securityDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            result.hasPrimary = true;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                weakenGrowThreads = threadCount;\\r\\n            }\\r\\n            else {\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            batchID++;\\r\\n            result.totalMoney += hackAmount;\\r\\n            result.totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    // fill remaining ram with share threads\\r\\n    for (const server of servers) {\\r\\n        const threads = server.threadsAvailable(SHARE_RAM);\\r\\n        if (threads <= 0)\\r\\n            continue;\\r\\n        server.reserveScript(CONSTSHAREJS, SHARE_RAM, threads, [\\\"--offset\\\", 0]);\\r\\n    }\\r\\n    result.batchCount = batchID;\\r\\n    return result;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    if (options.limit !== Number.MAX_SAFE_INTEGER)\\r\\n        options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    let targetServer;\\r\\n    let servers = [];\\r\\n    const simPlayer = ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\") ? ns.getPlayer() : undefined;\\r\\n    do {\\r\\n        await doSoften(ns);\\r\\n        servers = serverService\\r\\n            .getScriptableServers(options.reserve)\\r\\n            .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n        targetServer = await getBestTarget(ns, servers);\\r\\n        if (!targetServer)\\r\\n            return;\\r\\n        targetServer.reload();\\r\\n        const bestHackLimit = calcHackLimit(ns, targetServer, servers, [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1], options.limit, simPlayer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const totalPercent = allocateBatchResult.totalPercent;\\r\\n        const batchLimit = allocateBatchResult.batchLimit;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * BATCHSPACER;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * BATCHSPACER + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * BATCHSPACER + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * BATCHSPACER + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * BATCHSPACER + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.sprintf(\\\"%s (%s/s)\\\", ns.nFormat(totalMoney, \\\"$0.0a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.0a\\\")),\\r\\n            ns.sprintf(\\\"%d/%d/%.2f\\\", batchCount, batchLimit, bestHackLimit),\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n        // kill all launched share threads\\r\\n        for (const server of servers) {\\r\\n            const processes = ns.ps(server.hostname).filter((a) => a.filename === CONSTSHAREJS);\\r\\n            for (const process of processes) {\\r\\n                ns.kill(process.pid);\\r\\n            }\\r\\n        }\\r\\n    } while (ns.getPlayer().money < options.goal && --options.rounds > 0);\\r\\n}\\r\\nfunction getIncome(ns, targetServer, servers, timespan) {\\r\\n    const simPlayer = ns.getPlayer();\\r\\n    let timeleft = timespan;\\r\\n    let totalMoneyGained = 0;\\r\\n    while (timeleft > 0) {\\r\\n        const bestHackLimit = calcHackLimit(ns, targetServer, servers, [0.5, 0.75, 1], timeleft, simPlayer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, false, timeleft, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const usedPrimary = allocateBatchResult.hasPrimary;\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * BATCHSPACER;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        if (usedPrimary) {\\r\\n            timeleft -= cycleTime;\\r\\n            totalMoneyGained += totalMoney;\\r\\n        }\\r\\n        else {\\r\\n            const cyclesLeft = Math.ceil(timeleft / cycleTime);\\r\\n            timeleft -= cycleTime * cyclesLeft;\\r\\n            totalMoneyGained += totalMoney * cyclesLeft;\\r\\n        }\\r\\n    }\\r\\n    const totalTime = timespan - timeleft;\\r\\n    const hackChance = ns.formulas.hacking.hackChance(targetServer, simPlayer);\\r\\n    return (totalMoneyGained / (totalTime / 1000)) * hackChance; // $/s\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"soften.js\\\", \\\"home\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\nfunction calcHackLimit(ns, targetServer, servers, hackLimits, timeLimit, simPlayer) {\\r\\n    let bestHackLimit = 0;\\r\\n    let bestHackLimitValue = 0;\\r\\n    for (const hackLimit of hackLimits) {\\r\\n        const estimateServer = new Server(ns, targetServer);\\r\\n        const allocateBatchResult = allocateBatches(ns, estimateServer, servers, hackLimit, false, timeLimit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const weakenLevelCalc = estimateServer.weakenLevelForTime(batchCount * BATCHSPACER, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n        const weakenTime = estimateServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        const value = totalMoney / (cycleTime / 1000);\\r\\n        if (value > bestHackLimitValue) {\\r\\n            bestHackLimit = hackLimit;\\r\\n            bestHackLimitValue = value;\\r\\n        }\\r\\n        servers.map((a) => a.clearReservedScripts());\\r\\n    }\\r\\n    return bestHackLimit;\\r\\n}\\r\\nasync function getBestTarget(ns, servers) {\\r\\n    let targetServer;\\r\\n    if (options.target === \\\"\\\") {\\r\\n        const targets = serverService.getHackableServers(ns.getHackingLevel());\\r\\n        let targetIncomes = [];\\r\\n        for (const target of targets) {\\r\\n            targetIncomes.push([target, getIncome(ns, target, servers, options.limit)]);\\r\\n            await ns.sleep(10);\\r\\n        }\\r\\n        // the hub 29.6m/s\\r\\n        targetIncomes = targetIncomes.sort((a, b) => b[1] - a[1]);\\r\\n        // targetIncomes.forEach((a) => ns.tprintf(\\\"%20s: %s/s\\\", a[0].hostname, ns.nFormat(a[1], \\\"$0.000a\\\")));\\r\\n        targetServer = targetIncomes[0][0];\\r\\n    }\\r\\n    else {\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n        if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n            ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n    return targetServer;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUE2QixNQUFNLGtCQUFrQixDQUFDO0FBRXBGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUNwQixNQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWhDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQzdCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUNyQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQztBQUVwQixNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFdkIsU0FBUyx3QkFBd0IsQ0FBQyxJQUFxQixFQUFFLEdBQVcsRUFBRSxHQUFhO0lBQy9FLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdkQsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07UUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdEYsT0FBTztBQUNYLENBQUM7QUFTRCxTQUFTLG1CQUFtQixDQUFDLEVBQU0sRUFBRSxPQUFpQixFQUFFLE9BQWdCO0lBQ3BFLHNHQUFzRztJ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\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///99af93b5-cd64-4291-ab5d-864d5ae535a9\",\"moduleSequenceNumber\":395090},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///fd336b2d-fcab-472b-a779-4ec573771dd0\",\"moduleSequenceNumber\":395091},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fc146571-8003-4efb-bcfc-43e44beb7397\",\"moduleSequenceNumber\":395090},{\"filename\":\"hack.js\",\"url\":\"blob:file:///2d54c4a6-aed9-4bf0-8718-bf1b8200a119\",\"moduleSequenceNumber\":395125}],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"home\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, HACKJS, GROWJS, WEAKENJS, CONSTSHAREJS, CONSTWEAKENJS } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const killScriptList = [\\r\\n        HACKJS,\\r\\n        GROWJS,\\r\\n        WEAKENJS,\\r\\n        CONSTSHAREJS,\\r\\n        CONSTWEAKENJS,\\r\\n        \\\"hack.js\\\",\\r\\n        \\\"/lib/stanek/charge.js\\\",\\r\\n        \\\"/archive/hack_2.js\\\",\\r\\n        \\\"controller.js\\\"\\r\\n    ];\\r\\n    const allHostnames = allHosts(ns);\\r\\n    for (const hostname of allHostnames) {\\r\\n        const processes = ns.ps(hostname).filter((a) => killScriptList.includes(a.filename));\\r\\n        for (const process of processes) {\\r\\n            ns.kill(process.pid);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJrYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFNUYsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLGNBQWMsR0FBRztRQUNuQixNQUFNO1FBQ04sTUFBTTtRQUNOLFFBQVE7UUFDUixZQUFZO1FBQ1osYUFBYTtRQUNiLFNBQVM7UUFDVCx1QkFBdUI7UUFDdkIsb0JBQW9CO1FBQ3BCLGVBQWU7S0FDbEIsQ0FBQztJQUVGLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFlBQVksRUFBRTtRQUNqQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUVyRixLQUFLLE1BQU0sT0FBTyxJQUFJLFNBQVMsRUFBRTtZQUM3QixFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QjtLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///a39ae7f3-6d7a-41c7-bb4f-8aa7d94dbfb1\",\"moduleSequenceNumber\":114672},{\"filename\":\"ka.js\",\"url\":\"blob:file:///224b7062-e804-467e-b322-d074332fa76f\",\"moduleSequenceNumber\":142232}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const files = ns.ls(ns.getHostname());\\r\\n    const libs = files.filter((a) => a.indexOf(\\\"/lib\\\") !== -1);\\r\\n    const scripts = files.filter((a) => a.indexOf(\\\"/lib\\\") === -1 && a.indexOf(\\\".js\\\") !== -1);\\r\\n    const execs = files.filter((a) => a.indexOf(\\\".exe\\\") !== -1);\\r\\n    const others = files.filter((a) => !libs.includes(a) && !scripts.includes(a) && !execs.includes(a));\\r\\n    let maxFilenameLength = 0;\\r\\n    libs.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length - 5)));\\r\\n    scripts.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    execs.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    others.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    ns.tprintf(\\\"Scripts:\\\");\\r\\n    for (const file of scripts) {\\r\\n        const ram = ns.getScriptRam(file);\\r\\n        ns.tprintf(`  %${maxFilenameLength}s %8s`, file, ns.nFormat(ram * 1e9, \\\"0.00b\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"Library Scripts:\\\");\\r\\n    for (const file of libs) {\\r\\n        const ram = ns.getScriptRam(file);\\r\\n        const subName = file.substring(5);\\r\\n        ns.tprintf(`  %${maxFilenameLength}s %8s`, subName, ns.nFormat(ram * 1e9, \\\"0.00b\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"Executables:\\\");\\r\\n    for (const file of execs) {\\r\\n        ns.tprintf(`  %${maxFilenameLength}s`, file);\\r\\n    }\\r\\n    ns.tprintf(\\\"Other:\\\");\\r\\n    for (const file of others) {\\r\\n        ns.tprintf(`  %${maxFilenameLength}s`, file);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFFdEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBHLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvRSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZCLEtBQUssTUFBTSxJQUFJLElBQUksT0FBTyxFQUFFO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLGlCQUFpQixPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ3BGO0lBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9CLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0saUJBQWlCLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDdkY7SUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3RCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQixLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sRUFBRTtRQUN2QixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNoRDtBQUNMLENBQUMifQ==\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///19719a4b-69c3-4d6c-b6f7-b28283ab5642\",\"moduleSequenceNumber\":96705}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, HACKJS, GROWJS, WEAKENJS, softenServer, doProgramBuys, CONSTSHAREJS } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    const hosts = allHosts(ns);\\r\\n    for (const hostname of hosts) {\\r\\n        softenServer(ns, hostname);\\r\\n        if (hostname !== \\\"home\\\") {\\r\\n            for (const script of [HACKJS, GROWJS, WEAKENJS, CONSTSHAREJS])\\r\\n                await ns.scp(script, hostname);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdGVuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic29mdGVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFMUcsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTNCLEtBQUssTUFBTSxRQUFRLElBQUksS0FBSyxFQUFFO1FBQzFCLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0IsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO1lBQ3JCLEtBQUssTUFBTSxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUM7Z0JBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNqRztLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///0900456e-2a72-4d31-8a90-08bce8c3bd11\",\"moduleSequenceNumber\":395090},{\"filename\":\"soften.js\",\"url\":\"blob:file:///4e083696-82e4-4c01-ab50-7d384d20c144\",\"moduleSequenceNumber\":395126}],\"dependents\":[],\"ramUsage\":7.3,\"server\":\"home\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { mapHosts } from \\\"/lib/util\\\";\\r\\nconst SPECIAL_HOSTS = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\nexport async function main(ns) {\\r\\n    const hostPaths = mapHosts(ns);\\r\\n    for (const hostname of SPECIAL_HOSTS) {\\r\\n        const path = hostPaths[hostname];\\r\\n        if (!path)\\r\\n            continue;\\r\\n        let pathStr = \\\"\\\";\\r\\n        for (const curPath of path) {\\r\\n            if (pathStr === \\\"\\\")\\r\\n                pathStr = curPath;\\r\\n            else\\r\\n                pathStr = pathStr + \\\" -> \\\" + curPath;\\r\\n        }\\r\\n        ns.tprint(pathStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2UuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJ0cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXpGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRS9CLEtBQUssTUFBTSxRQUFRLElBQUksYUFBYSxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSTtZQUFFLFNBQVM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3hCLElBQUksT0FBTyxLQUFLLEVBQUU7Z0JBQUUsT0FBTyxHQUFHLE9BQU8sQ0FBQzs7Z0JBQ2pDLE9BQU8sR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztTQUM3QztRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdEI7QUFDTCxDQUFDIn0=\",\"filename\":\"trace.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///327a49b7-8e98-40a8-b1eb-a7a0bff74c04\",\"moduleSequenceNumber\":121807},{\"filename\":\"trace.js\",\"url\":\"blob:file:///eab06304-2750-4425-b2da-2462141ce83a\",\"moduleSequenceNumber\":121839}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"allow\\\", 1],\\r\\n    [\\\"quiet\\\", false],\\r\\n    [\\\"execute\\\", false],\\r\\n    [\\\"a\\\", 1],\\r\\n    [\\\"q\\\", false],\\r\\n    [\\\"e\\\", false]\\r\\n];\\r\\n// returns the actual number of servers to buy that would be better than the ones we already have\\r\\nfunction compareToActualServers(ns, ram, numServers) {\\r\\n    // find the number of servers we own that have ram sizes > ram\\r\\n    // ns.tprintf(\\\"comparing %s %s\\\", ram, numServers);\\r\\n    const betterServerCount = ns.getPurchasedServers().filter((x) => ns.getServerMaxRam(x) >= ram).length;\\r\\n    const freeSpots = ns.getPurchasedServerLimit() - betterServerCount;\\r\\n    return Math.min(numServers, freeSpots);\\r\\n}\\r\\nfunction getCurrentRamSize(ns) {\\r\\n    return ns.getPurchasedServers().reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0);\\r\\n}\\r\\nfunction getFinalRamSize(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        pservers.shift();\\r\\n    }\\r\\n    return pservers.reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0) + ram * numServers;\\r\\n}\\r\\nfunction buyServers(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    const deleteServers = [];\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        const pserver = pservers.shift();\\r\\n        if (pserver)\\r\\n            deleteServers.push(pserver);\\r\\n    }\\r\\n    for (const server of deleteServers) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Deleting %s with %d RAM\\\", server, ns.getServerMaxRam(server));\\r\\n        ns.killall(server);\\r\\n        ns.deleteServer(server);\\r\\n    }\\r\\n    let serverIndex = 0;\\r\\n    function getNextServerName() {\\r\\n        while (true) {\\r\\n            const serverName = \\\"pserv-\\\" + serverIndex;\\r\\n            if (!ns.getPurchasedServers().includes(serverName))\\r\\n                return serverName;\\r\\n            else\\r\\n                serverIndex++;\\r\\n        }\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n    const cost = ns.getPurchasedServerCost(ram);\\r\\n    for (let i = 0; i < numServers; i++) {\\r\\n        const serverName = getNextServerName();\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Buying %s with %d RAM for %s\\\", serverName, ram, ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n        ns.purchaseServer(serverName, ram);\\r\\n    }\\r\\n    return cost * numServers;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    options = ns.flags(argsSchema);\\r\\n    options.allow = options.allow !== 1 ? options.allow : options.a;\\r\\n    options.quiet = options.quiet || options.q;\\r\\n    options.execute = options.execute || options.e;\\r\\n    let maxPow = 8; // Minimum ram is 256\\r\\n    let sizes = [];\\r\\n    const cash = ns.getPlayer().money * options.allow;\\r\\n    if (cash < 0)\\r\\n        return;\\r\\n    const currentSize = getCurrentRamSize(ns);\\r\\n    while (true) {\\r\\n        const curRam = Math.pow(2, maxPow);\\r\\n        const cost = ns.getPurchasedServerCost(curRam);\\r\\n        if (cost <= cash) {\\r\\n            const numServers = compareToActualServers(ns, curRam, Math.min(Math.floor(cash / cost), ns.getPurchasedServerLimit()));\\r\\n            if (numServers > 0)\\r\\n                sizes.push([curRam, numServers, getFinalRamSize(ns, curRam, numServers)]);\\r\\n            maxPow++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (sizes.length === 0) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Not enough cash to buy an upgrade\\\");\\r\\n        return;\\r\\n    }\\r\\n    sizes = sizes.sort((a, b) => b[2] - a[2]);\\r\\n    const [ram, numServers, finalSize] = sizes[0];\\r\\n    for (const [ram, numServers, finalSize] of sizes) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"%s %s %s\\\", ram, numServers, finalSize);\\r\\n    }\\r\\n    if (!options.execute) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Check: Buying %d %dGB servers, increasing the size from %d to %d for %s\\\", numServers, ram, currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    buyServers(ns, ram, numServers);\\r\\n    if (!options.quiet)\\r\\n        ns.tprintf(\\\"Increased available server ram from %d to %d for %s\\\", currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3NlcnZlcl9hbGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJidXlfc2VydmVyX2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSw4REFBOEQ7QUFDOUQsSUFBSSxPQUFZLENBQUM7QUFDakIsTUFBTSxVQUFVLEdBQXFEO0lBQ2pFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNaLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztJQUNoQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7SUFDbEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ1IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQ2YsQ0FBQztBQUVGLGlHQUFpRztBQUNqRyxTQUFTLHNCQUFzQixDQUFDLEVBQU0sRUFBRSxHQUFXLEVBQUUsVUFBa0I7SUFDbkUsOERBQThEO0lBQzlELGtEQUFrRDtJQUNsRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEcsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsaUJBQWlCLENBQUM7SUFDbkUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxFQUFNO0lBQzdCLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLEVB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\",\"filename\":\"buy_server_all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_server_all.js\",\"url\":\"blob:file:///efd80401-9734-4327-8aff-d627d152de46\",\"moduleSequenceNumber\":396335}],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [[\\\"reserve\\\", Number.MAX_SAFE_INTEGER]];\\r\\nlet serverService;\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        //serverService = getServerService(ns);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(\\\"/lib/exec/const_share.js\\\", \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    for (const server of scriptableServers) {\\r\\n        const availableRam = server.availableRam();\\r\\n        const availableThreads = Math.floor(availableRam / ns.getScriptRam(\\\"/lib/exec/const_share.js\\\"));\\r\\n        if (availableThreads <= 0)\\r\\n            continue;\\r\\n        ns.exec(\\\"/lib/exec/const_share.js\\\", server.hostname, availableThreads);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsSUFBSSxPQUFPLENBQUM7QUFDWixNQUFNLFVBQVUsR0FBcUQsQ0FBQyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0FBRTVHLElBQUksYUFBNEIsQ0FBQztBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLElBQUk7UUFDQSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQix1Q0FBdUM7UUFDdkMsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3pDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixPQUFPO0tBQ1Y7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUU7UUFDL0MsRUFBRSxDQUFDLE9BQU8sQ0FBQyw0Q0FBNEMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsT0FBTztLQUNWO0lBRUQsTUFBTSxpQkFBaUIsR0FBRyxhQUFhLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTlFLEtBQUssTUFBTSxNQUFNLElBQUksaUJBQWlCLEVBQUU7UUFDcEMsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLE1BQU07WUFBRSxTQUFTO1FBQ3pDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JFO0lBRUQsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0MsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQztRQUVoRyxJQUFJLGdCQUFnQixJQUFJLENBQUM7WUFBRSxTQUFTO1FBRXBDLEVBQUUsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzFFO0FBQ0wsQ0FBQyJ9\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///ec17ad73-8b6a-493a-aad6-c073ca117140\",\"moduleSequenceNumber\":114672},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///2e0ff331-c5fc-4284-8f91-7593d1f6ebbd\",\"moduleSequenceNumber\":114673},{\"filename\":\"share.js\",\"url\":\"blob:file:///de15d1dc-8af5-4ad7-a473-4dc8dc0fa71e\",\"moduleSequenceNumber\":142661}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastEl;\\r\\nconst roots = [];\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    if (ms <= 0)\\r\\n        return \\\"--\\\";\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\nfunction insertAfter(newNode, existingNode) {\\r\\n    if (!existingNode.parentNode)\\r\\n        throw \\\"insertAfter init failed\\\";\\r\\n    if (existingNode.nextSibling)\\r\\n        return existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\\r\\n    else\\r\\n        return existingNode.parentNode.appendChild(newNode);\\r\\n}\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const newRootEl = hookRootEl?.cloneNode(true);\\r\\n    if (!hookRootEl || !newRootEl)\\r\\n        throw \\\"addBottomLine init failed\\\";\\r\\n    const child1 = newRootEl?.children[0]?.children[0];\\r\\n    if (child1) {\\r\\n        child1.innerText = \\\"\\\";\\r\\n    }\\r\\n    const child2 = newRootEl?.children[0]?.children[0];\\r\\n    if (child2) {\\r\\n        child2.innerText = \\\"\\\";\\r\\n        child2.removeAttribute(\\\"id\\\");\\r\\n    }\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addBottomLine init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newRootEl;\\r\\n}\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl = newRootEl?.children[0]?.firstChild;\\r\\n    if (!hookRootEl || !newRootEl || !newEl)\\r\\n        throw \\\"addSingle init failed\\\";\\r\\n    if (newRootEl?.childNodes[1])\\r\\n        newRootEl.removeChild(newRootEl.childNodes[1]);\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addSingle init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newEl;\\r\\n}\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl1 = newRootEl?.children[0]?.children[0];\\r\\n    const newEl2 = newRootEl?.children[1]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!hookRootEl || !newRootEl || !newEl1 || !newEl2)\\r\\n        throw \\\"addDouble init failed\\\";\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addDouble init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackProgressEl = overviewEl?.children[3];\\r\\n    const newRootEl = hackProgressEl?.cloneNode(true);\\r\\n    const newSub1 = newRootEl?.children[0]?.children[0];\\r\\n    const newSub2 = newRootEl?.children[0]?.children[0]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!newRootEl || !newSub1 || !newSub2)\\r\\n        throw \\\"addProgress init failed\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = newRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addProgress init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) {\\r\\n            root.parentNode?.removeChild(root);\\r\\n        }\\r\\n    });\\r\\n    try {\\r\\n        const [clockEl, karmaEl] = addDouble();\\r\\n        const targetEl = addSingle();\\r\\n        const incomeEl = addSingle();\\r\\n        const [stateEl, countdownEl] = addDouble();\\r\\n        const [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n        addBottomLine();\\r\\n        karmaEl.classList.toggle(\\\"makeStyles-hack-17\\\", false);\\r\\n        karmaEl.classList.add(\\\"makeStyles-hp-15\\\");\\r\\n        const port1 = ns.getPortHandle(1);\\r\\n        let startTime = 0;\\r\\n        let endTime = 1000;\\r\\n        let fullTime = 1000;\\r\\n        while (true) {\\r\\n            if (!port1.empty()) {\\r\\n                const data = JSON.parse(port1.peek().toString());\\r\\n                startTime = new Date(data[0]).getTime();\\r\\n                endTime = new Date(startTime + data[1]).getTime();\\r\\n                fullTime = endTime - startTime;\\r\\n                const date = new Date();\\r\\n                const curTime = date.getTime();\\r\\n                // Update Clock\\r\\n                // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n                // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                // Update Karma\\r\\n                karmaEl.innerText = `k: ${ns.heart.break().toFixed(0)}`;\\r\\n                // Update Target & Income\\r\\n                targetEl.innerText = data[2];\\r\\n                incomeEl.innerText = data[3];\\r\\n                // Update State & Countdown\\r\\n                stateEl.innerText = data[4];\\r\\n                countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n                // Update Progress\\r\\n                const tvalue = curTime - startTime;\\r\\n                const nvalue = (tvalue / fullTime) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (startTime === 0 || wholeValue > 100) {\\r\\n                    port1.clear();\\r\\n                    transform = 100;\\r\\n                    wholeValue = 0;\\r\\n                }\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                const date = new Date();\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                karmaEl.innerText = ns.heart.break().toFixed(0).toString();\\r\\n                targetEl.innerText = \\\"NO TARGET\\\";\\r\\n                incomeEl.innerText = \\\"\\\";\\r\\n                stateEl.innerText = \\\"\\\";\\r\\n                countdownEl.innerText = \\\"\\\";\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjbG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxJQUFJLE1BQW1CLENBQUM7QUFDeEIsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztBQUVoQyxTQUFTLFFBQVEsQ0FBQyxFQUFNLEVBQUUsRUFBVSxFQUFFLE1BQU0sR0FBRyxJQUFJLEVBQUUsUUFBUSxHQUFHLEtBQUs7SUFDcEUsSUFBSSxFQUFFLElBQUksQ0FBQztRQUNWLE9BQU8sSUFBSSxDQUFBO0lBRVQsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUMzQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUM7SUFFOUIsSUFBSSxNQUFNLEVBQUU7UUFDUixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMxRyxJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3BGLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0tBQ3hEO1NBQU07UUFDSCxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RixJQUFJLE9BQU8sR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNyQztBQUNMLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxPQUFvQixFQUFFLFlBQXlCO0lBQ2hFLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVTtRQUFFLE1BQU0seUJBQXlCLENBQUM7SUFDOUQsSUFBSSxZQUFZLENBQUMsV0FBVztRQUFFLE9BQU8sWUFBWSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQzs7UUFDeEcsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBRUQsU0FBUyxhQUFhO0lBQ2xCLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzNELE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDO0lBRXZELE1BQU0sU0FBUyxHQUFnQixVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNELElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSwyQkFBMkIsQ0FBQztJQUVqRSxNQUFNLE1BQU0sR0FBZ0IsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsSUFBSSxNQUFNLEVBQUU7UUFDUixNQUFNLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztLQUN6QjtJQUVELE1BQU0sTUFBTSxHQUFnQixTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxJQUFJLE1BQU0sRUFBRTtRQUNSLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDaEM7SUFFRCxJQUFJLE1BQU0sS0FBSyxTQUFTO1FBQUUsTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUU5QyxJQUFJO1FBQ0EsTUFBTSxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDM0M7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLE1BQU0sR0FBRyxDQUFDLDZCQUE2QixDQUFDO0tBQzNDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV0QixPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQsU0FBUyxTQUFTO0lBQ2QsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QixNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUUsY0FBYyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDM0QsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUM7SUFDdkQsTUFBTSxVQUFVLEdBQUcsVUFBVSxFQUFFLGFBQWEsQ0FBQztJQUM3QyxNQUFNLFVBQVUsR0FBRyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sU0FBUyxHQUFnQixVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNELE1BQU0sS0FBSyxHQUFnQixTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQztJQUU5RCxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsS0FBSztRQUFFLE1BQU0sdUJBQXVCLENBQUM7SUFFdkUsSUFBSSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTdFLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFckIsSUFBSSxNQUFNLEtBQUssU0FBUztRQUFFLE1BQU0sR0FBRyxVQUFVLENBQUM7SUFFOUMsSUFBSTtRQUNBLE1BQU0sR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzNDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixNQUFNLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQztLQUN2QztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdEIsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsU0FBUztJQUNkLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzFELE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDO0lBQ3ZELE1BQU0sVUFBVSxHQUFHLFVBQVUsRUFBRSxhQUFhLENBQUM7SUFDN0MsTUFBTSxVQUFVLEdBQUcsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzQyxNQUFNLFNBQVMsR0FBZ0IsVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRCxNQUFNLE1BQU0sR0FBZ0IsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsTUFBTSxNQUFNLEdBQWdCLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWhFLDJCQUEyQjtJQUMzQixJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTTtRQUFFLE1BQU0sdUJBQXVCLENBQUM7SUFFbkYsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixNQUFNLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUV0QixNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBRXRCLElBQUksTUFBTSxLQUFLLFNBQVM7UUFBRSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTlDLElBQUk7UUFDQSxNQUFNLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMzQztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsTUFBTSxHQUFHLENBQUMseUJBQXlCLENBQUM7S0FDdkM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXRCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELFNBQVMsV0FBVztJQUNoQixNQUFNLElBQUksR0FBRyxVQUFVLENBQUM7SUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUUxRCxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQztJQUN2RCxNQUFNLFVBQVUsR0FBRyxVQUFVLEVBQUUsYUFBYSxDQUFDO0lBRTdDLE1BQU0sY0FBYyxHQUFnQixVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVELE1BQU0sU0FBUyxHQUFnQixjQUFjLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRS9ELE1BQU0sT0FBTyxHQUFnQixTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxNQUFNLE9BQU8sR0FBZ0IsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlFLDJCQUEyQjtJQUMzQixJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTztRQUFFLE1BQU0seUJBQXlCLENBQUM7SUFFeEUsSUFBSSxNQUFNLEtBQUssU0FBUztRQUFFLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFFN0MsSUFBSTtRQUNBLE1BQU0sR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzNDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixNQUFNLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQztLQUN6QztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdEIsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtRQUNYLEVBQUUsQ0FBQyxNQUFNLENBQUMsOEVBQThFLENBQUMsQ0FBQztRQUMxRixFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU87S0FDVjtJQUVELEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDTixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtZQUN0QixJQUFJLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0QztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSTtRQUNBLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDdkMsTUFBTSxRQUFRLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDN0IsTUFBTSxRQUFRLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDN0IsTUFBTSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUMzQyxNQUFNLENBQUMsZUFBZSxFQUFFLGVBQWUsQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDO1FBRXpELGFBQWEsRUFBRSxDQUFDO1FBRWhCLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RELE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFMUMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztRQUNwQixPQUFPLElBQUksRUFBRTtZQUNULElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ2pELFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDeEMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDbEQsUUFBUSxHQUFHLE9BQU8sR0FBRyxTQUFTLENBQUM7Z0JBRS9CLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7Z0JBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFFL0IsZUFBZTtnQkFDZiwwREFBMEQ7Z0JBQzFELG1FQUFtRTtnQkFDbkUsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBRXJELGVBQWU7Z0JBQ2YsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBRXhELHlCQUF5QjtnQkFDekIsUUFBUSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLFFBQVEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUU3QiwyQkFBMkI7Z0JBQzNCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixXQUFXLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxHQUFHLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFFL0Qsa0JBQWtCO2dCQUNsQixNQUFNLE1BQU0sR0FBRyxPQUFPLEdBQUcsU0FBUyxDQUFDO2dCQUNuQyxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3pDLElBQUksU0FBUyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7Z0JBQzdCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRXBDLElBQUksU0FBUyxLQUFLLENBQUMsSUFBSSxVQUFVLEdBQUcsR0FBRyxFQUFFO29CQUNyQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2QsU0FBUyxHQUFHLEdBQUcsQ0FBQztvQkFDaEIsVUFBVSxHQUFHLENBQUMsQ0FBQztpQkFDbEI7Z0JBRUQsZUFBZSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsR0FBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRCxlQUFlLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM5RjtpQkFBTTtnQkFDSCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO2dCQUN4QixPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDckQsT0FBTyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFFM0QsUUFBUSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUM7Z0JBQ2pDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dCQUN4QixPQUFPLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztnQkFDdkIsV0FBVyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7Z0JBQzNCLGVBQWUsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNuRCxlQUFlLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO2FBQzFFO1lBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hCO0tBQ0o7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzlCO0FBQ0wsQ0FBQyJ9\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///3ce90c47-6ff7-4445-925d-d0312a1e6814\",\"moduleSequenceNumber\":395124}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    function favorToRep(f) {\\r\\n        const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log(r / 25000 + 1) / Math.log(1.02);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    for (const faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(ns.getFavorToDonate());\\r\\n        const currentRep = ns.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n        const fTotal = repToFavor(currentRep + storedRep);\\r\\n        const fGain = fTotal - favor;\\r\\n        if (favor > 150)\\r\\n            continue;\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 150) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJmYXZvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMzQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sVUFBVSxHQUNaLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1lBQ3pCLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDakQsTUFBTSxRQUFRLEdBQUcsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUV4QyxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFN0IsSUFBSSxLQUFLLEdBQUcsR0FBRztZQUFFLFNBQVM7UUFFMUIsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLEVBQUU7WUFDckIsVUFBVSxHQUFHLFlBQVksQ0FBQztTQUM3QjtRQUVELElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQztRQUNsQixJQUFJLFFBQVEsR0FBRyxTQUFTLEVBQUU7WUFDdEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDdkY7UUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLDhCQUE4QixFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ3pHO0FBQ0wsQ0FBQyJ9\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///5abd1cb3-4e0b-4d00-8605-9c926a8f2364\",\"moduleSequenceNumber\":73163}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Augmentation } from \\\"/lib/augmentation/augmentation\\\";\\r\\nimport { allHosts, CONSTWEAKENJS, doBuyAndSoftenAll, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService } from \\\"/services/server\\\";\\r\\nvar ControllerState;\\r\\n(function (ControllerState) {\\r\\n    ControllerState[ControllerState[\\\"init\\\"] = 0] = \\\"init\\\";\\r\\n    ControllerState[ControllerState[\\\"hack\\\"] = 1] = \\\"hack\\\";\\r\\n    ControllerState[ControllerState[\\\"join\\\"] = 2] = \\\"join\\\";\\r\\n    ControllerState[ControllerState[\\\"buying\\\"] = 3] = \\\"buying\\\";\\r\\n})(ControllerState || (ControllerState = {}));\\r\\nconst CS = ControllerState;\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nfunction favorToRep(f) {\\r\\n    const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n    return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    //ns.tail();\\r\\n    const serverService = new ServerService(ns);\\r\\n    if (ns.getRunningScript(\\\"clock.js\\\", \\\"home\\\") === null)\\r\\n        ns.exec(\\\"clock.js\\\", \\\"home\\\");\\r\\n    let state = CS.init;\\r\\n    let waitPID = 0;\\r\\n    let doExp = true;\\r\\n    let doServerBuys = true;\\r\\n    while (true) {\\r\\n        // check waitPID for a state switch;\\r\\n        if (ns.getRunningScript(waitPID) === null) {\\r\\n            waitPID = 0;\\r\\n            switch (state) {\\r\\n                case CS.init:\\r\\n                    state = CS.hack;\\r\\n                    break;\\r\\n                case CS.hack:\\r\\n                    state = CS.join;\\r\\n                    break;\\r\\n                case CS.join:\\r\\n                    state = CS.buying;\\r\\n                    break;\\r\\n                case CS.buying:\\r\\n                    state = CS.hack;\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (waitPID === 0) {\\r\\n            switch (state) {\\r\\n                case CS.hack:\\r\\n                    waitPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n                    break;\\r\\n                case CS.join:\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const hackPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n        while (ns.getRunningScript(hackPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        if (ns.getPlayer().money > 100000000) {\\r\\n            const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1, \\\"-c\\\");\\r\\n            while (ns.getRunningScript(joinPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        // check to see what faction should be targeted\\r\\n        // 1) tian di hui 6.25k - Social Negotiation Assistant (S.N.A)\\r\\n        // 2) cybersec to 10k - Cranial Signal Processors - Gen I\\r\\n        // 3) Nitesec 45k - CRTX42-AA Gene Modification\\r\\n        // 4) The Black Hand 100k\\r\\n        // 5) Bitrunners 65k\\r\\n        // 6) Bitrunners 385k\\r\\n        // 7) Bitrunners Bribe\\r\\n        // 8) Daedalus 65k\\r\\n        // 9) Daedalus 385k\\r\\n        // 10) Daedalus Bribe\\r\\n        // 11) World Daemon\\r\\n        const augTargets = [\\r\\n            {\\r\\n                faction: \\\"Tian Di Hui\\\",\\r\\n                aug: \\\"Social Negotiation Assistant (S.N.A)\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"CyberSec\\\",\\r\\n                aug: \\\"Cranial Signal Processors - Gen I\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"NiteSec\\\",\\r\\n                aug: \\\"CRTX42-AA Gene Modification\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"The Black Hand\\\",\\r\\n                aug: \\\"The Black Hand\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Chongqing\\\",\\r\\n                aug: \\\"Neuregen Gene Modification\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"BitRunners\\\",\\r\\n                aug: \\\"Embedded Netburner Module Core V2 Upgrade\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Daedalus\\\",\\r\\n                aug: \\\"The Red Pill\\\"\\r\\n            },\\r\\n        ];\\r\\n        let doInstall = false;\\r\\n        let allInstalled = true;\\r\\n        for (const augTarget of augTargets) {\\r\\n            const targetAug = new Augmentation(ns, augTarget.aug, augTarget.faction);\\r\\n            const augs = ns\\r\\n                .getAugmentationsFromFaction(augTarget.faction)\\r\\n                .map((name) => {\\r\\n                return new Augmentation(ns, name, augTarget.faction);\\r\\n            })\\r\\n                .filter((a) => a.rep <= targetAug.rep && !a.owned && !a.installed)\\r\\n                .sort((a, b) => a.rep - b.rep);\\r\\n            let goalCost = 0;\\r\\n            let multpow = 0;\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            for (const aug of augs) {\\r\\n                goalCost += aug.price * Math.pow(multmult, multpow);\\r\\n                multpow++;\\r\\n            }\\r\\n            if (!targetAug.owned) {\\r\\n                let overrideDoInstall = false;\\r\\n                allInstalled = false;\\r\\n                if (ns.checkFactionInvitations().includes(augTarget.faction))\\r\\n                    ns.joinFaction(augTarget.faction);\\r\\n                ns.workForFaction(augTarget.faction, \\\"Hacking Contracts\\\", true);\\r\\n                if (targetAug.purchaseable)\\r\\n                    doInstall = true;\\r\\n                if (targetAug.rep > favorToRep(ns.getFavorToDonate())) {\\r\\n                    const favor = ns.getFactionFavor(augTarget.faction);\\r\\n                    const targetRep = favorToRep(ns.getFavorToDonate());\\r\\n                    const currentRep = ns.getFactionRep(augTarget.faction) +\\r\\n                        (ns.getPlayer().currentWorkFactionName === augTarget.faction\\r\\n                            ? ns.getPlayer().workRepGained\\r\\n                            : 0);\\r\\n                    const storedRep = Math.max(0, favorToRep(favor));\\r\\n                    const targetRep15Percent = targetRep * 0.15;\\r\\n                    const totalRep = currentRep + storedRep;\\r\\n                    // first pass\\r\\n                    if (totalRep < targetRep15Percent && favor < 25) {\\r\\n                        const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                        const msToRep = (targetRep15Percent - totalRep) / repGainPerMS;\\r\\n                        ns.tprintf(\\\"Time For %s %d => %d: %s\\\", augTarget.faction, totalRep, targetRep15Percent, stFormat(ns, msToRep));\\r\\n                    }\\r\\n                    if (totalRep >= targetRep15Percent && favor < 25) {\\r\\n                        overrideDoInstall = true;\\r\\n                        doInstall = true;\\r\\n                    }\\r\\n                    // second pass\\r\\n                    if (totalRep < targetRep && favor < ns.getFavorToDonate()) {\\r\\n                        const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                        const msToRep = (targetRep - totalRep) / repGainPerMS;\\r\\n                        ns.tprintf(\\\"Time For %s %d => %d: %s\\\", augTarget.faction, totalRep, targetRep, stFormat(ns, msToRep));\\r\\n                    }\\r\\n                    if (totalRep > targetRep && favor < ns.getFavorToDonate()) {\\r\\n                        overrideDoInstall = true;\\r\\n                        doInstall = true;\\r\\n                    }\\r\\n                    // third pass\\r\\n                    if (favor > ns.getFavorToDonate() && currentRep < targetAug.rep) {\\r\\n                        const donateAmt = 1e6 * ((targetAug.rep - currentRep) / ns.getPlayer().faction_rep_mult);\\r\\n                        if (donateAmt < ns.getPlayer().money) {\\r\\n                            ns.donateToFaction(augTarget.faction, donateAmt);\\r\\n                            doInstall = true;\\r\\n                        }\\r\\n                        else {\\r\\n                            goalCost += donateAmt;\\r\\n                        }\\r\\n                    }\\r\\n                    if (ns.getPlayer().money < goalCost && !overrideDoInstall) {\\r\\n                        ns.tprintf(\\\"Controller: Target Cash %s\\\", ns.nFormat(goalCost, \\\"$0.000a\\\"));\\r\\n                        if (doInstall)\\r\\n                            doServerBuys = false;\\r\\n                        doInstall = false;\\r\\n                    }\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (doInstall) {\\r\\n            ns.stopAction();\\r\\n            const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, \\\"-g\\\");\\r\\n            while (ns.getRunningScript(mcpPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(joinPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(cctPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n        }\\r\\n        if (allInstalled) {\\r\\n            // if we have the red pill and we can hack the world daemon, ascend\\r\\n            if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\"))\\r\\n                ns.exec(\\\"ascend.js\\\", \\\"home\\\", 1);\\r\\n            // level up until we can hack the world daemon\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            let ngPrice = ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\");\\r\\n            let ngRepReq = ns.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n            let total = 0;\\r\\n            for (let i = 0; i < 10; i++) {\\r\\n                total += ngPrice;\\r\\n                ngPrice = ngPrice * 1.14 * multmult;\\r\\n                ngRepReq *= 1.14;\\r\\n            }\\r\\n            const donateAmt = 1e6 * (ngRepReq / ns.getPlayer().faction_rep_mult);\\r\\n            if (donateAmt + total <= ns.getPlayer().money) {\\r\\n                ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n            }\\r\\n        }\\r\\n        const servers = serverService.getScriptableServers(HOME_RESERVE_RAM);\\r\\n        const availableRamBefore = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        doBuyAndSoftenAll(ns);\\r\\n        if (ns.getPlayer().money * 0.25 > ns.getUpgradeHomeRamCost())\\r\\n            ns.upgradeHomeRam();\\r\\n        if (ns.getPlayer().money < 1000000000 && doServerBuys) {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.5, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        else {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.25, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        const availableRamAfter = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        if (availableRamBefore < availableRamAfter || doExp) {\\r\\n            doExp = false;\\r\\n            ns.exec(\\\"exp.js\\\", \\\"home\\\", 1, \\\"--reserve\\\", HOME_RESERVE_RAM);\\r\\n            await ns.sleep(60 * 1000);\\r\\n            // kill all weaken scripts\\r\\n            const allHostnames = allHosts(ns);\\r\\n            for (const hostname of allHostnames) {\\r\\n                const processes = ns.ps(hostname).filter((a) => a.filename === CONSTWEAKENJS);\\r\\n                for (const process of processes) {\\r\\n                    ns.kill(process.pid);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWNwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibWNwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELElBQUssZUFLSjtBQUxELFdBQUssZUFBZTtJQUNoQixxREFBSSxDQUFBO0lBQ0oscURBQUksQ0FBQTtJQUNKLHFEQUFJLENBQUE7SUFDSix5REFBTSxDQUFBO0FBQ1YsQ0FBQyxFQUxJLGVBQWUsS0FBZixlQUFlLFFBS25CO0FBRUQsTUFBTSxFQUFFLEdBQUcsZUFBZSxDQUFDO0FBRTNCLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBRTdCLFNBQVMsVUFBVSxDQUFDLENBQVM7SUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7QUFDM0UsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLFlBQVk7SUFDWixNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU1QyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxV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\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///d597a4a5-6960-42d8-81cb-42132d4ffd4f\",\"moduleSequenceNumber\":91410},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///894fdc88-a0ce-42f9-a1bd-5e2108b95bd0\",\"moduleSequenceNumber\":91411},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///726f0342-d86b-4bda-99e8-5602d5d1651e\",\"moduleSequenceNumber\":91410},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///2a5f07a5-e04d-413e-a19c-3071a75ac86b\",\"moduleSequenceNumber\":91410},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///9466e2e5-5732-43b6-84c6-18b19d96cd3b\",\"moduleSequenceNumber\":91425},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///5ee6b0d2-c5e6-416b-b792-d6a4f3394d5e\",\"moduleSequenceNumber\":96272}],\"dependents\":[],\"ramUsage\":66,\"server\":\"home\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\n// AUG NOTES:\\r\\n// CyberSec - Cranial Signal Processors - $70m [10k]\\r\\n// NiteSec - CRTX42-AA Gene Modification - $225m [45k]\\r\\n// The Black Hand - The Black Hand - $550m [100k]\\r\\nexport class Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    printAugStats(ns) {\\r\\n        for (const [key, val] of Object.entries(this.stats)) {\\r\\n            ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n        }\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful(all = false) {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        if (all)\\r\\n            return true;\\r\\n        // if (this.stats.crime_money_mult) return true;\\r\\n        // if (this.stats.crime_success_mult) return true;                    \\r\\n        if (this.stats.company_rep_mult)\\r\\n            return true;\\r\\n        if (this.stats.faction_rep_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_money_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_money_mult) return true;\\r\\n        // if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2F1Z21lbnRhdGlvbi9hdWdtZW50YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVwQyxhQUFhO0FBQ2Isb0RBQW9EO0FBQ3BELHNEQUFzRDtBQUN0RCxpREFBaUQ7QUFFakQsTUFBTSxPQUFPLFlBQVk7SUFDckIsSUFBSSxDQUFTO0lBQ2IsT0FBTyxDQUFTO0lBQ2hCLEtBQUssQ0FBUztJQUNkLEdBQUcsQ0FBUztJQUNaLEtBQUssQ0FBb0I7SUFDekIsS0FBSyxDQUFVO0lBQ2YsU0FBUyxDQUFVO0lBQ25CLFlBQVksQ0FBVTtJQUN0QixHQUFHLENBQVM7SUFDWixHQUFHLENBQVM7SUFFWixZQUFZLEVBQU0sRUFBRSxJQUFZLEVBQUUsT0FBZTtRQUM3QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQ1osQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEYsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFD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\",\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.1,\"server\":\"home\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\n// AUG NOTES:\\r\\n// CyberSec - Cranial Signal Processors - $70m [10k]\\r\\n// NiteSec - CRTX42-AA Gene Modification - $225m [45k]\\r\\n// The Black Hand - The Black Hand - $550m [100k]\\r\\nexport class Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    printAugStats(ns) {\\r\\n        for (const [key, val] of Object.entries(this.stats)) {\\r\\n            ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n        }\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful() {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        return true;\\r\\n        // if (this.stats.crime_money_mult) return true;\\r\\n        // if (this.stats.crime_success_mult) return true;                    \\r\\n        // if (this.stats.company_rep_mult) return true;\\r\\n        // if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_money_mult) return true;\\r\\n        // if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXVnbWVudGF0aW9uL2F1Z21lbnRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDLGFBQWE7QUFDYixvREFBb0Q7QUFDcEQsc0RBQXNEO0FBQ3RELGlEQUFpRDtBQUVqRCxNQUFNLE9BQU8sWUFBWTtJQUNyQixJQUFJLENBQVM7SUFDYixPQUFPLENBQVM7SUFDaEIsS0FBSyxDQUFTO0lBQ2QsR0FBRyxDQUFTO0lBQ1osS0FBSyxDQUFvQjtJQUN6QixLQUFLLENBQVU7SUFDZixTQUFTLENBQVU7SUFDbkIsWUFBWSxDQUFVO0lBQ3RCLEdBQUcsQ0FBUztJQUNaLEdBQUcsQ0FBUztJQUVaLFlBQVksRUFBTSxFQUFFLElBQVksRUFBRSxPQUFlO1FBQzdDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNqRCxNQUFNLFVBQVUsR0FDWixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RixFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsR0FB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\",\"filename\":\"/augmentation/augmentation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.1,\"server\":\"home\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { canBackdoor, doBackdoor } from \\\"lib/util\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nconst findProp = function (propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n};\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet playerProp;\\r\\nfunction refreshInvitations() {\\r\\n    const factions = playerProp.checkForFactionInvitations();\\r\\n    for (const faction of factions) {\\r\\n        if (!faction.alreadyInvited) {\\r\\n            playerProp.receiveInvite(faction.name);\\r\\n            faction.alreadyInvited = true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"c\\\", false],\\r\\n    [\\\"t\\\", \\\"\\\"],\\r\\n    [\\\"target\\\", \\\"\\\"],\\r\\n];\\r\\nclass Faction {\\r\\n    name;\\r\\n    invited;\\r\\n    joined;\\r\\n    requirements;\\r\\n    constructor(ns, name, requirements) {\\r\\n        this.name = name;\\r\\n        this.invited = ns.checkFactionInvitations().includes(this.name);\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        this.requirements = requirements;\\r\\n    }\\r\\n    async getInvite(ns) {\\r\\n        refreshInvitations();\\r\\n        this.invited = ns.checkFactionInvitations().includes(this.name);\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        if (this.invited || this.joined)\\r\\n            return true;\\r\\n        if (!this.checkRequirements(ns))\\r\\n            return false;\\r\\n        // location check\\r\\n        if (this.requirements.locations) {\\r\\n            if (Array.isArray(this.requirements.locations)) {\\r\\n                if (!this.requirements.locations.includes(ns.getPlayer().location)) {\\r\\n                    ns.travelToCity(this.requirements.locations[0]);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                if (this.requirements.locations !== ns.getPlayer().location) {\\r\\n                    ns.travelToCity(this.requirements.locations);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // do backdoor\\r\\n        if (this.requirements.backdoor)\\r\\n            await doBackdoor(ns, this.requirements.backdoor);\\r\\n        refreshInvitations();\\r\\n        this.invited = ns.checkFactionInvitations().includes(this.name);\\r\\n        return this.invited;\\r\\n    }\\r\\n    async join(ns) {\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        if (this.joined)\\r\\n            return true;\\r\\n        if (!(await this.getInvite(ns)))\\r\\n            return false;\\r\\n        return ns.joinFaction(this.name);\\r\\n    }\\r\\n    checkRequirements(ns, enforceLocation = false) {\\r\\n        let passed = true;\\r\\n        // location check\\r\\n        if (enforceLocation && this.requirements.locations) {\\r\\n            if (Array.isArray(this.requirements.locations)) {\\r\\n                passed &&= this.requirements.locations.includes(ns.getPlayer().location);\\r\\n            }\\r\\n            else {\\r\\n                passed &&= this.requirements.locations === ns.getPlayer().location;\\r\\n            }\\r\\n        }\\r\\n        if (this.requirements.daedalus && this.requirements.money && this.requirements.hacking) {\\r\\n            passed &&=\\r\\n                ns.getPlayer().money >= this.requirements.money || ns.getPlayer().hacking >= this.requirements.hacking;\\r\\n        }\\r\\n        else {\\r\\n            // money check\\r\\n            if (this.requirements.money) {\\r\\n                passed &&= ns.getPlayer().money >= this.requirements.money;\\r\\n            }\\r\\n            // hacking check\\r\\n            if (this.requirements.hacking) {\\r\\n                passed &&= ns.getPlayer().hacking >= this.requirements.hacking;\\r\\n            }\\r\\n        }\\r\\n        // karma check\\r\\n        if (this.requirements.karma) {\\r\\n            passed &&= ns.heart.break() <= this.requirements.karma;\\r\\n        }\\r\\n        // combat check\\r\\n        if (this.requirements.combat) {\\r\\n            passed &&= ns.getPlayer().strength >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().defense >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().dexterity >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().agility >= this.requirements.combat;\\r\\n        }\\r\\n        // murder check\\r\\n        if (this.requirements.murder) {\\r\\n            passed &&= ns.getPlayer().numPeopleKilled >= this.requirements.murder;\\r\\n        }\\r\\n        // law check\\r\\n        if (this.requirements.law) {\\r\\n            //\\r\\n        }\\r\\n        // augmentations check\\r\\n        if (this.requirements.augmentations) {\\r\\n            passed &&= ns.getOwnedAugmentations().length >= this.requirements.augmentations;\\r\\n        }\\r\\n        // corporation check\\r\\n        if (this.requirements.corp && this.requirements.corporationRep) {\\r\\n            passed &&= ns.getCompanyRep(this.requirements.corp) >= this.requirements.corporationRep;\\r\\n        }\\r\\n        // businessLeader check\\r\\n        if (this.requirements.businessLeader) {\\r\\n            //\\r\\n        }\\r\\n        // hacknet check\\r\\n        if (this.requirements.hnServer) {\\r\\n            passed = false;\\r\\n        }\\r\\n        // backdoor check\\r\\n        if (this.requirements.backdoor) {\\r\\n            passed &&= canBackdoor(ns, this.requirements.backdoor);\\r\\n        }\\r\\n        return passed;\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    options.target = options.target !== \\\"\\\" ? options.target : options.t;\\r\\n    playerProp = findProp(\\\"player\\\");\\r\\n    if (!playerProp)\\r\\n        return;\\r\\n    // faction checklist so we dont try to get invites for factions we are already invited to / joined\\r\\n    const factions = {\\r\\n        CyberSec: new Faction(ns, \\\"CyberSec\\\", {\\r\\n            backdoor: \\\"CSEC\\\",\\r\\n        }),\\r\\n        NiteSec: new Faction(ns, \\\"NiteSec\\\", {\\r\\n            backdoor: \\\"avmnite-02h\\\",\\r\\n        }),\\r\\n        \\\"The Black Hand\\\": new Faction(ns, \\\"The Black Hand\\\", {\\r\\n            backdoor: \\\"I.I.I.I\\\",\\r\\n        }),\\r\\n        BitRunners: new Faction(ns, \\\"BitRunners\\\", {\\r\\n            backdoor: \\\"run4theh111z\\\",\\r\\n        }),\\r\\n        \\\"Tian Di Hui\\\": new Faction(ns, \\\"Tian Di Hui\\\", {\\r\\n            money: 1e6,\\r\\n            hacking: 50,\\r\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\r\\n        }),\\r\\n        Netburners: new Faction(ns, \\\"Netburners\\\", {\\r\\n            hacking: 80,\\r\\n            hnServer: true,\\r\\n        }),\\r\\n        \\\"Sector-12\\\": new Faction(ns, \\\"Sector-12\\\", {\\r\\n            money: 15e6,\\r\\n            locations: \\\"Sector-12\\\",\\r\\n        }),\\r\\n        Chongqing: new Faction(ns, \\\"Chongqing\\\", {\\r\\n            money: 20e6,\\r\\n            locations: \\\"Chongqing\\\",\\r\\n        }),\\r\\n        \\\"New Tokyo\\\": new Faction(ns, \\\"New Tokyo\\\", {\\r\\n            money: 20e6,\\r\\n            locations: \\\"New Tokyo\\\",\\r\\n        }),\\r\\n        Ishima: new Faction(ns, \\\"Ishima\\\", {\\r\\n            money: 30e6,\\r\\n            locations: \\\"Ishima\\\",\\r\\n        }),\\r\\n        Aevum: new Faction(ns, \\\"Aevum\\\", {\\r\\n            money: 40e6,\\r\\n            locations: \\\"Aevum\\\",\\r\\n        }),\\r\\n        Volhaven: new Faction(ns, \\\"Volhaven\\\", {\\r\\n            money: 50e6,\\r\\n            locations: \\\"Volhaven\\\",\\r\\n        }),\\r\\n        ECorp: new Faction(ns, \\\"ECorp\\\", {\\r\\n            corp: \\\"ECorp\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        MegaCorp: new Faction(ns, \\\"MegaCorp\\\", {\\r\\n            corp: \\\"MegaCorp\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"KuaiGong International\\\": new Faction(ns, \\\"KuaiGong International\\\", {\\r\\n            corp: \\\"KuaiGong International\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Four Sigma\\\": new Faction(ns, \\\"Four Sigma\\\", {\\r\\n            corp: \\\"Four Sigma\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        NWO: new Faction(ns, \\\"NWO\\\", {\\r\\n            corp: \\\"NWO\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Blade Industries\\\": new Faction(ns, \\\"Blade Industries\\\", {\\r\\n            corp: \\\"Blade Industries\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"OmniTek Incorporated\\\": new Faction(ns, \\\"OmniTek Incorporated\\\", {\\r\\n            corp: \\\"OmniTek Incorporated\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Bachman & Associates\\\": new Faction(ns, \\\"Bachman & Associates\\\", {\\r\\n            corp: \\\"Bachman & Associates\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Clarke Incorporated\\\": new Faction(ns, \\\"Clarke Incorporated\\\", {\\r\\n            corp: \\\"Clarke Incorporated\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Fulcrum Secret Technologies\\\": new Faction(ns, \\\"Fulcrum Secret Technologies\\\", {\\r\\n            corp: \\\"Fulcrum Technologies\\\",\\r\\n            corporationRep: 250000,\\r\\n            backdoor: \\\"fulcrumassets\\\",\\r\\n        }),\\r\\n        \\\"Slum Snakes\\\": new Faction(ns, \\\"Slum Snakes\\\", {\\r\\n            karma: -9,\\r\\n            money: 1e6,\\r\\n            combat: 30,\\r\\n        }),\\r\\n        Tetrads: new Faction(ns, \\\"Tetrads\\\", {\\r\\n            karma: -18,\\r\\n            combat: 75,\\r\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\r\\n        }),\\r\\n        Silhouette: new Faction(ns, \\\"Silhouette\\\", {\\r\\n            karma: -22,\\r\\n            money: 15e6,\\r\\n            businessLeader: true,\\r\\n        }),\\r\\n        \\\"Speakers for the Dead\\\": new Faction(ns, \\\"Speakers for the Dead\\\", {\\r\\n            karma: -45,\\r\\n            hacking: 100,\\r\\n            combat: 300,\\r\\n            murder: 30,\\r\\n            law: true,\\r\\n        }),\\r\\n        \\\"The Dark Army\\\": new Faction(ns, \\\"The Dark Army\\\", {\\r\\n            karma: -45,\\r\\n            hacking: 300,\\r\\n            combat: 300,\\r\\n            murder: 5,\\r\\n            law: true,\\r\\n            locations: \\\"Chongqing\\\",\\r\\n        }),\\r\\n        \\\"The Syndicate\\\": new Faction(ns, \\\"The Syndicate\\\", {\\r\\n            karma: -90,\\r\\n            hacking: 200,\\r\\n            combat: 200,\\r\\n            money: 10e6,\\r\\n            law: true,\\r\\n            locations: [\\\"Aevum\\\", \\\"Sector-12\\\"],\\r\\n        }),\\r\\n        \\\"The Covenant\\\": new Faction(ns, \\\"The Covenant\\\", {\\r\\n            hacking: 850,\\r\\n            combat: 850,\\r\\n            money: 75e9,\\r\\n            augmentations: 20,\\r\\n        }),\\r\\n        Daedalus: new Faction(ns, \\\"Daedalus\\\", {\\r\\n            hacking: 2500,\\r\\n            combat: 1500,\\r\\n            money: 100e9,\\r\\n            augmentations: 30,\\r\\n            daedalus: true,\\r\\n        }),\\r\\n        Illuminati: new Faction(ns, \\\"Illuminati\\\", {\\r\\n            hacking: 1500,\\r\\n            combat: 1200,\\r\\n            money: 150e9,\\r\\n            augmentations: 30,\\r\\n        }),\\r\\n    };\\r\\n    if (options.target) {\\r\\n        if (factions[options.target]) {\\r\\n            await factions[options.target].getInvite(ns);\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        for (const faction of Object.values(factions)) {\\r\\n            await faction.getInvite(ns);\\r\\n        }\\r\\n    }\\r\\n    // for (const faction of factions) {\\r\\n    // }\\r\\n    // city priority:\\r\\n    //   Chongqing [Neuregen Gene Modification]\\r\\n    //   Sector-12 [CashRoot Starter Kit]\\r\\n    //   Aevum [PCMatrix]\\r\\n    //   New Tokyo --\\r\\n    //   Ishima --\\r\\n    //   Volhaven --\\r\\n    if (options.c)\\r\\n        return;\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Chongqing\\\") &&\\r\\n        !ns.getOwnedAugmentations(true).includes(\\\"Neuregen Gene Modification\\\")) {\\r\\n        await factions[\\\"Chongqing\\\"].join(ns);\\r\\n    }\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Sector-12\\\") &&\\r\\n        !ns.getOwnedAugmentations(true).includes(\\\"CashRoot Starter Kit\\\")) {\\r\\n        await factions[\\\"Sector-12\\\"].join(ns);\\r\\n    }\\r\\n    if (ns.checkFactionInvitations().includes(\\\"Aevum\\\") && !ns.getOwnedAugmentations(true).includes(\\\"PCMatrix\\\")) {\\r\\n        await factions[\\\"Aevum\\\"].join(ns);\\r\\n    }\\r\\n    for (const faction of Object.values(factions)) {\\r\\n        await faction.join(ns);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImpvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbkQsOERBQThEO0FBQzlELE1BQU0sUUFBUSxHQUFHLFVBQVUsUUFBZ0I7SUFDdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTztZQUFFLFNBQVM7UUFDdkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRyxJQUFJLEtBQUssQ0FBQyxRQUFRLFlBQVksS0FBSztZQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO2dCQUFFLElBQUksS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkg7QUFDTCxDQUFDLENBQUM7QUFFRiw4REFBOEQ7QUFDOUQsSUFBSSxVQUFlLENBQUM7QUFFcEIsU0FBUyxrQkFBa0I7SUFDdkIsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLDBCQUEwQixFQUFFLENBQUM7SUFFekQsS0FBSyxNQUFNLE9B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QUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQU07UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLElBQUksQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFN0IsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFOUMsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsaUJBQWlCLENBQUMsRUFBTSxFQUFFLGVBQWUsR0FBRyxLQUFLO1FBQzdDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUVsQixpQkFBaUI7UUFDakIsSUFBSSxlQUFlLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDaEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQzVDLE1BQU0sS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzVFO2lCQUFNO2dCQUNILE1BQU0sS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDO2FBQ3RFO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO1lBQ3BGLE1BQU07Z0JBQ0YsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtB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\",\"filename\":\"join.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fd2fa6b9-6942-470d-8759-416847358ed1\",\"moduleSequenceNumber\":395090},{\"filename\":\"join.js\",\"url\":\"blob:file:///796c08d9-28a2-4b8b-a57c-b2177f78b084\",\"moduleSequenceNumber\":396334}],\"dependents\":[],\"ramUsage\":22.65,\"server\":\"home\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    for (const faction of ns.checkFactionInvitations()) {\\r\\n        ns.joinFaction(faction);\\r\\n    }\\r\\n    ns.singularity.softReset(ns.getScriptName());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLHVCQUF1QixFQUFFLEVBQUU7UUFDaEQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMzQjtJQUdELEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMifQ==\",\"filename\":\"int.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"int.js\",\"url\":\"blob:file:///c6fad107-bc81-4634-870b-5299a468dac0\",\"moduleSequenceNumber\":38579760}],\"dependents\":[],\"ramUsage\":12.6,\"server\":\"home\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.softReset\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Fast hack using < 8GB footprint; Define simPlayer for a better experience (if you have Formulas.exe) but it puts it over 8GB.\\r\\nimport { HACKJS, GROWJS, WEAKENJS, llog, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst HOME_RESERVE_RAM = 16;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"n00dles\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    if ([\\\"--reserve\\\"].includes(lastFlag))\\r\\n        return [\\\"16\\\", \\\"32\\\", \\\"64\\\", \\\"128\\\"];\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    const weakenTimeShort = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    if (timeLimit > 10 * 60 * 60 * 1000)\\r\\n        timeLimit = weakenTimeShort * 2;\\r\\n    const batchCountLimit = Math.max(Math.floor((timeLimit - weakenTimeShort) / batchSpacer), 1);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    const batchCountMax = Math.min(Math.max(Math.floor(hackTimeLong / batchSpacer), 1), batchCountLimit);\\r\\n    // update batchCountMax to prevent time stretching when security isnt minimized\\r\\n    // if (targetServer.hackDifficulty - targetServer.minDifficulty > 0) {\\r\\n    //     const newBatchCountLimit = Math.max(Math.floor(weakenTimeShort / batchSpacer), 1);\\r\\n    //     llog(ns, \\\"Reducing batch count limit from %f to %f\\\", batchCountMax, batchCountLimit);\\r\\n    //     batchCountMax = Math.min(batchCountMax, batchCountLimit);\\r\\n    // }\\r\\n    // if (doLog)\\r\\n    //     llog(ns, \\\"timeLimit: %f; weakenTimeShort %f; batchCountLimit: %f\\\", timeLimit, weakenTimeShort, batchCountLimit);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    let totalMoney = 0;\\r\\n    let totalPercent = 0;\\r\\n    let batchID = 0;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        if (moneyDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Big Block %d\\\", bigBlock);\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                // Full weaken loop indicates we are done allocating batches\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            // if (doLog)\\r\\n            //     llog(\\r\\n            //         ns,\\r\\n            //         \\\"Reserving Batch %d H-%d HW-%d G-%d GW-%d; Big Block %d; Total %s (%.2f%%)\\\",\\r\\n            //         batchID,\\r\\n            //         hackThreads,\\r\\n            //         weakenHackThreads,\\r\\n            //         growThreads,\\r\\n            //         weakenGrowThreads,\\r\\n            //         bigBlock,\\r\\n            //         ns.nFormat(hackAmount, \\\"$0.000a\\\"),\\r\\n            //         (hackAmount / targetServer.moneyMax) * 100\\r\\n            //     );\\r\\n            reserveBatch(ns, targetServer, batchID++, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            totalMoney += hackAmount;\\r\\n            totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    return [batchID, totalMoney, totalPercent];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.disableLog(\\\"getHackingLevel\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    ns.tail();\\r\\n    let targetServer;\\r\\n    await doSoften(ns);\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    // if (!targetServer.canRunScripts()) {\\r\\n    //     ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetServer.hostname);\\r\\n    //     return;\\r\\n    // }\\r\\n    if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    const servers = serverService\\r\\n        .getScriptableServers(options.reserve)\\r\\n        .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n    const simPlayer = undefined; // ns.getPlayer();\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    while (true) {\\r\\n        let bestHackLimit = 0;\\r\\n        let bestHackLimitValue = 0;\\r\\n        for (const hackLimit of [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1]) {\\r\\n            targetServer.reload();\\r\\n            const [batchCount, totalMoney] = allocateBatches(ns, targetServer, servers, hackLimit, false, options.limit, simPlayer);\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Check %.3f - %d, %s, %s/s\\\",\\r\\n            //     hackLimit,\\r\\n            //     batchCount,\\r\\n            //     ns.nFormat(totalMoney, \\\"$0.000a\\\"),\\r\\n            //     ns.nFormat(value, \\\"$0.000a\\\")\\r\\n            // );\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer.reload();\\r\\n        const [batchCount, totalMoney, totalPercent] = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        // const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n        // const batchCountMax = Math.max(Math.floor(hackTimeLong / batchSpacer), 1);\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // ns.tprintf(\\\"Batches: %d\\\", batchCount);\\r\\n        // ns.tprintf(\\\"Target Time: %s\\\", stFormat(ns, hackTimeTarget, true));\\r\\n        // ns.tprintf(\\\"Hack Level          : %8.4f/%8.4f %s\\\", hackLevelCalc, hackLevel, stFormat(ns, hackTime, true));\\r\\n        // ns.tprintf(\\\"Grow Level          : %8.4f/%8.4f %s\\\", growLevelCalc, growLevel, stFormat(ns, growTime, true));\\r\\n        // ns.tprintf(\\\"Weaken Level        : %8.4f/%8.4f %s\\\", weakenLevelCalc, weakenLevel, stFormat(ns, weakenTime, true));\\r\\n        // ns.tprintf(\\\"Hack Timeline       : %6d %6d %6d\\\", hackOffset + startOffset, hackTime, hackOffset + startOffset + hackTime);\\r\\n        // ns.tprintf(\\\"Weaken Hack Timeline: %6d %6d %6d\\\", weakenHackOffset + startOffset, weakenTime, weakenHackOffset + startOffset + weakenTime);\\r\\n        // ns.tprintf(\\\"Grow Timeline       : %6d %6d %6d\\\", growOffset + startOffset, growTime, growOffset + startOffset + growTime);\\r\\n        // ns.tprintf(\\\"Weaken Grow Timeline: %6d %6d %6d\\\", weakenGrowOffset + startOffset, weakenTime, weakenGrowOffset + startOffset + weakenTime);\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n    }\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Executing %s:%s -t%d offset: %s\\\",\\r\\n            //     exec.hostname,\\r\\n            //     exec.filename,\\r\\n            //     exec.threads,\\r\\n            //     stFormat(ns, exec.offset, true)\\r\\n            // );\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"crawl.js\\\", \\\"home\\\", 1, \\\"-bs\\\", \\\"--suppress\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja18yLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrXzIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNklBQTZJO0FBRzdJLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQXFDLE1BQU0sa0JBQWtCLENBQUM7QUFFcEYsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBRXBCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQzVCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUNyQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBRXhCLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUV2QixTQUFTLHdCQUF3QixDQUFDLElBQXFCLEVBQUUsR0FBVyxFQUFFLEdBQWE7SUFDL0UsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUN2RCxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN0RixPQUFPO0FBQ1gsQ0FBQztBQVNELFNBQVMsbUJBQW1CLENBQUMsRUFBTSxFQUFFLE9BQWlCLEVBQUUsT0FBZ0I7SUFDcEUsc0dBQXNHO0lBQ3RHLE1BQU0sTUFBTSxHQUFHLE9BQU87U0FDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxD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\",\"filename\":\"/archive/hack_2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///e40fa039-e023-4830-8ec9-7a73cfc1bc19\",\"moduleSequenceNumber\":68},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///16227fd0-97f4-43e6-8a7e-44ab5546ea0a\",\"moduleSequenceNumber\":69},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f8b6086d-6896-4301-aad1-54c2ca3264c7\",\"moduleSequenceNumber\":68},{\"filename\":\"/archive/hack_2.js\",\"url\":\"blob:file:///38d7cbef-0d67-4820-83ee-f86676975ac1\",\"moduleSequenceNumber\":182}],\"dependents\":[],\"ramUsage\":8.85,\"server\":\"home\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/src/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.tail();\\r\\n    // const crimes = [\\r\\n    //     \\\"shoplift\\\",\\r\\n    //     \\\"rob store\\\",\\r\\n    //     \\\"mug\\\",\\r\\n    //     \\\"larceny\\\",\\r\\n    //     \\\"drugs\\\",\\r\\n    //     \\\"bond forge\\\",\\r\\n    //     \\\"traffick arms\\\",\\r\\n    //     \\\"homicide\\\",\\r\\n    //     \\\"grand auto\\\",\\r\\n    //     \\\"kidnap\\\",\\r\\n    //     \\\"assassinate\\\",\\r\\n    //     \\\"heist\\\",\\r\\n    // ];\\r\\n    // for (const crimename of crimes) {\\r\\n    //     const crimeStats = ns.getCrimeStats(crimename);\\r\\n    //     ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    // }\\r\\n    let dynamic = true;\\r\\n    let crime = \\\"shoplift\\\";\\r\\n    if (ns.args[0]) {\\r\\n        crime = ns.args[0].toString();\\r\\n        dynamic = false;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (dynamic) {\\r\\n            if (ns.getCrimeChance(\\\"mug\\\") > 0.7)\\r\\n                crime = \\\"mug\\\";\\r\\n            if (ns.getCrimeChance(\\\"homicide\\\") > 0.7)\\r\\n                crime = \\\"homicide\\\";\\r\\n        }\\r\\n        await ns.sleep(ns.commitCrime(crime) + 200);\\r\\n    }\\r\\n    ns.workForFaction(\\\"NiteSec\\\", \\\"Field Work\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JpbWUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRVYsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLEtBQUs7SUFFTCxvQ0FBb0M7SUFDcEMsc0RBQXNEO0lBQ3RELGlOQUFpTjtJQUNqTixJQUFJO0lBRUosSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWixLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLEdBQUcsS0FBSyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDVCxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHO2dCQUFFLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbEQsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUc7Z0JBQUUsS0FBSyxHQUFHLFVBQVUsQ0FBQztTQUMvRDtRQUNELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0tBQy9DO0lBRUQsRUFBRSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDL0MsQ0FBQyJ9\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crime.js\",\"url\":\"blob:file:///b8faad77-7c83-45ba-acb3-77c301e98ff7\",\"moduleSequenceNumber\":156401}],\"dependents\":[],\"ramUsage\":14.6,\"server\":\"home\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var FragmentType;\\r\\n(function (FragmentType) {\\r\\n    // Special fragments for the UI\\r\\n    FragmentType[FragmentType[\\\"None\\\"] = 0] = \\\"None\\\";\\r\\n    FragmentType[FragmentType[\\\"Delete\\\"] = 1] = \\\"Delete\\\";\\r\\n    // Stats boosting fragments\\r\\n    FragmentType[FragmentType[\\\"HackingChance\\\"] = 2] = \\\"HackingChance\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingSpeed\\\"] = 3] = \\\"HackingSpeed\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingMoney\\\"] = 4] = \\\"HackingMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingGrow\\\"] = 5] = \\\"HackingGrow\\\";\\r\\n    FragmentType[FragmentType[\\\"Hacking\\\"] = 6] = \\\"Hacking\\\";\\r\\n    FragmentType[FragmentType[\\\"Strength\\\"] = 7] = \\\"Strength\\\";\\r\\n    FragmentType[FragmentType[\\\"Defense\\\"] = 8] = \\\"Defense\\\";\\r\\n    FragmentType[FragmentType[\\\"Dexterity\\\"] = 9] = \\\"Dexterity\\\";\\r\\n    FragmentType[FragmentType[\\\"Agility\\\"] = 10] = \\\"Agility\\\";\\r\\n    FragmentType[FragmentType[\\\"Charisma\\\"] = 11] = \\\"Charisma\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetMoney\\\"] = 12] = \\\"HacknetMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetCost\\\"] = 13] = \\\"HacknetCost\\\";\\r\\n    FragmentType[FragmentType[\\\"Rep\\\"] = 14] = \\\"Rep\\\";\\r\\n    FragmentType[FragmentType[\\\"WorkMoney\\\"] = 15] = \\\"WorkMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"Crime\\\"] = 16] = \\\"Crime\\\";\\r\\n    FragmentType[FragmentType[\\\"Bladeburner\\\"] = 17] = \\\"Bladeburner\\\";\\r\\n    // utility fragments.\\r\\n    FragmentType[FragmentType[\\\"Booster\\\"] = 18] = \\\"Booster\\\";\\r\\n})(FragmentType || (FragmentType = {}));\\r\\nfunction fragmentTypeEffect(tpe) {\\r\\n    switch (tpe) {\\r\\n        case FragmentType.HackingChance: {\\r\\n            return \\\"+x% hack() success chance\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingSpeed: {\\r\\n            return \\\"+x% faster hack(), grow(), and weaken()\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingMoney: {\\r\\n            return \\\"+x% hack() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingGrow: {\\r\\n            return \\\"+x% grow() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Hacking: {\\r\\n            return \\\"+x% hacking skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Strength: {\\r\\n            return \\\"+x% strength skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Defense: {\\r\\n            return \\\"+x% defense skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Dexterity: {\\r\\n            return \\\"+x% dexterity skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Agility: {\\r\\n            return \\\"+x% agility skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Charisma: {\\r\\n            return \\\"+x% charisma skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetMoney: {\\r\\n            return \\\"+x% hacknet production\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetCost: {\\r\\n            return \\\"x% cheaper hacknet cost\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Rep: {\\r\\n            return \\\"+x% reputation from factions and companies\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.WorkMoney: {\\r\\n            return \\\"+x% work money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Crime: {\\r\\n            return \\\"+x% crime money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Bladeburner: {\\r\\n            return \\\"+x% all bladeburner stats\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Booster: {\\r\\n            return \\\"Booster\\\";\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    throw new Error(\\\"Calling effect for fragment type that doesn't have an effect \\\" + tpe);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const fragmentDefs = ns.stanek.fragmentDefinitions();\\r\\n    for (const fragmentDef of fragmentDefs) {\\r\\n        ns.tprintf(\\\"%s %s %s %s %s\\\", fragmentDef.id, fragmentDef.limit, fragmentDef.power, fragmentDef.shape, fragmentTypeEffect(fragmentDef.type));\\r\\n    }\\r\\n    // useful hack fragment id's are\\r\\n    // 0 1    S  +x% hacking skill  0,1\\r\\n    // 1 1    Z  +x% hacking skill  0,1\\r\\n    // 5 1.3  T  +x% faster HGW     0,1,2,3\\r\\n    // 6 2    I  +x% hack() power   0,1\\r\\n    // 7 0.5  J  +x% grow() power   0,1,2,3\\r\\n    // array of fragments, each fragment is an ID and an array of valid rotations\\r\\n    const fragmentIDs = [\\r\\n        //[100, [0, 1, 2, 3]], // 4\\r\\n        [0, [0, 1]],\\r\\n        //[101, [0, 1, 2, 3]], // 4\\r\\n        [1, [0, 1]],\\r\\n        //[102, [0, 1, 2, 3]], // 4\\r\\n        [5, [0, 1, 2, 3]],\\r\\n        //[103, [0, 1, 2, 3]], // 4\\r\\n        [6, [0, 1]],\\r\\n        //[104, [0, 1, 2, 3]], // 4\\r\\n        [7, [0, 1, 2, 3]],\\r\\n        //[105, [0, 1, 2, 3]], // 4\\r\\n        [25, [0, 1, 2, 3]],\\r\\n        //[106, [0, 1, 2, 3]], // 4\\r\\n        [28, [0, 1, 2, 3]], // 4\\r\\n        // [107, [0, 1, 2, 3]], // 4\\r\\n    ];\\r\\n    // a valid configuration is if all pieces can be placed\\r\\n    // try to place each piece\\r\\n    // if we hit a piece that cant be placed, iterate over all rotations\\r\\n    // if all rotations cant be placed, move to next cell and iterate over all rotations\\r\\n    // if all cells have been checked, roll back to earlier piece and rotate it.\\r\\n    ns.stanek.clearGift();\\r\\n    let watchdog = 0;\\r\\n    async function doPlacement(frag, x, y, rot) {\\r\\n        if (watchdog++ % 1000 === 0) {\\r\\n            await ns.sleep(0);\\r\\n        }\\r\\n        //ns.tprintf(\\\"Attempting to place %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n        if (ns.stanek.placeFragment(x, y, rot, fragmentIDs[frag][0])) {\\r\\n            if (frag === fragmentIDs.length - 1)\\r\\n                return true;\\r\\n            //ns.tprintf(\\\"Placed %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n            if (!(await doPlacement(frag + 1, 0, 0, 0))) {\\r\\n                // ns.tprintf(\\r\\n                //     \\\"Failed to place %d in current board, rolling back %d at %d,%d,%d\\\",\\r\\n                //     fragmentIDs[frag + 1][0],\\r\\n                //     fragmentIDs[frag][0],\\r\\n                //     x,\\r\\n                //     y,\\r\\n                //     rot\\r\\n                // );\\r\\n                ns.stanek.removeFragment(x, y);\\r\\n            }\\r\\n            else {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        if (rot + 1 < fragmentIDs[frag][1].length)\\r\\n            return await doPlacement(frag, x, y, rot + 1);\\r\\n        if (x + 1 < ns.stanek.giftWidth())\\r\\n            return await doPlacement(frag, x + 1, y, 0);\\r\\n        if (y + 1 < ns.stanek.giftHeight())\\r\\n            return await doPlacement(frag, 0, y + 1, 0);\\r\\n        return false;\\r\\n    }\\r\\n    await doPlacement(0, 0, 0, 0);\\r\\n    for (const fragment of ns.stanek.activeFragments()) {\\r\\n        ns.tprintf(\\\"%s %s %s %s\\\", fragment.id, fragment.x, fragment.y, fragment.rotation);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmVrLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3RhbmVrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUssWUF5Qko7QUF6QkQsV0FBSyxZQUFZO0lBQ2IsK0JBQStCO0lBQy9CLCtDQUFJLENBQUE7SUFDSixtREFBTSxDQUFBO0lBRU4sMkJBQTJCO0lBQzNCLGlFQUFhLENBQUE7SUFDYiwrREFBWSxDQUFBO0lBQ1osK0RBQVksQ0FBQTtJQUNaLDZEQUFXLENBQUE7SUFDWCxxREFBTyxDQUFBO0lBQ1AsdURBQVEsQ0FBQTtJQUNSLHFEQUFPLENBQUE7SUFDUCx5REFBUyxDQUFBO0lBQ1Qsc0RBQU8sQ0FBQTtJQUNQLHdEQUFRLENBQUE7SUFDUixnRUFBWSxDQUFBO0lBQ1osOERBQVcsQ0FBQTtJQUNYLDhDQUFHLENBQUE7SUFDSCwwREFBUyxDQUFBO0lBQ1Qsa0RBQUssQ0FBQTtJQUNMLDhEQUFXLENBQUE7SUFFWCxxQkFBcUI7SUFDckIsc0RBQU8sQ0FBQTtBQUNYLENBQUMsRUF6QkksWUFBWSxLQUFaLFlBQVksUUF5QmhCO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxHQUFpQjtJQUN6QyxRQUFRLEdBQUcsRUFBRTtRQUNULEtBQUssWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sMkJBQTJCLENBQUM7WUFDbkMsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUIsT0FBTyx5Q0FBeUMsQ0FBQztZQUNqRCxNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QixPQUFPLGtCQUFrQixDQUFDO1lBQzFCLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sa0JBQWtCLENBQUM7WUFDMUIsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkIsT0FBTyxtQkFBbUIsQ0FBQztZQUMzQixNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QixPQUFPLG9CQUFvQixDQUFDO1lBQzVCLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sbUJBQW1CLENBQUM7WUFDM0IsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDekIsT0FBTyxxQkFBcUIsQ0FBQztZQUM3QixNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QixPQUFPLG1CQUFtQixDQUFDO1lBQzNCLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hCLE9BQU8sb0JBQW9CLENBQUM7WUFDNUIsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUIsT0FBTyx3QkFBd0IsQ0FBQztZQUNoQyxNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzQixPQUFPLHlCQUF5QixDQUFDO1lBQ2pDLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLE9BQU8sNENBQTRDLENBQUM7WUFDcEQsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDekIsT0FBTyxnQkFBZ0IsQ0FBQztZQUN4QixNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQixPQUFPLGlCQUFpQixDQUFDO1lBQ3pCLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sMkJBQTJCLENBQUM7WUFDbkMsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkIsT0FBTyxTQUFTLENBQUM7WUFDakIsTUFBTTtTQUNUO0tBQ0o7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRCxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNyRCxLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtRQUNwQyxFQUFFLENBQUMsT0FBTyxDQUNOLGdCQUFnQixFQUNoQixXQUFXLENBQUMsRUFBRSxFQUNkLFdBQVcsQ0FBQyxLQUFLLEVBQ2pCLFdBQVcsQ0FBQyxLQUFLLEVBQ2pCLFdBQVcsQ0FBQyxLQUFLLEVBQ2pCLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FDdkMsQ0FBQztLQUNMO0lBRUQsZ0NBQWdDO0lBQ2hDLG1DQUFtQztJQUNuQyxtQ0FBbUM7SUFDbkMsdUNBQXVDO0lBQ3ZDLG1DQUFtQztJQUNuQyx1Q0FBdUM7SUFFdkMsNkVBQTZFO0lBQzdFLE1BQU0sV0FBVyxHQUF5QjtRQUN0QywyQkFBMkI7UUFDM0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDWCwyQkFBMkI7UUFDM0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDWCwyQkFBMkI7UUFDM0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQiwyQkFBMkI7UUFDM0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDWCwyQkFBMkI7UUFDM0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQiwyQkFBMkI7UUFDM0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsQiwyQkFBMkI7UUFDM0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUk7UUFDeEIsNEJBQTRCO0tBQy9CLENBQUM7SUFFRix1REFBdUQ7SUFDdkQsMEJBQTBCO0lBQzFCLG9FQUFvRTtJQUNwRSxvRkFBb0Y7SUFDcEYsNEVBQTRFO0lBRTVFLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFdEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBRWpCLEtBQUssVUFBVSxXQUFXLENBQUMsSUFBWSxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsR0FBVztRQUN0RSxJQUFJLFFBQVEsRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDekIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0Qsb0ZBQW9GO1FBRXBGLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDMUQsSUFBSSxJQUFJLEtBQUssV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUFFLE9BQU8sSUFBSSxDQUFDO1lBRWpELHVFQUF1RTtZQUV2RSxJQUFJLENBQUMsQ0FBQyxNQUFNLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekMsY0FBYztnQkFDZCwwRUFBMEU7Z0JBQzFFLGdDQUFnQztnQkFDaEMsNEJBQTRCO2dCQUM1QixTQUFTO2dCQUNULFNBQVM7Z0JBQ1QsVUFBVTtnQkFDVixLQUFLO2dCQUNMLEVBQUUsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNsQztpQkFBTTtnQkFDSCxPQUFPLElBQUksQ0FBQzthQUNmO1NBQ0o7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFBRSxPQUFPLE1BQU0sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV6RixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFBRSxPQUFPLE1BQU0sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUvRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFBRSxPQUFPLE1BQU0sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVoRixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsTUFBTSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFOUIsS0FBSyxNQUFNLFFBQVEsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBQ2hELEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNyRjtBQUNMLENBQUMifQ==\",\"filename\":\"stanek.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stanek.js\",\"url\":\"blob:file:///dbff1e3f-8e80-4462-82c6-90172926f74c\",\"moduleSequenceNumber\":73980}],\"dependents\":[],\"ramUsage\":12.55,\"server\":\"home\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.placeFragment\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.removeFragment\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.giftWidth\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.giftHeight\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [[\\\"reserve\\\", Number.MAX_SAFE_INTEGER]];\\r\\nlet serverService;\\r\\nconst CHARGEJS = \\\"/lib/stanek/charge.js\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"scp\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.tail();\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const fragments = ns.stanek.activeFragments().filter((x) => x.id < 100);\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(CHARGEJS, \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    const availableThreadsTotal = scriptableServers.reduce((input, server) => input + Math.floor(server.threadsAvailable(ns.getScriptRam(CHARGEJS))), 0);\\r\\n    ns.tprintf(\\\"available threads: %d\\\", availableThreadsTotal);\\r\\n    const fragSplit = Math.floor(availableThreadsTotal / fragments.length);\\r\\n    ns.tprintf(\\\"Frags %d\\\", fragments.length);\\r\\n    ns.tprintf(\\\"Split %d\\\", fragSplit);\\r\\n    for (const fragment of fragments) {\\r\\n        let threadsRemaining = fragSplit;\\r\\n        for (const server of scriptableServers) {\\r\\n            server.reload();\\r\\n            const availableThreads = Math.floor(server.threadsAvailable(ns.getScriptRam(CHARGEJS)));\\r\\n            const usingThreads = Math.min(threadsRemaining, availableThreads);\\r\\n            if (usingThreads <= 0)\\r\\n                continue;\\r\\n            const pid = ns.exec(CHARGEJS, server.hostname, usingThreads, fragment.x, fragment.y);\\r\\n            threadsRemaining -= usingThreads;\\r\\n            if (threadsRemaining <= 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2hhcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxJQUFJLE9BQU8sQ0FBQztBQUNaLE1BQU0sVUFBVSxHQUFxRCxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFFNUcsSUFBSSxhQUE0QixDQUFDO0FBQ2pDLE1BQU0sUUFBUSxHQUFHLHVCQUF1QixDQUFDO0FBRXpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVWLElBQUk7UUFDQSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtRQUMvQyxFQUFFLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxPQUFPO0tBQ1Y7SUFFRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN4RSxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUUsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDekMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsTUFBTSxxQkFBcUIsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQ2xELENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUN6RixDQUFDLENBQ0osQ0FBQztJQUVGLEVBQUUsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMzRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV2RSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFbEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsSUFBSSxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDakMsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtZQUNwQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDaEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFbEUsSUFBSSxZQUFZLElBQUksQ0FBQztnQkFBRSxTQUFTO1lBRWhDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXJGLGdCQUFnQixJQUFJLFlBQVksQ0FBQztZQUVqQyxJQUFJLGdCQUFnQixJQUFJLENBQUM7Z0JBQUUsTUFBTTtTQUNwQztLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f8a0e222-84df-4133-bc8b-1e7e5915ddc2\",\"moduleSequenceNumber\":43},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///a44ebbb7-ff82-483e-b69a-425834826731\",\"moduleSequenceNumber\":44},{\"filename\":\"charge.js\",\"url\":\"blob:file:///f3eee896-9eee-4a6f-a1d0-f2542ea2c967\",\"moduleSequenceNumber\":140}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.chargeFragment(Number(ns.args[0]), Number(ns.args[1]));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUU7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///1dea4df2-ecba-4cae-b3a8-941df9ca23ca\",\"moduleSequenceNumber\":226}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Joining factions gives a small amount of int xp.\\r\\n// With singularity functions, soft reset, and the 10 corp factions you can create a script that farms int xp rather quickly.\\r\\n// This would be faster than the below travel-based method, which has been nerfed quite heavily\\r\\n/** @param {NS} ns\\r\\n * Script contributed by https://github.com/ShawnPatton\\r\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\r\\nexport async function main(ns) {\\r\\n    //disableLogs(ns, [\\\"travelToCity\\\", \\\"sleep\\\"]);\\r\\n    ns.tail();\\r\\n    const tripsPerCycle = 1000;\\r\\n    const moneyThreshold = 1000000000000;\\r\\n    let previousInt = ns.getPlayer().intelligence;\\r\\n    let currentInt = previousInt;\\r\\n    let previousLevelTime = Date.now();\\r\\n    let levelupTime;\\r\\n    let cycles = 0;\\r\\n    let duration = 0;\\r\\n    let tripsPerLevel = 0;\\r\\n    let tripsPerMs = 0;\\r\\n    ns.print(`Starting Script at Int ` + currentInt);\\r\\n    while (true) {\\r\\n        while (ns.getPlayer().money > moneyThreshold) {\\r\\n            for (let i = 0; i < tripsPerCycle; i++) {\\r\\n                ns.travelToCity(\\\"Aevum\\\");\\r\\n                ns.travelToCity(\\\"Sector-12\\\");\\r\\n            }\\r\\n            await ns.sleep(1);\\r\\n            cycles++;\\r\\n            if (previousInt != ns.getPlayer().intelligence) {\\r\\n                currentInt = ns.getPlayer().intelligence;\\r\\n                levelupTime = Date.now();\\r\\n                duration = levelupTime - previousLevelTime;\\r\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\r\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\r\\n                // ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\r\\n                //     + formatDuration(duration) + ` & ` + formatNumberShort(tripsPerLevel) + ` Travels`);\\r\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\r\\n                previousLevelTime = levelupTime;\\r\\n                previousInt = currentInt;\\r\\n                cycles = 0;\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50XzEuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJhcmNoaXZlL2ludF8xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHlEQUF5RDtBQUN6RCw2SEFBNkg7QUFDN0gsK0ZBQStGO0FBRS9GOzt5SkFFeUo7QUFDekosTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3Qiw2Q0FBNkM7SUFDN0MsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztJQUNyQyxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWSxDQUFDO0lBQzlDLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztJQUM3QixJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNuQyxJQUFJLFdBQVcsQ0FBQztJQUNoQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDZixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNuQixFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sSUFBSSxFQUFFO1FBQ1QsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxHQUFHLGNBQWMsRUFBRTtZQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwQyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN6QixFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ2hDO1lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsSUFBSSxXQUFXLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVksRUFBRTtnQkFDNUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxZQUFZLENBQUM7Z0JBQ3pDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3pCLFFBQVEsR0FBRyxXQUFXLEdBQUcsaUJBQWlCLENBQUM7Z0JBQzNDLGFBQWEsR0FBRyxNQUFNLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQztnQkFDM0MsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxDQUFDO2dCQUNsRCwrRkFBK0Y7Z0JBQy9GLDJGQUEyRjtnQkFDM0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztnQkFDL0QsaUJBQWlCLEdBQUcsV0FBVyxDQUFDO2dCQUNoQyxXQUFXLEdBQUcsVUFBVSxDQUFDO2dCQUN6QixNQUFNLEdBQUcsQ0FBQyxDQUFDO2FBQ2Q7U0FDSjtRQUNELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixFQUFFLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7S0FDekQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/archive/int_1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doBackdoor } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    await doBackdoor(ns, \\\"w0r1d_d43m0n\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNjZW5kLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXNjZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdkMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDekMsQ0FBQyJ9\",\"filename\":\"ascend.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///1c2dabd0-2fb7-475b-97b1-c63dffab9e22\",\"moduleSequenceNumber\":28164},{\"filename\":\"ascend.js\",\"url\":\"blob:file:///f72d3a14-9fa9-45ca-ae60-4c73a1704454\",\"moduleSequenceNumber\":29123}],\"dependents\":[],\"ramUsage\":8.15,\"server\":\"home\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Fast hack using < 8GB footprint; Define simPlayer for a better experience (if you have Formulas.exe) but it puts it over 8GB.\\r\\nimport { HACKJS, GROWJS, WEAKENJS, llog, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService, Server } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst HOME_RESERVE_RAM = 16;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"n00dles\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    if ([\\\"--reserve\\\"].includes(lastFlag))\\r\\n        return [\\\"16\\\", \\\"32\\\", \\\"64\\\", \\\"128\\\"];\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    const weakenTimeShort = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    if (timeLimit > 10 * 60 * 60 * 1000)\\r\\n        timeLimit = weakenTimeShort * 2;\\r\\n    const batchCountLimit = Math.max(Math.floor((timeLimit - weakenTimeShort) / batchSpacer), 1);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    const batchCountMax = Math.min(Math.max(Math.floor(hackTimeLong / batchSpacer), 1), batchCountLimit);\\r\\n    // update batchCountMax to prevent time stretching when security isnt minimized\\r\\n    // if (targetServer.hackDifficulty - targetServer.minDifficulty > 0) {\\r\\n    //     const newBatchCountLimit = Math.max(Math.floor(weakenTimeShort / batchSpacer), 1);\\r\\n    //     llog(ns, \\\"Reducing batch count limit from %f to %f\\\", batchCountMax, batchCountLimit);\\r\\n    //     batchCountMax = Math.min(batchCountMax, batchCountLimit);\\r\\n    // }\\r\\n    // if (doLog)\\r\\n    //     llog(ns, \\\"timeLimit: %f; weakenTimeShort %f; batchCountLimit: %f\\\", timeLimit, weakenTimeShort, batchCountLimit);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    let totalMoney = 0;\\r\\n    let totalPercent = 0;\\r\\n    let batchID = 0;\\r\\n    let hasPrimary = false;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        if (moneyDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            hasPrimary = true;\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Big Block %d\\\", bigBlock);\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                // Full weaken loop indicates we are done allocating batches\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            // if (doLog)\\r\\n            //     llog(\\r\\n            //         ns,\\r\\n            //         \\\"Reserving Batch %d H-%d HW-%d G-%d GW-%d; Big Block %d; Total %s (%.2f%%)\\\",\\r\\n            //         batchID,\\r\\n            //         hackThreads,\\r\\n            //         weakenHackThreads,\\r\\n            //         growThreads,\\r\\n            //         weakenGrowThreads,\\r\\n            //         bigBlock,\\r\\n            //         ns.nFormat(hackAmount, \\\"$0.000a\\\"),\\r\\n            //         (hackAmount / targetServer.moneyMax) * 100\\r\\n            //     );\\r\\n            reserveBatch(ns, targetServer, batchID++, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            totalMoney += hackAmount;\\r\\n            totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    return { batchID: batchID, totalMoney: totalMoney, totalPercent: totalPercent, hasPrimary: hasPrimary };\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.disableLog(\\\"getHackingLevel\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    ns.tail();\\r\\n    let targetServer;\\r\\n    await doSoften(ns);\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    // if (!targetServer.canRunScripts()) {\\r\\n    //     ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetServer.hostname);\\r\\n    //     return;\\r\\n    // }\\r\\n    if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    const servers = serverService\\r\\n        .getScriptableServers(options.reserve)\\r\\n        .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n    const simPlayer = undefined; // ns.getPlayer();\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    // const targets = serverService.getHackableServers(ns.getHackingLevel());\\r\\n    // const targetIncomes: [Server, number][] = [];\\r\\n    // for (const target of targets) {\\r\\n    //     targetIncomes.push([target, getIncome(target)]);\\r\\n    // }\\r\\n    while (true) {\\r\\n        let bestHackLimit = 0;\\r\\n        let bestHackLimitValue = 0;\\r\\n        for (const hackLimit of [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1]) {\\r\\n            targetServer.reload();\\r\\n            const allocateBatchResult = allocateBatches(ns, targetServer, servers, hackLimit, false, options.limit, simPlayer);\\r\\n            const batchCount = allocateBatchResult.batchID;\\r\\n            const totalMoney = allocateBatchResult.totalMoney;\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Check %.3f - %d, %s, %s/s\\\",\\r\\n            //     hackLimit,\\r\\n            //     batchCount,\\r\\n            //     ns.nFormat(totalMoney, \\\"$0.000a\\\"),\\r\\n            //     ns.nFormat(value, \\\"$0.000a\\\")\\r\\n            // );\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer.reload();\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchID;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const totalPercent = allocateBatchResult.totalPercent;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        // const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n        // const batchCountMax = Math.max(Math.floor(hackTimeLong / batchSpacer), 1);\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // ns.tprintf(\\\"Batches: %d\\\", batchCount);\\r\\n        // ns.tprintf(\\\"Target Time: %s\\\", stFormat(ns, hackTimeTarget, true));\\r\\n        // ns.tprintf(\\\"Hack Level          : %8.4f/%8.4f %s\\\", hackLevelCalc, hackLevel, stFormat(ns, hackTime, true));\\r\\n        // ns.tprintf(\\\"Grow Level          : %8.4f/%8.4f %s\\\", growLevelCalc, growLevel, stFormat(ns, growTime, true));\\r\\n        // ns.tprintf(\\\"Weaken Level        : %8.4f/%8.4f %s\\\", weakenLevelCalc, weakenLevel, stFormat(ns, weakenTime, true));\\r\\n        // ns.tprintf(\\\"Hack Timeline       : %6d %6d %6d\\\", hackOffset + startOffset, hackTime, hackOffset + startOffset + hackTime);\\r\\n        // ns.tprintf(\\\"Weaken Hack Timeline: %6d %6d %6d\\\", weakenHackOffset + startOffset, weakenTime, weakenHackOffset + startOffset + weakenTime);\\r\\n        // ns.tprintf(\\\"Grow Timeline       : %6d %6d %6d\\\", growOffset + startOffset, growTime, growOffset + startOffset + growTime);\\r\\n        // ns.tprintf(\\\"Weaken Grow Timeline: %6d %6d %6d\\\", weakenGrowOffset + startOffset, weakenTime, weakenGrowOffset + startOffset + weakenTime);\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n    }\\r\\n}\\r\\nfunction getIncome(ns, _targetServer, servers, timespan) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const simPlayer = ns.getPlayer();\\r\\n    let bestHackLimit = 0;\\r\\n    let bestHackLimitValue = 0;\\r\\n    const initialTargetServer = new Server(ns, _targetServer);\\r\\n    let targetServer = new Server(ns, initialTargetServer);\\r\\n    let timeleft = timespan;\\r\\n    let totalMoneyGained = 0;\\r\\n    while (timeleft > 0) {\\r\\n        const tmpServer = new Server(ns, targetServer);\\r\\n        for (const hackLimit of [0.25, 0.5, 0.75, 0.9, 1]) {\\r\\n            targetServer = new Server(ns, tmpServer);\\r\\n            const allocateBatchResult = allocateBatches(ns, targetServer, servers, hackLimit, false, timeleft, simPlayer);\\r\\n            const batchCount = allocateBatchResult.batchID;\\r\\n            const totalMoney = allocateBatchResult.totalMoney;\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer = new Server(ns, tmpServer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchID;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const usedPrimary = allocateBatchResult.hasPrimary;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        const playerHackingLevel = simPlayer.hacking;\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        if (usedPrimary) {\\r\\n            timeleft -= cycleTime;\\r\\n            totalMoneyGained += totalMoney;\\r\\n            // simulate the batches on targetServer and do the loop again\\r\\n        }\\r\\n        else {\\r\\n            const cyclesLeft = Math.ceil(timeleft / cycleTime);\\r\\n            timeleft -= cycleTime * cyclesLeft;\\r\\n            totalMoneyGained += totalMoney * cyclesLeft;\\r\\n        }\\r\\n    }\\r\\n    const totalTime = timespan - timeleft;\\r\\n    return totalMoneyGained / (totalTime / 1000); // $/s\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Executing %s:%s -t%d offset: %s\\\",\\r\\n            //     exec.hostname,\\r\\n            //     exec.filename,\\r\\n            //     exec.threads,\\r\\n            //     stFormat(ns, exec.offset, true)\\r\\n            // );\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"crawl.js\\\", \\\"home\\\", 1, \\\"-bs\\\", \\\"--suppress\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja194LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrX3gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNklBQTZJO0FBRzdJLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUE2QixNQUFNLGtCQUFrQixDQUFDO0FBRXBGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUVwQixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUM1QixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUM7QUFDckIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQztBQUV4QixNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFdkIsU0FBUyx3QkFBd0IsQ0FBQyxJQUFxQixFQUFFLEdBQVcsRUFBRSxHQUFhO0lBQy9FLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdkQsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07UUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdEYsT0FBTztBQUNYLENBQUM7QUFTRCxTQUFTLG1CQUFtQixDQUFDLEVBQU0sRUFBRSxPQUFpQixFQUFFLE9BQWdCO0lBQ3BFLHNHQUFzRztJQUN0RyxNQUFNLE1BQU0sR0FBRyxPQUFPO1NBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxF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\",\"filename\":\"/archive/hack_x.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doBackdoor } from '/lib/util';\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any,  @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    await doBackdoor(ns, String(ns.args[0]));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2Rvb3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJiYWNrZG9vci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRXRDLHFKQUFxSjtBQUNySixNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFjO0lBQ2xELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN4QixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzVDLENBQUMifQ==\",\"filename\":\"backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"server\":\"home\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Augmentation } from \\\"/lib/augmentation/augmentation\\\";\\r\\nimport { allHosts, CONSTWEAKENJS, doBuyAndSoftenAll, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService } from \\\"/services/server\\\";\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nfunction favorToRep(f) {\\r\\n    const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n    return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"brutessh\\\");\\r\\n    ns.disableLog(\\\"ftpcrack\\\");\\r\\n    ns.disableLog(\\\"httpworm\\\");\\r\\n    ns.disableLog(\\\"relaysmtp\\\");\\r\\n    ns.disableLog(\\\"sqlinject\\\");\\r\\n    ns.disableLog(\\\"nuke\\\");\\r\\n    //ns.tail();\\r\\n    const serverService = new ServerService(ns);\\r\\n    if (ns.getRunningScript(\\\"clock.js\\\", \\\"home\\\") === null)\\r\\n        ns.exec(\\\"clock.js\\\", \\\"home\\\");\\r\\n    let doExp = true;\\r\\n    //const msToRep = 0;\\r\\n    let doServerBuys = true;\\r\\n    while (true) {\\r\\n        const hackPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n        while (ns.getRunningScript(hackPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        if (ns.getPlayer().money) {\\r\\n            const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1, \\\"-c\\\");\\r\\n            while (ns.getRunningScript(joinPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        // check to see what faction should be targeted\\r\\n        // 1) tian di hui 6.25k - Social Negotiation Assistant (S.N.A)\\r\\n        // 2) cybersec to 10k - Cranial Signal Processors - Gen I\\r\\n        // 3) Nitesec 45k - CRTX42-AA Gene Modification\\r\\n        // 4) The Black Hand 100k\\r\\n        // 5) Bitrunners 65k\\r\\n        // 6) Bitrunners 385k\\r\\n        // 7) Bitrunners Bribe\\r\\n        // 8) Daedalus 65k\\r\\n        // 9) Daedalus 385k\\r\\n        // 10) Daedalus Bribe\\r\\n        // 11) World Daemon\\r\\n        const augTargets = [\\r\\n            {\\r\\n                faction: \\\"Tian Di Hui\\\",\\r\\n                aug: \\\"Social Negotiation Assistant (S.N.A)\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"CyberSec\\\",\\r\\n                aug: \\\"Cranial Signal Processors - Gen I\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"NiteSec\\\",\\r\\n                aug: \\\"CRTX42-AA Gene Modification\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"The Black Hand\\\",\\r\\n                aug: \\\"The Black Hand\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Chongqing\\\",\\r\\n                aug: \\\"Neuregen Gene Modification\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"BitRunners\\\",\\r\\n                aug: \\\"Embedded Netburner Module Core V2 Upgrade\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Daedalus\\\",\\r\\n                aug: \\\"The Red Pill\\\"\\r\\n            },\\r\\n        ];\\r\\n        let doInstall = false;\\r\\n        let allInstalled = true;\\r\\n        for (const augTarget of augTargets) {\\r\\n            const targetAug = new Augmentation(ns, augTarget.aug, augTarget.faction);\\r\\n            const augs = ns\\r\\n                .getAugmentationsFromFaction(augTarget.faction)\\r\\n                .map((name) => {\\r\\n                return new Augmentation(ns, name, augTarget.faction);\\r\\n            })\\r\\n                .filter((a) => a.rep <= targetAug.rep && !a.owned && !a.installed)\\r\\n                .sort((a, b) => a.rep - b.rep);\\r\\n            let goalCost = 0;\\r\\n            let multpow = 0;\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            for (const aug of augs) {\\r\\n                goalCost += aug.price * Math.pow(multmult, multpow);\\r\\n                multpow++;\\r\\n            }\\r\\n            if (!targetAug.owned) {\\r\\n                let overrideDoInstall = false;\\r\\n                allInstalled = false;\\r\\n                if (ns.checkFactionInvitations().includes(augTarget.faction))\\r\\n                    ns.joinFaction(augTarget.faction);\\r\\n                ns.workForFaction(augTarget.faction, \\\"Hacking Contracts\\\", true);\\r\\n                if (targetAug.purchaseable)\\r\\n                    doInstall = true;\\r\\n                if (targetAug.rep > favorToRep(ns.getFavorToDonate())) {\\r\\n                    const favor = ns.getFactionFavor(augTarget.faction);\\r\\n                    const targetRep = favorToRep(ns.getFavorToDonate());\\r\\n                    const currentRep = ns.getFactionRep(augTarget.faction) +\\r\\n                        (ns.getPlayer().currentWorkFactionName === augTarget.faction\\r\\n                            ? ns.getPlayer().workRepGained\\r\\n                            : 0);\\r\\n                    const storedRep = Math.max(0, favorToRep(favor));\\r\\n                    const targetRep15Percent = targetRep * 0.15;\\r\\n                    const totalRep = currentRep + storedRep;\\r\\n                    // first pass\\r\\n                    if (totalRep < targetRep15Percent && favor < 25) {\\r\\n                        const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                        const msToRep = (targetRep15Percent - totalRep) / repGainPerMS;\\r\\n                        ns.tprintf(\\\"Time For %s %d => %d: %s\\\", augTarget.faction, totalRep, targetRep15Percent, stFormat(ns, msToRep));\\r\\n                    }\\r\\n                    if (totalRep >= targetRep15Percent && favor < 25) {\\r\\n                        overrideDoInstall = true;\\r\\n                        doInstall = true;\\r\\n                    }\\r\\n                    // second pass\\r\\n                    if (totalRep < targetRep && favor < ns.getFavorToDonate()) {\\r\\n                        const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                        const msToRep = (targetRep - totalRep) / repGainPerMS;\\r\\n                        ns.tprintf(\\\"Time For %s %d => %d: %s\\\", augTarget.faction, totalRep, targetRep, stFormat(ns, msToRep));\\r\\n                    }\\r\\n                    if (totalRep > targetRep && favor < ns.getFavorToDonate()) {\\r\\n                        overrideDoInstall = true;\\r\\n                        doInstall = true;\\r\\n                    }\\r\\n                    // third pass\\r\\n                    if (favor > ns.getFavorToDonate() && currentRep < targetAug.rep) {\\r\\n                        const donateAmt = 1e6 * ((targetAug.rep - currentRep) / ns.getPlayer().faction_rep_mult);\\r\\n                        if (donateAmt < ns.getPlayer().money) {\\r\\n                            ns.donateToFaction(augTarget.faction, donateAmt);\\r\\n                            doInstall = true;\\r\\n                        }\\r\\n                        else {\\r\\n                            goalCost += donateAmt;\\r\\n                        }\\r\\n                    }\\r\\n                    if (ns.getPlayer().money < goalCost && !overrideDoInstall) {\\r\\n                        ns.tprintf(\\\"Controller: Target Cash %s\\\", ns.nFormat(goalCost, \\\"$0.000a\\\"));\\r\\n                        if (doInstall)\\r\\n                            doServerBuys = false;\\r\\n                        doInstall = false;\\r\\n                    }\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (doInstall) {\\r\\n            ns.stopAction();\\r\\n            const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, \\\"-g\\\");\\r\\n            while (ns.getRunningScript(mcpPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(joinPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(cctPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n        }\\r\\n        if (allInstalled) {\\r\\n            // if we have the red pill and we can hack the world daemon, ascend\\r\\n            if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\"))\\r\\n                ns.exec(\\\"ascend.js\\\", \\\"home\\\", 1);\\r\\n            // level up until we can hack the world daemon\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            let ngPrice = ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\");\\r\\n            let ngRepReq = ns.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n            let total = 0;\\r\\n            for (let i = 0; i < 10; i++) {\\r\\n                total += ngPrice;\\r\\n                ngPrice = ngPrice * 1.14 * multmult;\\r\\n                ngRepReq *= 1.14;\\r\\n            }\\r\\n            const donateAmt = 1e6 * (ngRepReq / ns.getPlayer().faction_rep_mult);\\r\\n            if (donateAmt + total <= ns.getPlayer().money) {\\r\\n                ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n            }\\r\\n        }\\r\\n        const servers = serverService.getScriptableServers(HOME_RESERVE_RAM);\\r\\n        const availableRamBefore = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        doBuyAndSoftenAll(ns);\\r\\n        if (ns.getPlayer().money * 0.25 > ns.getUpgradeHomeRamCost())\\r\\n            ns.upgradeHomeRam();\\r\\n        if (ns.getPlayer().money < 1000000000 && doServerBuys) {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.5, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        else {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.25, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        const availableRamAfter = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        if (availableRamBefore < availableRamAfter || doExp) {\\r\\n            doExp = false;\\r\\n            ns.exec(\\\"exp.js\\\", \\\"home\\\", 1, \\\"--reserve\\\", HOME_RESERVE_RAM);\\r\\n            await ns.sleep(60 * 1000);\\r\\n            // kill all weaken scripts\\r\\n            const allHostnames = allHosts(ns);\\r\\n            for (const hostname of allHostnames) {\\r\\n                const processes = ns.ps(hostname).filter((a) => a.filename === CONSTWEAKENJS);\\r\\n                for (const process of processes) {\\r\\n                    ns.kill(process.pid);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNqRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFFN0IsU0FBUyxVQUFVLENBQUMsQ0FBUztJQUN6QixNQUFNLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLCtCQUErQjtBQUMzRSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQixFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFdEIsWUFBWTtJQUNaLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTVDLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsS0FBSyxJQUFJO1FBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFbEYsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLG9CQUFvQjtJQUNwQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDeEIsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUk7WUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEUsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFO1lBQ3RCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEQsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSTtnQkFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDckU7UUFFRCwrQ0FBK0M7UUFDL0MsOERBQThEO1FBQzlELHlEQUF5RDtRQUN6RCwrQ0FBK0M7UUFDL0MseUJBQXlCO1FBQ3pCLG9CQUFvQjtRQUNwQixxQkFBcUI7UUFDckIsc0JBQXNCO1FBQ3RCLGtCQUFrQjtRQUNsQixtQkFBbUI7UUFDbkIscUJBQXFCO1FBQ3JCLG1CQUFtQjtRQUVuQixNQUFNLFVBQVUsR0FBRztZQUNmO2dCQUNJLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixHQUFHLEVBQUUsc0NBQXNDO2FBQzlDO1lBQ0Q7Z0JBQ0ksT0FBTyxFQUFFLFVBQVU7Z0JBQ25CLEdBQUcsRUFBRSxtQ0FBbUM7YUFDM0M7WUFDRDtnQkFDSSxPQUFPLEVBQUUsU0FBUztnQkFDbEIsR0FBRyxFQUFFLDZCQUE2QjthQUNyQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxnQkFBZ0I7Z0JBQ3pCLEdBQUcsRUFBRSxnQkFBZ0I7YUFDeEI7WUFDRDtnQkFDSSxPQUFPLEVBQUUsV0FBVztnQkFDcEIsR0FBRyxFQUFFLDRCQUE0QjthQUNwQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixHQUFHLEVBQUUsMkNBQTJDO2FBQ25EO1lBQ0Q7Z0JBQ0ksT0FBTyxFQUFFLFVBQVU7Z0JBQ25CLEdBQUcsRUFBRSxjQUFjO2FBQ3RCO1NBQ0osQ0FBQztRQUVGLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDeEIsS0FBSyxNQUFNLFNBQVMsSUFBSSxVQUFVLEVBQUU7WUFDaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pFLE1BQU0sSUFBSSxHQUFHLEVBQUU7aUJBQ1YsMkJBQTJCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztpQkFDOUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ1YsT0FBTyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUM7aUJBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztpQkFDakUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztZQUNoQixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDbkUsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkQsTUFBTSxRQUFRLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDM0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7Z0JBQ3BCLFFBQVEsSUFBSSxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLEVBQUUsQ0FBQzthQUNiO1lBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2xCLElBQUksaUJBQWlCLEdBQUcsS0FBSyxDQUFDO2dCQUM5QixZQUFZLEdBQUcsS0FBSyxDQUFDO2dCQUNyQixJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO29CQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNoRyxFQUFFLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRWhFLElBQUksU0FBUyxDQUFDLFlBQVk7b0JBQUUsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFFN0MsSUFBSSxTQUFTLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFO29CQUNuRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDcEQsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7b0JBQ3BELE1BQU0sVUFBVSxHQUNaLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQzt3QkFDbkMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssU0FBUyxDQUFDLE9BQU87NEJBQ3hELENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYTs0QkFDOUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNiLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNqRCxNQUFNLGtCQUFrQixHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUM7b0JBQzVDLE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxTQUFTLENBQUM7b0JBRXhDLGFBQWE7b0JBQ2IsSUFBSSxRQUFRLEdBQUcsa0JBQWtCLElBQUksS0FBSyxHQUFHLEVBQUUsRUFBRTt3QkFDN0MsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzt3QkFDakUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLENBQUMsR0FBRyxZQUFZLENBQUM7d0JBRS9ELEVBQUUsQ0FBQyxPQUFPLENBQ04sMEJBQTBCLEVBQzFCLFNBQVMsQ0FBQyxPQUFPLEVBQ2pCLFFBQVEsRUFDUixrQkFBa0IsRUFDbEIsUUFBUSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FDeEIsQ0FBQztxQkFDTDtvQkFDRCxJQUFJLFFBQVEsSUFBSSxrQkFBa0IsSUFBSSxLQUFLLEdBQUcsRUFBRSxFQUFFO3dCQUM5QyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7d0JBQ3pCLFNBQVMsR0FBRyxJQUFJLENBQUM7cUJBQ3BCO29CQUVELGNBQWM7b0JBQ2QsSUFBSSxRQUFRLEdBQUcsU0FBUyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTt3QkFDdkQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzt3QkFDakUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsWUFBWSxDQUFDO3dCQUV0RCxFQUFFLENBQUMsT0FBTyxDQUNOLDBCQUEwQixFQUMxQixTQUFTLENBQUMsT0FBTyxFQUNqQixRQUFRLEVBQ1IsU0FBUyxFQUNULFFBQVEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQ3hCLENBQUM7cUJBQ0w7b0JBQ0QsSUFBSSxRQUFRLEdBQUcsU0FBUyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTt3QkFDdkQsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO3dCQUN6QixTQUFTLEdBQUcsSUFBSSxDQUFDO3FCQUNwQjtvQkFFRCxhQUFhO29CQUNiLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFO3dCQUM3RCxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUM7d0JBQ3pGLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUU7NEJBQ2xDLEVBQUUsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQzs0QkFDakQsU0FBUyxHQUFHLElBQUksQ0FBQzt5QkFDcEI7NkJBQU07NEJBQ0gsUUFBUSxJQUFJLFNBQVMsQ0FBQzt5QkFDekI7cUJBQ0o7b0JBRUQsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxHQUFHLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixFQUFFO3dCQUN2RCxFQUFFLENBQUMsT0FBTyxDQUFDLDRCQUE0QixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFFLENBQUE7d0JBQzFFLElBQUksU0FBUzs0QkFBRSxZQUFZLEdBQUcsS0FBSyxDQUFDO3dCQUNwQyxTQUFTLEdBQUcsS0FBSyxDQUFDO3FCQUNyQjtpQkFDSjtnQkFFRCxNQUFNO2FBQ1Q7U0FDSjtRQUVELElBQUksU0FBUyxFQUFFO1lBQ1gsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBRWhCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkQsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSTtnQkFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFaEUsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUk7Z0JBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWpFLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1QyxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJO2dCQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVoRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbEM7UUFFRCxJQUFJLFlBQVksRUFBRTtZQUNkLG1FQUFtRTtZQUNuRSxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsY0FBYyxDQUFDO2dCQUN4RSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFcEMsOENBQThDO1lBQzlDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNuRSxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRCxNQUFNLFFBQVEsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUUzRCxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUMsb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUM1RCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUM5RCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN6QixLQUFLLElBQUksT0FBTyxDQUFDO2dCQUNqQixPQUFPLEdBQUcsT0FBTyxHQUFHLElBQUksR0FBRyxRQUFRLENBQUM7Z0JBQ3BDLFFBQVEsSUFBSSxJQUFJLENBQUM7YUFDcEI7WUFFRCxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDckUsSUFBSSxTQUFTLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUU7Z0JBQzNDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNsQztTQUNKO1FBRUQsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckUsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUvRixpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV0QixJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRTtZQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVsRixJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEdBQUcsVUFBVSxJQUFJLFlBQVksRUFBRTtZQUNuRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM5RSxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJO2dCQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0UsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSTtnQkFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEU7UUFFRCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTlGLElBQUksa0JBQWtCLEdBQUcsaUJBQWlCLElBQUksS0FBSyxFQUFFO1lBQ2pELEtBQUssR0FBRyxLQUFLLENBQUM7WUFFZCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFFMUIsMEJBQTBCO1lBQzFCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFlBQVksRUFBRTtnQkFDakMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssYUFBYSxDQUFDLENBQUM7Z0JBRTlFLEtBQUssTUFBTSxPQUFPLElBQUksU0FBUyxFQUFFO29CQUM3QixFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDeEI7YUFDSjtTQUNKO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0wsQ0FBQyJ9\",\"filename\":\"controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///40e76324-95fa-456c-8dcd-b34b2df6e5a9\",\"moduleSequenceNumber\":395090},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///30632d12-4636-48c6-aeb1-b57f5e3afb9a\",\"moduleSequenceNumber\":395091},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///79442bdf-8d67-430d-bb7a-903551910420\",\"moduleSequenceNumber\":395090},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f681fb2f-715e-41e0-82e1-24e44c65b984\",\"moduleSequenceNumber\":395090},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///b6703048-0e37-461b-8d9f-9bdf9f33b7d2\",\"moduleSequenceNumber\":395105},{\"filename\":\"controller.js\",\"url\":\"blob:file:///bfced92d-194a-47ce-b6ef-d7414ac99ebb\",\"moduleSequenceNumber\":395123}],\"dependents\":[],\"ramUsage\":65.9,\"server\":\"home\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.stopAction();\\r\\n    while (ns.upgradeHomeRam())\\r\\n        await ns.sleep(10);\\r\\n    while (ns.upgradeHomeCores())\\r\\n        await ns.sleep(10);\\r\\n    const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\");\\r\\n    while (ns.getRunningScript(joinPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n    while (ns.getRunningScript(cctPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, \\\"-ng\\\");\\r\\n    while (ns.getRunningScript(mcpPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    ns.installAugmentations(\\\"controller.js\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJyZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUVoQixPQUFPLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0MsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFakQsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVqRSxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVoRSxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hELE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFaEUsRUFBRSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzdDLENBQUMifQ==\",\"filename\":\"reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"reset.js\",\"url\":\"blob:file:///2956d79c-9afa-4d44-aeb7-f8a497cf9860\",\"moduleSequenceNumber\":395079}],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"home\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.chargeFragment(Number(ns.args[0]), Number(ns.args[1]));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3RhbmVrL2NoYXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSSxFQUFFO1FBQ1QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMxRTtBQUNMLENBQUMifQ==\",\"filename\":\"/stanek/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nimport { doBuyAndSoftenAll, doBackdoors, ALL_FACTIONS } from \\\"lib/util\\\";\\r\\nimport { Augmentation } from \\\"lib/augmentation/augmentation\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"a\\\", false],\\r\\n    [\\\"n\\\", false],\\r\\n    [\\\"g\\\", false], // execute buys\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any,  @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    return [\\\"-a\\\", \\\"-n\\\", \\\"-an\\\"];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n    let sortedFactions;\\r\\n    if (!options.a) {\\r\\n        const player = ns.getPlayer();\\r\\n        const checkFactions = player.factions.concat(ns.checkFactionInvitations());\\r\\n        sortedFactions = checkFactions.sort((a, b) => (ns.getPlayer().currentWorkFactionName === b ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(b) -\\r\\n            ((ns.getPlayer().currentWorkFactionName === a ? ns.getPlayer().workRepGained : 0) + ns.getFactionRep(a)));\\r\\n    }\\r\\n    else {\\r\\n        sortedFactions = ALL_FACTIONS.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n    }\\r\\n    sortedFactions = sortedFactions.filter((a) => a !== \\\"Church of the Machine God\\\");\\r\\n    let allPurchaseableAugs = [];\\r\\n    let topFaction = true;\\r\\n    for (const faction of sortedFactions) {\\r\\n        const augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n            return new Augmentation(ns, name, faction);\\r\\n        })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        const augsToBuy = [];\\r\\n        for (const aug of augs) {\\r\\n            if (aug.isHackUseful(options.n) && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful(options.n) && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n        if (augsToBuy.length === 0 && !topFaction)\\r\\n            continue;\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction));\\r\\n        for (const aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n        topFaction = false;\\r\\n    }\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        const checkName = allPurchaseableAugs[i].name;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === checkName) {\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n            }\\r\\n            else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n    // reorder array to buy dependent augs first and purge augs that cant be bought\\r\\n    // because of a missing dependency, need to loop multiple times until no more dependencies are found\\r\\n    while (true) {\\r\\n        let didDepMove = false;\\r\\n        for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n            const augName = allPurchaseableAugs[i].name;\\r\\n            const depName = allPurchaseableAugs[i].dep;\\r\\n            if (depName === \\\"\\\")\\r\\n                continue;\\r\\n            let foundDep = false;\\r\\n            // check to see if we've already re-organized this dep and it is placed higher in the queue\\r\\n            for (let k = 0; k < i; k++) {\\r\\n                if (allPurchaseableAugs[k].name === depName) {\\r\\n                    foundDep = true;\\r\\n                }\\r\\n            }\\r\\n            if (foundDep)\\r\\n                continue;\\r\\n            const depLoc = allPurchaseableAugs.findIndex((a) => a.name === depName);\\r\\n            if (depLoc >= 0) {\\r\\n                const tmp = allPurchaseableAugs[depLoc];\\r\\n                // remove aug from current place\\r\\n                allPurchaseableAugs.splice(depLoc, 1);\\r\\n                // place it before the main aug\\r\\n                const curLoc = allPurchaseableAugs.findIndex((a) => a.name === augName);\\r\\n                allPurchaseableAugs.splice(curLoc, 0, tmp);\\r\\n                foundDep = true;\\r\\n                didDepMove = true;\\r\\n            }\\r\\n            // if we dont have the dependency queued, remove this aug from the buy list\\r\\n            if (!foundDep) {\\r\\n                ns.tprintf(\\\"WARNING: Unable to find dependency %s:%s in the queue\\\", allPurchaseableAugs[i].name, allPurchaseableAugs[i].dep);\\r\\n                allPurchaseableAugs.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n        if (!didDepMove)\\r\\n            break;\\r\\n    }\\r\\n    if (options.g) {\\r\\n        ns.stopAction();\\r\\n    }\\r\\n    let mult = 1;\\r\\n    const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n    const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n    const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n    let total = Number.MAX_SAFE_INTEGER;\\r\\n    let startAug = 0;\\r\\n    const purchaseableAugs = allPurchaseableAugs.filter((a) => a.name !== \\\"The Red Pill\\\");\\r\\n    while (startAug < purchaseableAugs.length) {\\r\\n        total = 0;\\r\\n        mult = 1;\\r\\n        for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n            total += purchaseableAugs[augIdx].price * mult;\\r\\n            mult *= multmult;\\r\\n        }\\r\\n        if (total < ns.getPlayer().money)\\r\\n            break;\\r\\n        startAug++;\\r\\n    }\\r\\n    let affordableAugs = purchaseableAugs.slice(startAug);\\r\\n    // check if affordableAugs includes deps if they're not already installed\\r\\n    let redoUpdate = false;\\r\\n    for (const aug of affordableAugs) {\\r\\n        const depName = aug.dep;\\r\\n        if (depName === \\\"\\\")\\r\\n            continue;\\r\\n        if (ns.getOwnedAugmentations(true).includes(depName))\\r\\n            continue;\\r\\n        let depAug = affordableAugs.find((a) => a.name === depName);\\r\\n        if (depAug === undefined) {\\r\\n            // dependency is not installed, and not in the list to be installed, pull it from purchaseableAugs\\r\\n            depAug = purchaseableAugs.find((a) => a.name === depName);\\r\\n            if (depAug === undefined) {\\r\\n                ns.tprintf(\\\"ERROR: Unable to find dependency aug in the purchaseableAugs \\\" +\\r\\n                    \\\"array even though it should be there %s | %s\\\");\\r\\n                return;\\r\\n            }\\r\\n            const thisAugIdx = affordableAugs.findIndex((a) => a.name === aug.name);\\r\\n            affordableAugs.splice(thisAugIdx, 0, depAug);\\r\\n            redoUpdate = true;\\r\\n        }\\r\\n    }\\r\\n    if (redoUpdate) {\\r\\n        startAug = 0;\\r\\n        while (startAug < affordableAugs.length) {\\r\\n            total = 0;\\r\\n            mult = 1;\\r\\n            for (let augIdx = startAug; augIdx < affordableAugs.length; augIdx++) {\\r\\n                total += affordableAugs[augIdx].price * mult;\\r\\n                mult *= multmult;\\r\\n            }\\r\\n            if (total < ns.getPlayer().money)\\r\\n                break;\\r\\n            startAug++;\\r\\n        }\\r\\n        affordableAugs = affordableAugs.slice(startAug);\\r\\n    }\\r\\n    //if (affordableAugs.length === 0) return;\\r\\n    ns.tprintf(\\\"============================\\\");\\r\\n    total = 0;\\r\\n    mult = 1;\\r\\n    const startmoney = ns.getPlayer().money;\\r\\n    for (const aug of affordableAugs) {\\r\\n        if (options.g)\\r\\n            ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", aug.name, ns.nFormat(aug.price * mult, \\\"$0.000a\\\"), aug.dep);\\r\\n        total += aug.price * mult;\\r\\n        mult *= multmult;\\r\\n    }\\r\\n    // see how many Neuroflux Governors we can buy\\r\\n    let neurofluxFactionIdx = 0;\\r\\n    while (neurofluxFactionIdx < sortedFactions.length) {\\r\\n        if (ns.gang.inGang() && ns.gang.getGangInformation().faction === sortedFactions[neurofluxFactionIdx]) {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else if (sortedFactions[neurofluxFactionIdx] === \\\"Bladeburners\\\") {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const topFactionForNeuroflux = neurofluxFactionIdx >= sortedFactions.length ? \\\"\\\" : sortedFactions[neurofluxFactionIdx];\\r\\n    const topFactionRep = topFactionForNeuroflux !== \\\"\\\"\\r\\n        ? (ns.getPlayer().currentWorkFactionName === topFactionForNeuroflux ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(topFactionForNeuroflux)\\r\\n        : 0;\\r\\n    let ngPrice = ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\") * (options.g ? 1 : mult);\\r\\n    let ngRepReq = ns.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n    let nfCount = 1;\\r\\n    let neuroError = false;\\r\\n    while (true) {\\r\\n        if (total + ngPrice < startmoney && ngRepReq <= topFactionRep) {\\r\\n            if (options.g) {\\r\\n                const result = ns.purchaseAugmentation(topFactionForNeuroflux, \\\"NeuroFlux Governor\\\");\\r\\n                if (!result) {\\r\\n                    ns.tprintf(\\\"ERROR, could not buy Neuroflux governor\\\");\\r\\n                    neuroError = true;\\r\\n                }\\r\\n            }\\r\\n            ns.tprintf(\\\"%50s - %9s %s\\\", \\\"NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            nfCount++;\\r\\n            total += ngPrice;\\r\\n            ngPrice = ngPrice * 1.14 * multmult;\\r\\n            ngRepReq *= 1.14;\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"%50s - %9s %s)\\\", \\\"(NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const redPillAug = allPurchaseableAugs.find((a) => a.name === \\\"The Red Pill\\\");\\r\\n    if (!neuroError && redPillAug) {\\r\\n        if (options.g)\\r\\n            ns.purchaseAugmentation(redPillAug.faction, redPillAug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", \\\"The Red Pill\\\", ns.nFormat(0, \\\"$0.000a\\\"), ns.nFormat(redPillAug.rep, \\\"0.000a\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"\\\\n%50s - %9s (%s)\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"), ns.nFormat(total + ngPrice, \\\"$0.000a\\\"));\\r\\n    if (options.n && options.g) {\\r\\n        // find a faction with donation favor\\r\\n        const joinedFactions = ns.getPlayer().factions;\\r\\n        let targetFaction = \\\"\\\";\\r\\n        for (const faction of joinedFactions) {\\r\\n            if (ns.getFactionFavor(faction) >= ns.getFavorToDonate()) {\\r\\n                targetFaction = faction;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (targetFaction !== \\\"\\\") {\\r\\n            while (true) {\\r\\n                const aug = new Augmentation(ns, \\\"NeuroFlux Governor\\\", targetFaction);\\r\\n                if (aug.price > ns.getPlayer().money)\\r\\n                    break;\\r\\n                if (aug.purchaseable) {\\r\\n                    if (ns.purchaseAugmentation(aug.faction, aug.name))\\r\\n                        continue;\\r\\n                    else\\r\\n                        break;\\r\\n                }\\r\\n                const repDiff = aug.rep - ns.getFactionRep(targetFaction);\\r\\n                const donateAmt = 1e6 * (repDiff / ns.getPlayer().faction_rep_mult);\\r\\n                if (donateAmt > ns.getPlayer().money)\\r\\n                    break;\\r\\n                ns.donateToFaction(targetFaction, donateAmt);\\r\\n                if (aug.price > ns.getPlayer().money)\\r\\n                    break;\\r\\n                ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n                ns.tprintf(\\\"Donated %s for %d rep and paid %s for a level of NeuroFlux Governor\\\", ns.nFormat(donateAmt, \\\"$0.000a\\\"), repDiff, ns.nFormat(aug.price, \\\"$0.000a\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X2F1Z3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJidXlfYXVncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSw2REFBNkQ7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBWSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTdELDhEQUE4RDtBQUM5RCxJQUFJLE9BQVksQ0FBQztBQUNqQixNQUFNLFVBQVUsR0FBcUQ7SUFDakUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsZUFBZTtDQUNoQyxDQUFDO0FBRUYscUpBQXFKO0FBQ3JKLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBUyxFQUFFLElBQWM7SUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixJQUFJO1FBQ0EsT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDbEM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLElBQUksY0FBd0IsQ0FBQztJQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUNaLE1BQU0s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\",\"filename\":\"buy_augs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///8f134048-d392-4b03-8da8-efe4b8c49583\",\"moduleSequenceNumber\":395090},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///854de1a5-79dd-40a7-9e69-14eccf748f0f\",\"moduleSequenceNumber\":395105},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///edfaae93-61fc-4ec5-90d5-00e73f957bef\",\"moduleSequenceNumber\":395090},{\"filename\":\"buy_augs.js\",\"url\":\"blob:file:///00b29f85-30ff-4989-ac03-9a51895fd8d3\",\"moduleSequenceNumber\":408010}],\"dependents\":[],\"ramUsage\":61.85,\"server\":\"home\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"60.3.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":53.652,\"minDifficulty\":50,\"moneyAvailable\":1507062398452.518,\"moneyMax\":1507062398452.518,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1310,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"47.1.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":57519678465.68627,\"moneyMax\":1409796040825.6438,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1305,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"61.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":15962907556.862745,\"moneyMax\":391247734236.832,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1116,\"serverGrowth\":68}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"14.4.5.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///b2f0fd5d-cb2c-43e6-bc59-b093cb2a8ec1\",\"moduleSequenceNumber\":404287}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///36c8c164-a3f1-4475-b497-d58d03660c23\",\"moduleSequenceNumber\":396982}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///fa8fc193-8313-4542-a29b-4034a84314fe\",\"moduleSequenceNumber\":396485}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":26824429804.90196,\"moneyMax\":657461514826.0283,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":920,\"serverGrowth\":76}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"69.1.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":31307396779.411762,\"moneyMax\":767338156358.1313,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1237,\"serverGrowth\":65}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"83.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":22590571290.19608,\"moneyMax\":553690472798.9235,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":962,\"serverGrowth\":60}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"25.0.8.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///3958494d-d659-4ab1-a0ab-2748b77d4404\",\"moduleSequenceNumber\":396998}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///53332da6-8650-4215-bf8a-aa12e7264f7c\",\"moduleSequenceNumber\":396997}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///a071605d-a1d9-4c8a-8ac8-298d3f656318\",\"moduleSequenceNumber\":396483}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147,\"hackDifficulty\":147,\"minDifficulty\":49,\"moneyAvailable\":18546227637.2549,\"moneyMax\":454564402873.89465,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1073,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"98.3.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":16188234643.137255,\"moneyMax\":396770456939.6386,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1070,\"serverGrowth\":86}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"63.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":26901972894.117645,\"moneyMax\":659362080738.1776,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1274,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"35.7.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///41a8ff92-a02e-415e-89a7-485001727eff\",\"moduleSequenceNumber\":404284}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1612dc95-c7d9-42b9-8770-10deaa7d27da\",\"moduleSequenceNumber\":396979}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///449913eb-0ac4-4a38-afd6-f898a0c8f009\",\"moduleSequenceNumber\":396481}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":1453608453.9215686,\"moneyMax\":35627658184.35217,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1179,\"serverGrowth\":83}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"74.4.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":980392.1568627451,\"moneyMax\":24029219.53094963,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1152,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"9.9.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":992026236.2745098,\"moneyMax\":24314368536.139942,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":999,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"13.9.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":876770400.9803921,\"moneyMax\":21489470612.26451,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":982,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"93.4.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":753262183.3333333,\"moneyMax\":18462308415.032677,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":44}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"35.9.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///d08dc571-3c30-4dfb-9715-3a072eb66a1a\",\"moduleSequenceNumber\":404285}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///2f359ffa-c45d-478b-8275-295ac0d71e1d\",\"moduleSequenceNumber\":396980}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ed9276f3-7d3f-4aad-be4e-815bd90399af\",\"moduleSequenceNumber\":396482}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":616146384.3137255,\"moneyMax\":15101627066.512878,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"46.0.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///da444b1e-bc15-4e3f-91b9-b128ebec0e11\",\"moduleSequenceNumber\":396972}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d70de903-47ea-490a-8af6-2bdcc4f9c80c\",\"moduleSequenceNumber\":396465}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":687484985.2941176,\"moneyMax\":16850122188.581312,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":61}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"21.9.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":929689311.7647059,\"moneyMax\":22786502739.331028,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"36.3.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///dfed6981-52d8-4b42-ae57-1ee3766fe04a\",\"moduleSequenceNumber\":404281}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///4af3a5b9-a59e-49f6-acfd-3c32264e8638\",\"moduleSequenceNumber\":396976}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///63f7dd41-4d3d-45ce-8ec5-5206018bfa23\",\"moduleSequenceNumber\":396464}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":1100106657.8431373,\"moneyMax\":26963398476.547478,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"61.9.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///17a130fb-dba8-42ab-b06a-faca5f4e013b\",\"moduleSequenceNumber\":396969}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///7835ba6f-0505-4fa8-acce-683cd2a68191\",\"moduleSequenceNumber\":396480}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":775348489.2156862,\"moneyMax\":19003639441.560936,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"85.6.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///4db6fd84-ec00-44da-815c-0e0540ab8d03\",\"moduleSequenceNumber\":396966}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b6d210f1-0da8-49bc-a5fe-cf0154239f73\",\"moduleSequenceNumber\":396460}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100.5,\"hackDifficulty\":100.5,\"minDifficulty\":34,\"moneyAvailable\":491549236.2745098,\"moneyMax\":12047775398.885044,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":89}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"31.4.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":849249568.627451,\"moneyMax\":20814940407.53556,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"56.4.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":807402206.862745,\"moneyMax\":19789269776.047672,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":76}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"53.6.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":1018545120.5882353,\"moneyMax\":24964341190.88812,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":923,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"16.6.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///56e97c87-0aaa-478a-859f-712045d03193\",\"moduleSequenceNumber\":396965}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///1ff58421-155d-4997-a750-cbe226066386\",\"moduleSequenceNumber\":396459}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":956965592.1568627,\"moneyMax\":23455039023.45252,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"84.3.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":939783080.3921568,\"moneyMax\":23033899029.21953,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"71.5.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"minDifficulty\":35,\"moneyAvailable\":770673956.862745,\"moneyMax\":18889067570.165318,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"95.6.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///276dc008-2cef-456a-aa4d-cd67a3ea3f10\",\"moduleSequenceNumber\":396961}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ad13885d-1c97-4042-9e63-85c7f27f7705\",\"moduleSequenceNumber\":396478}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":792792773.5294117,\"moneyMax\":19431195429.64244,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"98.6.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":1311819430.3921568,\"moneyMax\":32152437019.415607,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"50.9.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d37441cb-5de5-4a62-bacf-04701166feb4\",\"moduleSequenceNumber\":396967}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///0f874494-9d1f-4a6c-9025-73c1378026a9\",\"moduleSequenceNumber\":396462}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":1662988300.980392,\"moneyMax\":40759517180.89195,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"3.5.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":1097717652.9411764,\"moneyMax\":26904844434.832756,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":779,\"serverGrowth\":70}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"11.3.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":1345179700.9803922,\"moneyMax\":32970090710.303726,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"93.0.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bcd678f6-f09a-4ce3-9b1c-cb990b087a52\",\"moduleSequenceNumber\":396958}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///44031e6a-cb87-4ba7-a2a0-abbdf54918e6\",\"moduleSequenceNumber\":396463}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":984296043.1372548,\"moneyMax\":24124903018.06997,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":783,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"46.1.4.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///fe1ff8f5-34d9-4c2e-9cfa-04cf67ee2014\",\"moduleSequenceNumber\":404282}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f4e106b6-c747-4e68-bc89-edf795fa13ca\",\"moduleSequenceNumber\":396977}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ddec23d3-15da-42dc-bdec-9378fc5fc16b\",\"moduleSequenceNumber\":396476}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":696820141.1764705,\"moneyMax\":17078925028.83506,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":681,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"10.7.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1e889d0b-b190-4fc0-984c-c6552d9a141e\",\"moduleSequenceNumber\":396964}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///4be2ee6f-ae27-44fa-b1e2-ac35a4ad569e\",\"moduleSequenceNumber\":396458}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61.5,\"hackDifficulty\":61.5,\"minDifficulty\":21,\"moneyAvailable\":572907453.9215686,\"moneyMax\":14041849360.82276,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":504,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"3.2.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///8b62a433-0212-44b2-a9da-0ede92d09055\",\"moduleSequenceNumber\":396971}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///a6f15e8e-0b7c-4aec-8628-52a0076e573c\",\"moduleSequenceNumber\":396461}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":593963950.9803921,\"moneyMax\":14557939975.00961,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":574,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"7.7.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d33fdb53-bb78-4882-b314-e18b1db2eea1\",\"moduleSequenceNumber\":396960}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///3d1713a9-da89-4994-a356-38d49cf99476\",\"moduleSequenceNumber\":396474}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":367397884.3137255,\"moneyMax\":9004850105.728563,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":410,\"serverGrowth\":37}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"68.4.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///e9884ff9-4a12-4c94-8752-5b8644591ec1\",\"moduleSequenceNumber\":404279}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c12967fd-e941-480a-b0b7-63cb44cb5092\",\"moduleSequenceNumber\":396975}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///a5eec972-c6fe-4155-b1e3-34994413eafd\",\"moduleSequenceNumber\":396457}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"minDifficulty\":26,\"moneyAvailable\":238047359.80392155,\"moneyMax\":5834494112.841214,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":403,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"78.1.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c71f35cd-5e15-4641-9a17-92a01206efb6\",\"moduleSequenceNumber\":396973}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///352fee28-a9f7-4a8e-a911-17576ade8ae9\",\"moduleSequenceNumber\":396466}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":867098717.6470588,\"moneyMax\":21252419550.17301,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":737,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"25.9.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///580caa05-7c14-40b0-8c8a-e96b2cd888d5\",\"moduleSequenceNumber\":396968}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///3418249a-878d-47f6-94ae-4818baad6366\",\"moduleSequenceNumber\":396470}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":273229839.21568626,\"moneyMax\":6696809784.698193,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":453,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"31.4.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":472920044.11764705,\"moneyMax\":11591177551.903112,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":650,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"12.3.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bbf2c1a9-cc23-4f16-af05-7b5fd79111d7\",\"moduleSequenceNumber\":396959}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b4a54f94-bc4a-46f0-95dc-47fc7210ef6e\",\"moduleSequenceNumber\":396473}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":489614675.49019605,\"moneyMax\":12000359693.387157,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":436,\"serverGrowth\":37}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"22.9.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a0028125-8375-4877-9c4b-a28264c3a5fd\",\"moduleSequenceNumber\":395692}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///2d6ccba8-622c-4232-8927-4a0d66de9902\",\"moduleSequenceNumber\":396456}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64.5,\"hackDifficulty\":64.5,\"minDifficulty\":22,\"moneyAvailable\":168917649.01960784,\"moneyMax\":4140138456.3629375,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":281,\"serverGrowth\":52}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"97.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"computek\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":217615786.2745098,\"moneyMax\":5333720251.82622,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":369,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"64.0.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0e7f6af8-ab34-4efb-ba79-1fb00adfbf8e\",\"moduleSequenceNumber\":396963}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///e4266a16-d8a8-4ae0-b75f-7a9d02c2fa88\",\"moduleSequenceNumber\":396452}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":269607843.1372549,\"moneyMax\":6608035371.011149,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":422,\"serverGrowth\":47}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"81.5.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":78190533.33333333,\"moneyMax\":1916434640.5228755,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":295,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"86.3.1.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a84f3035-91c2-46b9-b18f-971153b3339c\",\"moduleSequenceNumber\":395680}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///6a96a183-6b19-4cf2-a9b4-9789c1aca88d\",\"moduleSequenceNumber\":396446}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1.5,\"hackDifficulty\":1.5,\"minDifficulty\":1,\"moneyAvailable\":68627.45098039215,\"moneyMax\":1682045.3671664742,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"47.7.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///7964a28b-df6a-4340-b2d8-1d3e624f0ef6\",\"moduleSequenceNumber\":395682}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///66ffeac8-35e3-43fa-9590-2b925a80adb4\",\"moduleSequenceNumber\":396448}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1960784.3137254901,\"moneyMax\":48058439.06189926,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"95.2.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e7f3324c-7e3d-46b8-9f5e-29ca1275cc96\",\"moduleSequenceNumber\":395683}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///5153644d-9e04-4c66-afbf-762d058ca832\",\"moduleSequenceNumber\":396449}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2254901.9607843137,\"moneyMax\":55267204.92118416,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"8.3.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///877de4b2-35e1-4dda-a106-8cebf9efa9e2\",\"moduleSequenceNumber\":395684}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d3cf72c3-9471-413f-917e-d2a61b6fcbfd\",\"moduleSequenceNumber\":396453}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":959252.8273740783,\"moneyMax\":60073048.82737408,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"84.2.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///965b5c14-4a51-400e-960f-1120ae78e089\",\"moduleSequenceNumber\":395688}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///e7957af4-a37d-4bb5-8e19-9b6da1557546\",\"moduleSequenceNumber\":396447}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":7352941.176470588,\"moneyMax\":180219146.48212227,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"57.5.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a7028cac-f235-4f38-b4a0-28fa0e146afd\",\"moduleSequenceNumber\":395685}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///a68dd734-2931-4253-8071-78224ac27842\",\"moduleSequenceNumber\":396454}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2696078.431372549,\"moneyMax\":66080353.71011149,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"15.9.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///5957a5e2-1d19-4cf5-897a-85f2d89b26df\",\"moduleSequenceNumber\":395691}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///a496b2b9-9133-4bb3-9b67-8caf5c38e283\",\"moduleSequenceNumber\":396455}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":4901960.784313725,\"moneyMax\":120146097.65474816,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"1.6.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bcf4e99b-7545-42a0-91da-c6689e2190fb\",\"moduleSequenceNumber\":395695}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///176cd3cb-9741-47bc-b31a-d3f3ddfeeeb3\",\"moduleSequenceNumber\":396469}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":44117647.058823526,\"moneyMax\":1081314878.8927336,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"22.3.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f53ee010-a480-4058-af8a-3bb22be400da\",\"moduleSequenceNumber\":395686}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///3ed9e72b-404f-4dd3-8b80-36e6fadeb01e\",\"moduleSequenceNumber\":396467}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":2941176.470588235,\"moneyMax\":72087658.5928489,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"95.7.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///5394b988-b11c-4481-921c-8afdcd8624fa\",\"moduleSequenceNumber\":395687}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///1c75a0ab-6a5e-44b5-b2a9-313bf167581a\",\"moduleSequenceNumber\":396487}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":3921568.6274509802,\"moneyMax\":96116878.12379852,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"74.6.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0b8a7ef4-160b-45cc-9e8b-da33eec6eb2b\",\"moduleSequenceNumber\":395690}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///a9e342b0-659d-45fe-9ed5-1fb5f3cfe45b\",\"moduleSequenceNumber\":396451}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":23529411.76470588,\"moneyMax\":576701268.7427912,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"40.0.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///77ec4b15-defe-4d7a-8a11-22452d480a83\",\"moduleSequenceNumber\":395689}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///f70d1093-add5-442c-bdfa-0b7996ae1554\",\"moduleSequenceNumber\":396450}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":9803921.56862745,\"moneyMax\":240292195.3094963,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"23.1.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6c094f75-2bc8-4b10-8574-296e74e4e5d9\",\"moduleSequenceNumber\":395693}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///972e5f6a-7142-4946-a06d-c4d24f2c8027\",\"moduleSequenceNumber\":396471}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":63228912.74509804,\"moneyMax\":1549728253.5563245,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":206,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"18.1.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":52213906.8627451,\"moneyMax\":1279752619.1849287,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":240,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"2.5.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///fdc2ad99-1676-4a05-af3d-01dab90a0456\",\"moduleSequenceNumber\":395694}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ffe010a4-89ce-4316-8a93-237545b430bf\",\"moduleSequenceNumber\":396488}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":19607843.1372549,\"moneyMax\":480584390.6189926,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"25.5.7.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///e175f94c-b237-47ad-8dd0-02cadc0f5dfd\",\"moduleSequenceNumber\":404286}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///32f5772a-19c9-475f-8de6-86953d493b26\",\"moduleSequenceNumber\":396981}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///8e7e6ee9-2d52-4a2e-b98c-56bcff359e02\",\"moduleSequenceNumber\":396477}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70.5,\"hackDifficulty\":70.5,\"minDifficulty\":24,\"moneyAvailable\":245098039.21568626,\"moneyMax\":6007304882.737409,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":477,\"serverGrowth\":41}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"94.0.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a28ce3f1-bb2d-4564-9f3d-2b41891d9cf0\",\"moduleSequenceNumber\":396970}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///0ad9beaa-a1f5-45ea-9f7a-7253ce4eb40d\",\"moduleSequenceNumber\":396484}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":882352941.1764705,\"moneyMax\":21626297577.854668,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1009,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"36.8.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":441176470.58823526,\"moneyMax\":10813148788.927334,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":784,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"5.8.3.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///849bde14-99df-492e-b16d-247ad227c311\",\"moduleSequenceNumber\":404283}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e0be0a05-86f0-4a85-b30f-afc519c2707d\",\"moduleSequenceNumber\":396978}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///4120b494-5a3c-4aac-90e4-784fe932485a\",\"moduleSequenceNumber\":396479}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":529,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"61.8.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///4315e82c-2f2e-4688-9be8-b871108ad362\",\"moduleSequenceNumber\":396974}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///a03836ad-400d-4abc-9b25-473a790b696b\",\"moduleSequenceNumber\":396475}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":349,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"93.5.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///122f6bcf-7cb9-4322-8622-310e68af35d5\",\"moduleSequenceNumber\":395696}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///060d82cd-6bd5-4909-9838-acf86010047a\",\"moduleSequenceNumber\":396472}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":214,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"13.1.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f7546d19-c475-4194-93e5-064fa58b341c\",\"moduleSequenceNumber\":396962}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///7df5899a-04ea-46e8-ae9b-b348d23fff46\",\"moduleSequenceNumber\":396486}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":521,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"80.4.8.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///82b26e4a-973b-492b-9c17-910a8db15538\",\"moduleSequenceNumber\":395681}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///52f3d17f-b6b5-45ff-a536-336943a96906\",\"moduleSequenceNumber\":396468}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"20.7.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"32.3.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3060,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"83.1.4.3\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"darkweb\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":true,\"ip\":\"73.8.8.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///fc6fb2d4-bd80-46db-a7ab-8df78dca8ee6\",\"moduleSequenceNumber\":404289}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///1167199a-8efd-4938-941b-efbd777c207d\",\"moduleSequenceNumber\":404280}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///282b4b2d-ed70-4f46-a8d0-590c48951776\",\"moduleSequenceNumber\":404288}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///882e0459-b0b6-4893-a0cd-38cc86328fdb\",\"moduleSequenceNumber\":404254}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-0\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":true,\"ip\":\"77.8.5.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///934657fa-37a3-4bcb-8f47-42a44f38dc54\",\"moduleSequenceNumber\":404255}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":true,\"ip\":\"25.0.4.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///e62b20d5-507c-44c3-a1d4-ab5b6ca59d4e\",\"moduleSequenceNumber\":404256}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-2\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":true,\"ip\":\"35.0.9.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///ec58b9a7-ca91-4445-98a9-0f95a9a64e27\",\"moduleSequenceNumber\":404257}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-3\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":true,\"ip\":\"99.2.5.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///32804543-7ab9-4dfd-ab78-353be0c1337f\",\"moduleSequenceNumber\":404258}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":true,\"ip\":\"69.7.9.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///072b9b55-5227-4fd6-87fd-f303ecf607bc\",\"moduleSequenceNumber\":404259}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-5\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":true,\"ip\":\"16.4.6.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///7a914806-3e40-4cd2-88da-afd4db6ddd54\",\"moduleSequenceNumber\":404260}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-6\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":true,\"ip\":\"22.9.3.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///f1b25167-3f09-4a4f-bbba-b5779b3a8972\",\"moduleSequenceNumber\":404261}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-7\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":true,\"ip\":\"61.8.3.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///ba1e5d21-fbbb-455c-a7bf-6fea2dd63aa1\",\"moduleSequenceNumber\":404262}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":true,\"ip\":\"88.1.0.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///5713bacd-a469-450c-929f-7fb0fe7e55a4\",\"moduleSequenceNumber\":404263}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-9\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":true,\"ip\":\"15.5.1.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///ca1f1b67-df0d-496e-901e-5782cccab193\",\"moduleSequenceNumber\":404264}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-10\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":true,\"ip\":\"46.2.1.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///286546b0-8b75-4007-a107-9b335ca3468a\",\"moduleSequenceNumber\":404265}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-11\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":true,\"ip\":\"4.4.6.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///4e362eb3-c000-446e-9aae-07f862be1edf\",\"moduleSequenceNumber\":404266}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-12\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":true,\"ip\":\"38.6.2.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///acb836fb-5324-4028-9892-23b370481a84\",\"moduleSequenceNumber\":404267}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-13\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":true,\"ip\":\"22.6.3.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///7182d138-9242-4f0e-b469-1e3b9b99dcba\",\"moduleSequenceNumber\":404268}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-14\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":true,\"ip\":\"68.6.8.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///e51ae856-b9bc-4881-bf91-40a7ae4118ec\",\"moduleSequenceNumber\":404269}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-15\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":true,\"ip\":\"77.1.2.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///b1c338c9-3b27-4e1a-8010-2a8279a1005f\",\"moduleSequenceNumber\":404270}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-16\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":true,\"ip\":\"18.0.2.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///ee7fd094-8181-4851-9d7d-d2138186ba15\",\"moduleSequenceNumber\":404271}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-17\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":true,\"ip\":\"56.7.3.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///0df06666-6ce6-42ad-820b-f677f31d66cc\",\"moduleSequenceNumber\":404272}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-18\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":true,\"ip\":\"72.3.3.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///3584d948-749b-4533-a0d3-7c574712eedd\",\"moduleSequenceNumber\":404273}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-19\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":true,\"ip\":\"40.8.9.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///4b3f6ae7-55f3-43e4-9c14-baaed1661cfa\",\"moduleSequenceNumber\":404274}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-20\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":true,\"ip\":\"92.4.0.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///07a86b14-91c4-404c-84bf-dbd797126625\",\"moduleSequenceNumber\":404275}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-21\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":true,\"ip\":\"69.3.8.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///d8ae3ac5-f1d9-4baa-b2d0-cf7e78364b38\",\"moduleSequenceNumber\":404276}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-22\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":true,\"ip\":\"50.4.5.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///2e361522-1789-4c96-b26e-b28839fd28a6\",\"moduleSequenceNumber\":404277}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-23\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":true,\"ip\":\"44.3.3.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-24\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///f881a159-99c8-4e6c-a21f-40176a8c94bc\",\"moduleSequenceNumber\":404278}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-24\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":10.090243186688415}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":314.3627,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":23588.570463222397}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":130.8553,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":13141.980469907996}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":105.3743,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":11691.414663735368}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":10.1743,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":1265.3181637619532}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":58.5346,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":59.6354,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":30.0063,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":10.1743,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1265.3181637619532}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":16.0926,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":60.4581,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":11846.542006669917}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":67.1814,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":7345.503629104376}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"test\":\"run test.js\",\"crawl\":\"run crawl.js\",\"hack\":\"run hack.js\",\"ll\":\"run ll.js\",\"ka\":\"run ka.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe\",\"trace\":\"run trace.js\",\"ss\":\"run services/server.js\",\"kss\":\"kill /services/server.js\",\"exp\":\"run exp.js\",\"soften\":\"run soften.js\",\"cct\":\"run cct.js\",\"bsa\":\"run buy_server_all.js\",\"share\":\"run share.js\",\"c\":\"run clock.js\",\"mcp\":\"run mcp.js\",\"join\":\"run join.js\",\"exp0\":\"run exp.js --reserve 0\",\"cb\":\"run crawl.js -bs\",\"crime\":\"run crime.js\",\"ascend\":\"run ascend.js\",\"controller\":\"run controller.js\",\"reset\":\"run reset.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"16","AllGangsSave":"","LastExportBonus":"1651709042547","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}