{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":5947,\"hp\":10,\"max_hp\":10,\"strength\":4,\"defense\":5,\"dexterity\":4,\"agility\":2,\"charisma\":3,\"intelligence\":383,\"hacking_chance_mult\":4.959057340640713,\"hacking_speed_mult\":4.851304549024224,\"hacking_money_mult\":16.088500161145316,\"hacking_grow_mult\":7.5189413887187895,\"hacking_exp\":13037604934.169363,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":84024607.77752827,\"hacking_mult\":13.035295982207732,\"strength_mult\":5.217715669977196,\"defense_mult\":6.352001685189631,\"dexterity_mult\":5.2863698235295296,\"agility_mult\":3.165870058407911,\"charisma_mult\":3.979950930569945,\"hacking_exp_mult\":19.221875661237465,\"strength_exp_mult\":4.576943570155436,\"defense_exp_mult\":4.576943570155436,\"dexterity_exp_mult\":4.576943570155436,\"agility_exp_mult\":4.576943570155436,\"charisma_exp_mult\":3.814119641796197,\"company_rep_mult\":5.034637927170981,\"faction_rep_mult\":3.814119641796197,\"money\":57985275441885.664,\"city\":\"Volhaven\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Daedalus\"],\"factionInvitations\":[\"Sector-12\",\"CyberSec\",\"NiteSec\",\"The Black Hand\",\"Chongqing\",\"Tian Di Hui\",\"New Tokyo\",\"Ishima\",\"Aevum\",\"Volhaven\",\"BitRunners\"],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":85},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":9,\"n\":12}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":3.316625775474954,\"crime_success_mult\":3.768892926676084,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"Daedalus\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":2.41260085192349,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":60.46843289419812,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":10895.305447285975,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":272885.4226480281,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":903200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":3.316625775474954,\"hacknet_node_money_mult\":3.015114341340867,\"hacknet_node_purchase_cost_mult\":0.3056566876468242,\"hacknet_node_ram_cost_mult\":0.3056566876468242,\"hacknet_node_core_cost_mult\":0.3056566876468242,\"hacknet_node_level_cost_mult\":0.3056566876468242,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":12,\"entropy\":0,\"lastUpdate\":1652110482935,\"lastSave\":1652110482715,\"totalPlaytime\":1786004600,\"playtimeSinceLastAug\":1633400,\"playtimeSinceLastBitnode\":46195200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":58420871474404,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":57985274441885.664,\"work\":0,\"servers\":-435315832518.3346,\"other\":-281200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":2510265797.617975,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":458581280550727,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":107470754441246.69,\"work\":0,\"servers\":-252185056954114.84,\"other\":-17031123667954.262,\"augmentations\":-81896855753209.5}},\"scriptProdSinceLastAug\":58420871474404,\"exploits\":[\"Bypass\",\"PrototypeTampering\",\"Unclickable\",\"UndocumentedFunctionCall\",\"TimeCompression\",\"RealityAlteration\",\"N00dles\",\"YoureNotMeantToAccessThis\",\"TrueRecursion\",\"INeedARainbow\",\"EditSaveFile\"],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1650324486138},{\"ID\":\"NS2\",\"unlockedOn\":1650324546145},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1650324546160},{\"ID\":\"TOR\",\"unlockedOn\":1650391063083},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1650391183084},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1650391483076},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1650391903083},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1650392023089},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1650393523078},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1650393523090},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1650401983076},{\"ID\":\"NITESEC\",\"unlockedOn\":1650404563078},{\"ID\":\"TRAVEL\",\"unlockedOn\":1650404623079},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1650411943077},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1650491553987},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1650497974019},{\"ID\":\"DONATION\",\"unlockedOn\":1650557917705},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1650558457734},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1650570937733},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1650579229114},{\"ID\":\"SF1.1\",\"unlockedOn\":1650583669108},{\"ID\":\"FAST_BN\",\"unlockedOn\":1650689077088},{\"ID\":\"SF5.1\",\"unlockedOn\":1650689096885},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1650918820305},{\"ID\":\"WORKOUT\",\"unlockedOn\":1650924940304},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1650926358224},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1650929298223},{\"ID\":\"INTELLIGENCE_255\",\"unlockedOn\":1650931195995},{\"ID\":\"SF4.1\",\"unlockedOn\":1650990161290},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1651401489555},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1651403049557},{\"ID\":\"SF12.1\",\"unlockedOn\":1651717107037},{\"ID\":\"BYPASS\",\"unlockedOn\":1651863672680},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1651863672689},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1651863672691},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1651863672692},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1651863672694},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1651863672696},{\"ID\":\"N00DLES\",\"unlockedOn\":1651863672697},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1651863672699},{\"ID\":\"DEVMENU\",\"unlockedOn\":1651863672701},{\"ID\":\"RAINBOW\",\"unlockedOn\":1651863672704},{\"ID\":\"TRUE_RECURSION\",\"unlockedOn\":1651863672706}],\"terminalCommandHistory\":[\"run buy_augs.js -a\",\"run fl1ght.exe\",\"run buy_augs.js -an\",\"controller\",\"nano controller.js\",\"controller\",\"run fli\",\"run fl1ght.exe\",\"test\",\"ka\",\"ps\",\"controller\",\"hack --limit 10\",\"c\",\"cb\",\"bsa\",\"cb\",\"ka\",\"controller\",\"ka\",\"bsa\",\"bsa -e\",\"controller\",\"hack --limit 19\",\"ka\",\"hack --limit 10\",\"c\",\"ka\",\"controller\",\"ll\",\"nano controller.js\",\"ll\",\"c\",\"ps\",\"controller\",\"ps\",\"ka\",\"c\",\"controller\",\"test\",\"test --tail\",\"nano test\",\"nano test.js\",\"test\",\"join -c\",\"reset\",\"ka\",\"controller\",\"free\",\"run fl1ght.exe\"],\"identifier\":\"172bb4264c21a4\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"54.3.1.6\",\"isConnectedTo\":true,\"maxRam\":1048576,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"HTTPWorm.exe\",\"fl1ght.exe\",\"SQLInject.exe\"],\"ramUsed\":1048446.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":81347332.44409382,\"onlineMoneyMade\":1803158554020,\"onlineRunningTime\":1633.4100000002345,\"pid\":1,\"ramUsage\":69.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///d3f57bd6-11cf-4899-bc9a-a1b36da7d574\",\"moduleSequenceNumber\":1546602},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///9e7d1369-0df5-4bd9-b513-b4584900d4fa\",\"moduleSequenceNumber\":1546603},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///6e6a00ce-c8d8-4ad0-b145-2cea51692ee0\",\"moduleSequenceNumber\":1546602},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///cf401f00-ebc0-4317-9081-4114ba095759\",\"moduleSequenceNumber\":1546602},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///b591ae79-590c-430d-9ab4-729d94095fc0\",\"moduleSequenceNumber\":1546617},{\"filename\":\"controller.js\",\"url\":\"blob:file:///555070f5-64fb-470d-851b-32330a390c16\",\"moduleSequenceNumber\":1546636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"clock.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1633.2100000002345,\"pid\":2,\"ramUsage\":3.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f1dfa2cd-e930-4d80-bc10-6443454d8777\",\"moduleSequenceNumber\":1552782},{\"filename\":\"clock.js\",\"url\":\"blob:file:///0910d275-75c8-42ae-9ef4-ebecbefaee69\",\"moduleSequenceNumber\":1552816}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--limit\",10,\"--rounds\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53732165.0829877,\"onlineMoneyMade\":56617712920384,\"onlineRunningTime\":903.0100000000684,\"pid\":526,\"ramUsage\":9.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///762aa203-641e-4701-9f9f-916945e3a4d6\",\"moduleSequenceNumber\":1567686},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///934e0f50-2959-417d-adb6-1a23079cd89a\",\"moduleSequenceNumber\":1567687},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///766d9623-5a46-4137-b452-5b93c3dc6694\",\"moduleSequenceNumber\":1567686},{\"filename\":\"hack.js\",\"url\":\"blob:file:///18f230eb-11ba-4793-b413-1536210048e5\",\"moduleSequenceNumber\":1567722}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114194],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":540,\"ramUsage\":4,\"server\":\"home\",\"threads\":262091,\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///2b4364da-174b-4e2b-90db-2f55b84ebfaa\",\"moduleSequenceNumber\":1568284}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///2b4364da-174b-4e2b-90db-2f55b84ebfaa\",\"moduleSequenceNumber\":1568284}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":1568284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Slow hack using minimal footprint\\r\\nimport { allHosts, HACKJS, GROWJS, WEAKENJS } from \\\"/lib/util\\\";\\r\\nasync function doWeaken(ns, targetHostname, ownedHostnames) {\\r\\n    // check to see if we need to weaken the server\\r\\n    const targetSecurityLevel = Math.max(ns.getServerMinSecurityLevel(targetHostname) * 1.15, ns.getServerMinSecurityLevel(targetHostname) + 3);\\r\\n    if (ns.getServerSecurityLevel(targetHostname) > targetSecurityLevel) {\\r\\n        while (ns.getServerSecurityLevel(targetHostname) > ns.getServerMinSecurityLevel(targetHostname)) {\\r\\n            ns.tprintf(\\\"Weaken %s: %f > %f\\\", targetHostname, ns.getServerSecurityLevel(targetHostname), targetSecurityLevel);\\r\\n            let waitPID = 0;\\r\\n            for (const hostname of ownedHostnames) {\\r\\n                const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n                const threads = Math.floor(availableRam / ns.getScriptRam(WEAKENJS));\\r\\n                if (threads <= 0)\\r\\n                    continue;\\r\\n                waitPID = ns.exec(WEAKENJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel());\\r\\n            }\\r\\n            while (ns.getRunningScript(waitPID) !== null) {\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            // wait a little bit longer to make sure everything else finished too\\r\\n            await ns.sleep(500);\\r\\n        }\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished weakening %s (%f / %f)\\\", targetHostname, ns.getServerMinSecurityLevel(targetHostname), ns.getServerSecurityLevel(targetHostname));\\r\\n}\\r\\nasync function doGrow(ns, targetHostname, ownedHostnames) {\\r\\n    while (ns.getServerMoneyAvailable(targetHostname) < ns.getServerMaxMoney(targetHostname)) {\\r\\n        ns.tprintf(\\\"Grow %s: %s < %s\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(targetHostname), \\\"$0.000a\\\"));\\r\\n        let waitPID = 0;\\r\\n        for (const hostname of ownedHostnames) {\\r\\n            const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n            const threads = Math.floor(availableRam / ns.getScriptRam(GROWJS));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            waitPID = ns.exec(GROWJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel());\\r\\n        }\\r\\n        while (ns.getRunningScript(waitPID) !== null) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        // wait a little bit longer to make sure everything else finished too\\r\\n        await ns.sleep(500);\\r\\n        await doWeaken(ns, targetHostname, ownedHostnames);\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished growing %s (%s / %s)\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(targetHostname), \\\"$0.000a\\\"));\\r\\n}\\r\\nasync function doHack(ns, targetHostname, ownedHostnames) {\\r\\n    const targetMoneyAvailable = ns.getServerMaxMoney(targetHostname) * 0.8;\\r\\n    while (ns.getServerMoneyAvailable(targetHostname) > targetMoneyAvailable) {\\r\\n        ns.tprintf(\\\"Hack %s %s > %s\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(targetMoneyAvailable, \\\"$0.000a\\\"));\\r\\n        let waitPID = 0;\\r\\n        for (const hostname of ownedHostnames) {\\r\\n            const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n            const threads = Math.floor(availableRam / ns.getScriptRam(HACKJS));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            waitPID = ns.exec(HACKJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel(), \\\"--hackLvlEffect\\\", ns.getHackingLevel());\\r\\n        }\\r\\n        while (ns.getRunningScript(waitPID) !== null) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        // wait a little bit longer to make sure everything else finished too\\r\\n        await ns.sleep(500);\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished hacking %s\\\", targetHostname);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    const targetHostname = flags[\\\"target\\\"];\\r\\n    if (!ns.serverExists(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Server does not exist\\\", targetHostname);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.hasRootAccess(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetHostname);\\r\\n        return;\\r\\n    }\\r\\n    if (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetHostname, ns.getHackingLevel(), ns.getServerRequiredHackingLevel(targetHostname));\\r\\n        return;\\r\\n    }\\r\\n    // collect all available ram\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const ownedHostnames = allHostnames.filter((a) => ns.hasRootAccess(a));\\r\\n    // trasfer hacking scripts to the hosts\\r\\n    for (const hostname of ownedHostnames.filter((a) => a !== \\\"home\\\")) {\\r\\n        await ns.scp(HACKJS, hostname);\\r\\n        await ns.scp(GROWJS, hostname);\\r\\n        await ns.scp(WEAKENJS, hostname);\\r\\n    }\\r\\n    while (true) {\\r\\n        await doWeaken(ns, targetHostname, ownedHostnames);\\r\\n        await doGrow(ns, targetHostname, ownedHostnames);\\r\\n        await doHack(ns, targetHostname, ownedHostnames);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja18xLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrXzEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBSWpELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFL0QsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFNLEVBQUUsY0FBc0IsRUFBRSxjQUF3QjtJQUM1RSwrQ0FBK0M7SUFDL0MsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUNoQyxFQUFFLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxFQUNuRCxFQUFFLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUNuRCxDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEdBQUcsbUJBQW1CLEVBQUU7UUFDakUsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQzdGLEVBQUUsQ0FBQyxPQUFPLENBQ04sb0JBQW9CLEVBQ3BCLGNBQWMsRUFDZCxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEVBQ3pDLG1CQUFtQixDQUN0QixDQUFDO1lBQ0YsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLEtBQUssTUFBTSxRQUFRLElBQUksY0FBYyxFQUFFO2dCQUNuQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbEYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlB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\",\"filename\":\"/archive/hack_1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"home\",\"moduleSequenceNumber\":1567679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///989e8d13-743e-4721-b315-668e3a02af0a\",\"moduleSequenceNumber\":1568710}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1568710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///7b5c31d3-da4d-424c-b564-07cdae25ba2b\",\"moduleSequenceNumber\":1568310}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1568310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nconst findProp = function (propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n};\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet playerProp;\\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nexport async function main(ns) {\\r\\n    playerProp = findProp(\\\"player\\\");\\r\\n    playerProp.giveExploit(\\\"Bypass\\\");\\r\\n    playerProp.giveExploit(\\\"PrototypeTampering\\\");\\r\\n    playerProp.giveExploit(\\\"Unclickable\\\");\\r\\n    playerProp.giveExploit(\\\"UndocumentedFunctionCall\\\");\\r\\n    playerProp.giveExploit(\\\"TimeCompression\\\");\\r\\n    playerProp.giveExploit(\\\"RealityAlteration\\\");\\r\\n    playerProp.giveExploit(\\\"N00dles\\\");\\r\\n    playerProp.giveExploit(\\\"YoureNotMeantToAccessThis\\\");\\r\\n    playerProp.giveExploit(\\\"TrueRecursion\\\");\\r\\n    playerProp.giveExploit(\\\"INeedARainbow\\\");\\r\\n    playerProp.giveExploit(\\\"EditSaveFile\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsOERBQThEO0FBQzlELE1BQU0sUUFBUSxHQUFHLFVBQVUsUUFBZ0I7SUFDdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTztZQUFFLFNBQVM7UUFDdkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRyxJQUFJLEtBQUssQ0FBQyxRQUFRLFlBQVksS0FBSztZQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO2dCQUFFLElBQUksS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkg7QUFDTCxDQUFDLENBQUM7QUFFRiw4REFBOEQ7QUFDOUQsSUFBSSxVQUFlLENBQUM7QUFHcEIsNkRBQTZEO0FBQzdELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsVUFBVSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxVQUFVLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLFVBQVUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUM3QyxVQUFVLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RDLFVBQVUsQ0FBQyxXQUFXLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUNuRCxVQUFVLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDMUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzVDLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEMsVUFBVSxDQUFDLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQ3BELFVBQVUsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDeEMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN4QyxVQUFVLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzNDLENBQUMifQ==\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///10fe2af7-05da-45c5-ad25-3b731cc01ebf\",\"moduleSequenceNumber\":3027}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1567682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///82d1c18a-59e8-4465-b27d-be6c8178b4af\",\"moduleSequenceNumber\":1568309}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1568309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///7c284479-3779-4dbf-bfbe-eccb9c7324d7\",\"moduleSequenceNumber\":1568634}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":1568634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZV9oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VfaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=\",\"filename\":\"/lib/service_helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1567685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const CONSTSHAREJS = \\\"/lib/exec/const_share.js\\\";\\r\\nexport const CONSTWEAKENJS = \\\"/lib/exec/const_weaken.js\\\";\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.printf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args);\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    try {\\r\\n        ns.brutessh(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.ftpcrack(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.httpworm(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.relaysmtp(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.sqlinject(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.singularity.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.singularity.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.singularity.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.singularity.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.singularity.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.singularity.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport function canBackdoor(ns, hostname) {\\r\\n    const server = ns.getServer(hostname);\\r\\n    if (server.backdoorInstalled)\\r\\n        return true;\\r\\n    if (server.requiredHackingSkill > ns.getHackingLevel()) {\\r\\n        return false;\\r\\n    }\\r\\n    if (!server.hasAdminRights && !softenServer(ns, hostname)) {\\r\\n        return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport async function doBackdoor(ns, hostname) {\\r\\n    const hosts = mapHosts(ns);\\r\\n    const trail = hosts[hostname];\\r\\n    const server = ns.getServer(hostname);\\r\\n    if (server.backdoorInstalled)\\r\\n        return true;\\r\\n    if (server.requiredHackingSkill > ns.getHackingLevel()) {\\r\\n        llog(ns, \\\"Unable to backdoor server %s - Hacking level %d < %d\\\", hostname, ns.getHackingLevel(), server.requiredHackingSkill);\\r\\n        return false;\\r\\n    }\\r\\n    if (!server.hasAdminRights && !softenServer(ns, hostname)) {\\r\\n        llog(ns, \\\"Unable to backdoor server %s - Unable to obtain admin rights\\\", hostname, ns.getHackingLevel(), server.requiredHackingSkill);\\r\\n        return false;\\r\\n    }\\r\\n    for (const hostHopName of trail) {\\r\\n        ns.singularity.connect(hostHopName);\\r\\n    }\\r\\n    await ns.singularity.installBackdoor();\\r\\n    ns.singularity.connect(\\\"home\\\");\\r\\n    return true;\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\"];\\r\\n    //const targetHosts = [\\\"megacorp\\\",\\\"fulcrumassets\\\",\\\"kuai-gong\\\",\\\"fulcrumtech\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"omnitek\\\",\\\"clarkinc\\\"]\\r\\n    for (const hostname of targetHosts) {\\r\\n        await doBackdoor(ns, hostname);\\r\\n    }\\r\\n    // for (const hostname of allHosts(ns)) {\\r\\n    //     if (hostname === \\\"w0r1d_d43m0n\\\") continue;\\r\\n    //     await doBackdoor(ns, hostname);\\r\\n    // }\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRywwQkFBMEIsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsMkJBQTJCLENBQUM7QUFFekQsTUFBTSxVQUFVLElBQUksQ0FBQyxFQUFNLEVBQUUsR0FBVyxFQUFFLEdBQUcsSUFBeUI7SUFDbEUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDakQsSUFBSTtRQUNBLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDekI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUU7S0FDTDtJQUVELElBQUk7UUFDQSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3pCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFO0tBQ0w7SUFFRCxJQUFJO1FBQ0EsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN6QjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsRUFBRTtLQUNMO0lBRUQsSUFBSTtRQUNBLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDMUI7SUFBQyxPQUFP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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.75,\"server\":\"home\",\"moduleSequenceNumber\":1567686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Inspiration taken from https://github.com/jjclark1982/bitburner-scripts/blob/main/service/servers.js */\\r\\nimport { allHosts } from \\\"/lib/util\\\";\\r\\nlet uid = 0;\\r\\nvar CodingContractRewardType;\\r\\n(function (CodingContractRewardType) {\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"FactionReputation\\\"] = 0] = \\\"FactionReputation\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"FactionReputationAll\\\"] = 1] = \\\"FactionReputationAll\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"CompanyReputation\\\"] = 2] = \\\"CompanyReputation\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"Money\\\"] = 3] = \\\"Money\\\";\\r\\n})(CodingContractRewardType || (CodingContractRewardType = {}));\\r\\nexport function getScriptExecutionArg(args, arg) {\\r\\n    const argIndex = args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1)\\r\\n        return args[argIndex + 1];\\r\\n    return;\\r\\n}\\r\\nfunction timingSearch(server, timingFunction, ms, start, end, precision) {\\r\\n    const mid = (start + end) / 2;\\r\\n    const midMs = timingFunction(server.hostname, mid);\\r\\n    if (precision && midMs - precision < ms && midMs + precision > ms)\\r\\n        return mid;\\r\\n    else if (Math.round(ms) === Math.round(midMs))\\r\\n        return mid;\\r\\n    if (midMs > ms)\\r\\n        return timingSearch(server, timingFunction, ms, mid, end, precision);\\r\\n    return timingSearch(server, timingFunction, ms, start, mid, precision);\\r\\n}\\r\\nexport class ServerService {\\r\\n    ns;\\r\\n    allHostsCache = [];\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n    loadServer(hostname) {\\r\\n        return new Server(this.ns, hostname);\\r\\n    }\\r\\n    getAllServers(homeReserve) {\\r\\n        const allServers = {};\\r\\n        for (const hostname of this.getAllHosts()) {\\r\\n            allServers[hostname] = this.loadServer(hostname);\\r\\n        }\\r\\n        if (homeReserve && homeReserve > 0)\\r\\n            allServers[\\\"home\\\"].reservedRam = homeReserve;\\r\\n        return allServers;\\r\\n    }\\r\\n    getScriptableServers(homeReserve) {\\r\\n        return Object.values(this.getAllServers(homeReserve)).filter((server) => server.canRunScripts());\\r\\n    }\\r\\n    getHackableServers(hacking) {\\r\\n        return Object.values(this.getAllServers()).filter((server) => server.canBeHacked(hacking));\\r\\n    }\\r\\n    getAllHosts(force = false) {\\r\\n        if (!this.allHostsCache.length || force) {\\r\\n            this.allHostsCache = allHosts(this.ns);\\r\\n        }\\r\\n        return this.allHostsCache;\\r\\n    }\\r\\n}\\r\\nexport class Server {\\r\\n    // base server memebers\\r\\n    contracts = [];\\r\\n    cpuCores = 1;\\r\\n    ftpPortOpen = false;\\r\\n    hasAdminRights = false;\\r\\n    hostname = \\\"\\\";\\r\\n    httpPortOpen = false;\\r\\n    ip = \\\"\\\";\\r\\n    isConnectedTo = false;\\r\\n    maxRam = 0;\\r\\n    messages = [];\\r\\n    organizationName = \\\"\\\";\\r\\n    programs = [];\\r\\n    ramUsed = 0;\\r\\n    runningScripts = [];\\r\\n    scripts = [];\\r\\n    serversOnNetwork = [];\\r\\n    smtpPortOpen = false;\\r\\n    sqlPortOpen = false;\\r\\n    sshPortOpen = false;\\r\\n    textFiles = [];\\r\\n    purchasedByPlayer = false;\\r\\n    // server members\\r\\n    backdoorInstalled = false;\\r\\n    baseDifficulty = 1;\\r\\n    hackDifficulty = 1;\\r\\n    minDifficulty = 1;\\r\\n    moneyAvailable = 0;\\r\\n    moneyMax = 0;\\r\\n    numOpenPortsRequired = 5;\\r\\n    openPortCount = 0;\\r\\n    requiredHackingSkill = 1;\\r\\n    serverGrowth = 1;\\r\\n    suppression = 0;\\r\\n    activeSuppressionThreads = [];\\r\\n    suppressionIntervalID = null;\\r\\n    suppressionLastUpdateTime = 0;\\r\\n    // hacknet server members\\r\\n    cache = 1;\\r\\n    cores = 1;\\r\\n    hashCapacity = 0;\\r\\n    hashRate = 0;\\r\\n    level = 1;\\r\\n    onlineTimeSeconds = 0;\\r\\n    totalHashesGenerated = 0;\\r\\n    // my server members\\r\\n    ns;\\r\\n    reservedRam = 0;\\r\\n    reservedScripts = [];\\r\\n    constructor(ns, data) {\\r\\n        this.ns = ns;\\r\\n        if (typeof data === \\\"string\\\") {\\r\\n            this.hostname = data;\\r\\n            data = undefined;\\r\\n        }\\r\\n        this.reload(data);\\r\\n    }\\r\\n    reload(data) {\\r\\n        data ||= this.ns.getServer(this.hostname);\\r\\n        Object.assign(this, data);\\r\\n        return this;\\r\\n    }\\r\\n    canRunScripts() {\\r\\n        return this.hasAdminRights && this.maxRam > 0;\\r\\n    }\\r\\n    canBeHacked(hacking) {\\r\\n        return this.hasAdminRights && this.moneyMax > 0 && this.requiredHackingSkill <= hacking;\\r\\n    }\\r\\n    reservedScriptRam() {\\r\\n        return this.reservedScripts.reduce((tally, script) => tally + script.ram, 0);\\r\\n    }\\r\\n    reserveScript(filename, ram, threads, args = []) {\\r\\n        const totalRam = ram * threads;\\r\\n        const offset = Number(getScriptExecutionArg(args, \\\"--offset\\\"));\\r\\n        const batchID = Number(getScriptExecutionArg(args, \\\"--batchID\\\"));\\r\\n        if (this.availableRam() >= totalRam) {\\r\\n            this.reservedScripts.push({\\r\\n                filename: filename,\\r\\n                hostname: this.hostname,\\r\\n                ram: totalRam,\\r\\n                threads: threads,\\r\\n                args: args.concat(\\\"--uid\\\", uid++),\\r\\n                offset: offset,\\r\\n                batchID: batchID\\r\\n            });\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    popReservedScripts() {\\r\\n        const tmp = [...this.reservedScripts];\\r\\n        this.reservedScripts = [];\\r\\n        return tmp;\\r\\n    }\\r\\n    clearReservedScripts() {\\r\\n        this.reservedScripts = [];\\r\\n    }\\r\\n    availableRam() {\\r\\n        return Math.max(0, this.maxRam - this.ramUsed - this.reservedRam - this.reservedScriptRam());\\r\\n    }\\r\\n    threadsAvailable(threadSize = 1.75) {\\r\\n        return Math.floor(this.availableRam() / threadSize) || 0;\\r\\n    }\\r\\n    hackTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackTime(this, player, hackOverride);\\r\\n        return this.ns.getHackTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    hackAnalyze(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackPercent(this, player, hackOverride);\\r\\n        return this.ns.hackAnalyze(this.hostname, hackOverride);\\r\\n    }\\r\\n    hackLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getHackTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getHackTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getHackTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    hackAmountSecurity(threads = 1) {\\r\\n        //return this.ns.hackAnalyzeSecurity(threads);\\r\\n        return 0.002 * threads;\\r\\n    }\\r\\n    growthAmount(player, growMult, cores) {\\r\\n        growMult ||= this.moneyMax / this.moneyAvailable;\\r\\n        growMult = Math.max(1, growMult);\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.numCycleForGrowth(this, growMult, player, cores);\\r\\n        return this.ns.growthAnalyze(this.hostname, growMult, cores);\\r\\n    }\\r\\n    growPercent(threads, player, cores) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growPercent(this, threads, player, cores);\\r\\n        return 0;\\r\\n    }\\r\\n    growthAmountSecurity(threads = 1) {\\r\\n        //return this.ns.growthAnalyzeSecurity(threads);\\r\\n        return 0.004 * threads;\\r\\n    }\\r\\n    growTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growTime(this, player, hackOverride);\\r\\n        return this.ns.getGrowTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    growLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getGrowTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getGrowTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getGrowTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    weakenTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.weakenTime(this, player, hackOverride);\\r\\n        return this.ns.getWeakenTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n    weakenAmount(threads = 1, cores) {\\r\\n        return this.ns.weakenAnalyze(threads, cores);\\r\\n        //return 0.05 * threads;\\r\\n    }\\r\\n    weakenLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.weakenLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getWeakenTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getWeakenTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getWeakenTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    simGrowBatch(growThreads, weakenThreads, player) {\\r\\n        this.moneyAvailable = Math.min(this.growPercent(growThreads, player) * this.moneyAvailable, this.moneyMax);\\r\\n        this.hackDifficulty += this.growthAmountSecurity(growThreads);\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenThreads), this.minDifficulty);\\r\\n    }\\r\\n    hackAmount(hackThreads, hackOverride, player) {\\r\\n        return Math.min(this.hackAnalyze(hackOverride, player) * hackThreads, 1) * this.moneyAvailable;\\r\\n    }\\r\\n    simHackBatch(hackThreads, hackOverride, weakenHackThreads, growThreads, weakenGrowThreads, player) {\\r\\n        const hackAmount = this.hackAmount(hackThreads, hackOverride, player);\\r\\n        this.moneyAvailable = Math.max(this.moneyAvailable - hackAmount, Math.round(this.moneyMax * 0.01));\\r\\n        this.hackDifficulty += this.hackAmountSecurity(hackThreads);\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenHackThreads), this.minDifficulty);\\r\\n        this.simGrowBatch(growThreads, weakenGrowThreads, player);\\r\\n        return hackAmount;\\r\\n    }\\r\\n    simHack(hackThreads, hackOverride, player) {\\r\\n        const hackAmount = this.hackAmount(hackThreads, hackOverride, player);\\r\\n        this.moneyAvailable = Math.max(this.moneyAvailable - hackAmount, Math.round(this.moneyMax * 0.01));\\r\\n        this.hackDifficulty += this.hackAmountSecurity(hackThreads);\\r\\n    }\\r\\n    simGrow(growThreads, hackOverride, player) {\\r\\n        this.moneyAvailable = Math.min(this.growPercent(growThreads, player) * this.moneyAvailable, this.moneyMax);\\r\\n        this.hackDifficulty += this.growthAmountSecurity(growThreads);\\r\\n    }\\r\\n    simWeaken(weakenThreads) {\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenThreads), this.minDifficulty);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic2VydmljZXMvc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBHQUEwRztBQUcxRyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztBQUVaLElBQUssd0JBS0o7QUFMRCxXQUFLLHdCQUF3QjtJQUN6QixpR0FBaUIsQ0FBQTtJQUNqQix1R0FBb0IsQ0FBQTtJQUNwQixpR0FBaUIsQ0FBQTtJQUNqQix5RUFBSyxDQUFBO0FBQ1QsQ0FBQyxFQUxJLHdCQUF3QixLQUF4Qix3QkFBd0IsUUFLNUI7QUFnRkQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLElBQWdCLEVBQUUsR0FBVztJQUMvRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDbEQsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE9BQU87QUFDWCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQ2pCLE1BQWMsRUFDZCxjQUFpRCxFQUNqRCxFQUFVLEVBQ1YsS0FBYSxFQUNiLEdBQVcsRUFDWCxTQUFrQjtJQUVsQixNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFbkQsSUFBSSxTQUFTLElBQUksS0FBSyxHQUFHLFNBQVMsR0FBRyxFQUFFLElBQUksS0FBSyxHQUFHLFNBQVMsR0FBRyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUM7U0FDekUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxHQUFHLENBQUM7SUFFMUQsSUFBSSxLQUFLLEdBQUcsRUFBRTtRQUFFLE9BQU8sWUFBWSxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFckYsT0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBSUQsTUFBTSxPQUFPLGFBQWE7SUFDdEIsRUFBRSxDQUFLO0lBQ1AsYUFBYSxHQUFhLEVBQUUsQ0FBQztJQUU3QixZQUFZLEVBQU07UUFDZCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQWdCO1FBQ3ZCLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsYUFBYSxDQUFDLFdBQW9CO1FBQzlCLE1BQU0sVUFBVSxHQUFlLEVBQUUsQ0FBQztRQUNsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN2QyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNwRDtRQUVELElBQUksV0FBVyxJQUFJLFdBQVcsR0FBRyxDQUFDO1lBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDakYsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVELG9CQUFvQixDQUFDLFdBQW9CO1FBQ3JDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBRUQsa0JBQWtCLENBQUMsT0FBZTtRQUM5QixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFLLEdBQUcsS0FBSztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLElBQUksS0FBSyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMxQztRQUVELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sTUFBTTtJQUNmLHVCQUF1QjtJQUN2QixTQUFTLEdBQXFCLEVBQUUsQ0FBQztJQUNqQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUNwQixjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDZCxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDUixhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDWCxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQ3hCLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUN0QixRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQ3hCLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDWixjQUFjLEdBQW9CLEVBQUUsQ0FBQztJQUNyQyxPQUFPLEdBQWEsRUFBRSxDQUFDO0lBQ3ZCLGdCQUFnQixHQUFhLEVBQUUsQ0FBQztJQUNoQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDcEIsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUNwQixTQUFTLEdBQWUsRUFBRSxDQUFDO0lBQzNCLGlCQUFpQixHQUFHLEtBQUssQ0FBQztJQUUxQixpQkFBaUI7SUFDakIsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0lBQzFCLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDbkIsY0FBYyxHQUFHLENBQUMsQ0FBQztJQUNuQixhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDbkIsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLG9CQUFvQixHQUFHLENBQUMsQ0FBQztJQUN6QixhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLG9CQUFvQixHQUFHLENBQUMsQ0FBQztJQUN6QixZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsd0JBQXdCLEdBQTRDLEVBQUUsQ0FBQztJQUN2RSxxQkFBcUIsR0FBd0IsSUFBSSxDQUFDO0lBQ2xELHlCQUF5QixHQUFHLENBQUMsQ0FBQztJQUU5Qix5QkFBeUI7SUFDekIsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDVixZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLG9CQUFvQixHQUFHLENBQUMsQ0FBQztJQUV6QixvQkFBb0I7SUFDcEIsRUFBRSxDQUFLO0lBQ1AsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixlQUFlLEdBQXNCLEVBQUUsQ0FBQztJQUV4QyxZQUFZLEVBQU0sRUFBRSxJQUF3QjtRQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLElBQUksR0FBRyxTQUFTLENBQUM7U0FDcEI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBZTtRQUNsQixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxXQUFXLENBQUMsT0FBZTtRQUN2QixPQUFPLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLG9CQUFvQixJQUFJLE9BQU8sQ0FBQztJQUM1RixDQUFDO0lBRUQsaUJBQWlCO1FBQ2IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxhQUFhLENBQUMsUUFBZ0IsRUFBRSxHQUFXLEVBQUUsT0FBZSxFQUFFLE9BQW1CLEVBQUU7UUFDL0UsTUFBTSxRQUFRLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQztRQUMvQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDL0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLFFBQVEsRUFBRTtZQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztnQkFDdEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsR0FBRyxFQUFFLFFBQVE7Z0JBQ2IsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDakMsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsT0FBTyxFQUFFLE9BQU87YUFDbkIsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxrQkFBa0I7UUFDZCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzFCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVELG9CQUFvQjtRQUNoQixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLElBQUk7UUFDOUIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELFFBQVEsQ0FBQyxZQUFxQixFQUFFLE1BQWU7UUFDM0MsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztZQUNwRCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUV6RSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELFdBQVcsQ0FBQyxZQUFxQixFQUFFLE1BQWU7UUFDOUMsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztZQUNwRCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUU1RSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELGdCQUFnQixDQUFDLEVBQVUsRUFBRSxNQUFlO1FBQ3hDLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7WUFDcEQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV2RSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFcEUsSUFDSSxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUNsRDtZQUNFLE9BQU8sQ0FBQyxDQUFDO1NBQ1o7UUFFRCxPQUFPLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVELGtCQUFrQixDQUFDLE9BQU8sR0FBRyxDQUFDO1FBQzFCLDhDQUE4QztRQUM5QyxPQUFPLEtBQUssR0FBRyxPQUFPLENBQUM7SUFDM0IsQ0FBQztJQUVELFlBQVksQ0FBQyxNQUFlLEVBQUUsUUFBaUIsRUFBRSxLQUFjO1FBQzNELFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDakQsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRWpDLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7WUFDcEQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFckYsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQWUsRUFBRSxNQUFlLEVBQUUsS0FBYztRQUN4RCxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1lBQ3BELE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU5RSxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxPQUFPLEdBQUcsQ0FBQztRQUM1QixnREFBZ0Q7UUFDaEQsT0FBTyxLQUFLLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFRCxRQUFRLENBQUMsWUFBcUIsRUFBRSxNQUFlO1FBQzNDLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7WUFDcEQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFekUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFVLEVBQUUsTUFBZTtRQUN4QyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1lBQ3BELE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFdkUsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXBFLElBQ0ksSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFDbEQ7WUFDRSxPQUFPLENBQUMsQ0FBQztTQUNaO1FBRUQsT0FBTyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxVQUFVLENBQUMsWUFBcUIsRUFBRSxNQUFlO1FBQzdDLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7WUFDcEQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFM0UsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCw2REFBNkQ7SUFDN0QsWUFBWSxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUUsS0FBYztRQUNwQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3Qyx3QkFBd0I7SUFDNUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLEVBQVUsRUFBRSxNQUFlO1FBQzFDLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7WUFDcEQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV6RSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFcEUsSUFDSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQzNELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUNwRDtZQUNFLE9BQU8sQ0FBQyxDQUFDO1NBQ1o7UUFFRCxPQUFPLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVELFlBQVksQ0FBQyxXQUFtQixFQUFFLGFBQXFCLEVBQUUsTUFBZTtRQUNwRSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0csSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDL0csQ0FBQztJQUVELFVBQVUsQ0FBQyxXQUFtQixFQUFFLFlBQW9CLEVBQUUsTUFBZTtRQUNqRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDbkcsQ0FBQztJQUVELFlBQVksQ0FDUixXQUFtQixFQUNuQixZQUFvQixFQUNwQixpQkFBeUIsRUFDekIsV0FBbUIsRUFDbkIsaUJBQXlCLEVBQ3pCLE1BQWU7UUFFZixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFL0csSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFMUQsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxXQUFtQixFQUFFLFlBQW9CLEVBQUUsTUFBYztRQUM3RCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxPQUFPLENBQUMsV0FBbUIsRUFBRSxZQUFvQixFQUFFLE1BQWM7UUFDN0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNHLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxTQUFTLENBQUMsYUFBcUI7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDL0csQ0FBQztDQUNKIn0=\",\"filename\":\"/services/server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fd718c04-5524-440b-8757-34536d397273\",\"moduleSequenceNumber\":231933},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///cf8848e3-ada2-4c45-aea9-937297270a06\",\"moduleSequenceNumber\":275606}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":1567687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"lib/util\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"continuous\\\", false],\\r\\n    [\\\"c\\\", false],\\r\\n];\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    try {\\r\\n        const reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n        if (reward === \\\"\\\") {\\r\\n            ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n            ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"Caught Exception: %s\\\", e);\\r\\n    }\\r\\n}\\r\\nclass CCT {\\r\\n    name;\\r\\n    host;\\r\\n    type;\\r\\n    desc;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    data;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    solve;\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n        switch (this.type) {\\r\\n            case \\\"Find Largest Prime Factor\\\":\\r\\n                this.solve = _.bind(CCT.solveFindLargestPrimeFactor, null, _, this);\\r\\n                break;\\r\\n            case \\\"Subarray with Maximum Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveSubarraywithMaximumSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Total Ways to Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveTotalWaystoSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Total Ways to Sum II\\\":\\r\\n                this.solve = _.bind(CCT.solveTotalWaystoSumII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Spiralize Matrix\\\":\\r\\n                this.solve = _.bind(CCT.solveSpiralizeMatrix, null, _, this);\\r\\n                break;\\r\\n            case \\\"Array Jumping Game\\\":\\r\\n                this.solve = _.bind(CCT.solveArrayJumpingGame, null, _, this);\\r\\n                break;\\r\\n            case \\\"Array Jumping Game II\\\":\\r\\n                this.solve = _.bind(CCT.solveArrayJumpingGameII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Merge Overlapping Intervals\\\":\\r\\n                this.solve = _.bind(CCT.solveMergeOverlappingIntervals, null, _, this);\\r\\n                break;\\r\\n            case \\\"Generate IP Addresses\\\":\\r\\n                this.solve = _.bind(CCT.solveGenerateIPAddresses, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader I\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader II\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader III\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader IV\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIV, null, _, this);\\r\\n                break;\\r\\n            case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n                this.solve = _.bind(CCT.solveMinimumPathSuminaTriangle, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid I\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid II\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Shortest Path in a Grid\\\":\\r\\n                this.solve = _.bind(CCT.solveShortestPathinaGrid, null, _, this);\\r\\n                break;\\r\\n            case \\\"Sanitize Parentheses in Expression\\\":\\r\\n                this.solve = _.bind(CCT.solveSanitizeParenthesesinExpression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Find All Valid Math Expressions\\\":\\r\\n                this.solve = _.bind(CCT.solveFindAllValidMathExpressions, null, _, this);\\r\\n                break;\\r\\n            case \\\"HammingCodes: Integer to Encoded Binary\\\":\\r\\n                this.solve = _.bind(CCT.solveHammingCodesIntegertoEncodedBinary, null, _, this);\\r\\n                break;\\r\\n            case \\\"HammingCodes: Encoded Binary to Integer\\\":\\r\\n                this.solve = _.bind(CCT.solveHammingCodesEncodedBinarytoInteger, null, _, this);\\r\\n                break;\\r\\n            case \\\"Proper 2-Coloring of a Graph\\\":\\r\\n                this.solve = _.bind(CCT.solveProper2ColoringofaGraph, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression I: RLE Compression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIRLECompression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression II: LZ Decompression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIILZDecompression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression III: LZ Compression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIIILZCompression, null, _, this);\\r\\n                break;\\r\\n        }\\r\\n        //this.print(ns);\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        const ways = [1];\\r\\n        ways.length = cct.data + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 1; i < cct.data; ++i) {\\r\\n            for (let j = i; j <= cct.data; ++j) {\\r\\n                ways[j] += ways[j - i];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[cct.data]);\\r\\n    }\\r\\n    static solveTotalWaystoSumII(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const n = data[0];\\r\\n        const s = data[1];\\r\\n        const ways = [1];\\r\\n        ways.length = n + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 0; i < s.length; i++) {\\r\\n            for (let j = s[i]; j <= n; j++) {\\r\\n                ways[j] += ways[j - s[i]];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[n]);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        const nums = cct.data.slice();\\r\\n        for (let i = 1; i < nums.length; i++) {\\r\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1]);\\r\\n        }\\r\\n        answerCCT(ns, cct, Math.max(...nums));\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        const spiral = [];\\r\\n        const m = cct.data.length;\\r\\n        const n = cct.data[0].length;\\r\\n        let u = 0;\\r\\n        let d = m - 1;\\r\\n        let l = 0;\\r\\n        let r = n - 1;\\r\\n        let k = 0;\\r\\n        while (true) {\\r\\n            // Up\\r\\n            for (let col = l; col <= r; col++) {\\r\\n                spiral[k] = cct.data[u][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++u > d) {\\r\\n                break;\\r\\n            }\\r\\n            // Right\\r\\n            for (let row = u; row <= d; row++) {\\r\\n                spiral[k] = cct.data[row][r];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--r < l) {\\r\\n                break;\\r\\n            }\\r\\n            // Down\\r\\n            for (let col = r; col >= l; col--) {\\r\\n                spiral[k] = cct.data[d][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--d < u) {\\r\\n                break;\\r\\n            }\\r\\n            // Left\\r\\n            for (let row = d; row >= u; row--) {\\r\\n                spiral[k] = cct.data[row][l];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++l > r) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, spiral);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        let i = 0;\\r\\n        for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n            reach = Math.max(i + cct.data[i], reach);\\r\\n        }\\r\\n        answerCCT(ns, cct, i === n ? 1 : 0);\\r\\n    }\\r\\n    static solveArrayJumpingGameII(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const n = data.length;\\r\\n        let reach = 0;\\r\\n        let jumps = 0;\\r\\n        let lastJump = -1;\\r\\n        while (reach < n - 1) {\\r\\n            let jumpedFrom = -1;\\r\\n            for (let i = reach; i > lastJump; i--) {\\r\\n                if (i + data[i] > reach) {\\r\\n                    reach = i + data[i];\\r\\n                    jumpedFrom = i;\\r\\n                }\\r\\n            }\\r\\n            if (jumpedFrom === -1) {\\r\\n                jumps = 0;\\r\\n                break;\\r\\n            }\\r\\n            lastJump = jumpedFrom;\\r\\n            jumps++;\\r\\n        }\\r\\n        answerCCT(ns, cct, jumps);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        function convert2DArrayToString(arr) {\\r\\n            const components = [];\\r\\n            arr.forEach((e) => {\\r\\n                let s = e.toString();\\r\\n                s = [\\\"[\\\", s, \\\"]\\\"].join(\\\"\\\");\\r\\n                components.push(s);\\r\\n            });\\r\\n            return components.join(\\\",\\\").replace(/\\\\s/g, \\\"\\\");\\r\\n        }\\r\\n        const intervals = cct.data.slice();\\r\\n        intervals.sort((a, b) => {\\r\\n            return a[0] - b[0];\\r\\n        });\\r\\n        const result = [];\\r\\n        let start = intervals[0][0];\\r\\n        let end = intervals[0][1];\\r\\n        for (const interval of intervals) {\\r\\n            if (interval[0] <= end) {\\r\\n                end = Math.max(end, interval[1]);\\r\\n            }\\r\\n            else {\\r\\n                result.push([start, end]);\\r\\n                start = interval[0];\\r\\n                end = interval[1];\\r\\n            }\\r\\n        }\\r\\n        result.push([start, end]);\\r\\n        answerCCT(ns, cct, [convert2DArrayToString(result)]);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\")\\r\\n                return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\")\\r\\n                return false;\\r\\n            if (str.length > 3)\\r\\n                return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n        const results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9)\\r\\n                continue;\\r\\n            const a = cct.data.substr(0, i);\\r\\n            if (!validate(a))\\r\\n                continue;\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6)\\r\\n                    continue;\\r\\n                const b = cct.data.substr(i, j);\\r\\n                if (!validate(b))\\r\\n                    continue;\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3)\\r\\n                        continue;\\r\\n                    const c = cct.data.substr(i + j, k);\\r\\n                    const d = cct.data.substr(i + j + k);\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        let maxCur = 0;\\r\\n        let maxSoFar = 0;\\r\\n        for (let i = 1; i < cct.data.length; ++i) {\\r\\n            maxCur = Math.max(0, (maxCur += cct.data[i] - cct.data[i - 1]));\\r\\n            maxSoFar = Math.max(maxCur, maxSoFar);\\r\\n        }\\r\\n        answerCCT(ns, cct, maxSoFar);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        let profit = 0;\\r\\n        for (let p = 1; p < cct.data.length; ++p) {\\r\\n            profit += Math.max(cct.data[p] - cct.data[p - 1], 0);\\r\\n        }\\r\\n        answerCCT(ns, cct, profit);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        let hold1 = Number.MIN_SAFE_INTEGER;\\r\\n        let hold2 = Number.MIN_SAFE_INTEGER;\\r\\n        let release1 = 0;\\r\\n        let release2 = 0;\\r\\n        for (const price of cct.data) {\\r\\n            release2 = Math.max(release2, hold2 + price);\\r\\n            hold2 = Math.max(hold2, release1 - price);\\r\\n            release1 = Math.max(release1, hold1 + price);\\r\\n            hold1 = Math.max(hold1, price * -1);\\r\\n        }\\r\\n        answerCCT(ns, cct, release2);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        const k = cct.data[0];\\r\\n        const prices = cct.data[1];\\r\\n        const len = prices.length;\\r\\n        if (len < 2) {\\r\\n            answerCCT(ns, cct, 0);\\r\\n            return;\\r\\n        }\\r\\n        if (k > len / 2) {\\r\\n            let res = 0;\\r\\n            for (let i = 1; i < len; ++i) {\\r\\n                res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n            }\\r\\n            answerCCT(ns, cct, res);\\r\\n            return;\\r\\n        }\\r\\n        const hold = [];\\r\\n        const rele = [];\\r\\n        hold.length = k + 1;\\r\\n        rele.length = k + 1;\\r\\n        for (let i = 0; i <= k; ++i) {\\r\\n            hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n            rele[i] = 0;\\r\\n        }\\r\\n        let cur;\\r\\n        for (let i = 0; i < len; ++i) {\\r\\n            cur = prices[i];\\r\\n            for (let j = k; j > 0; --j) {\\r\\n                rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, rele[k]);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        const dp = cct.data[n - 1].slice();\\r\\n        for (let i = n - 2; i > -1; --i) {\\r\\n            for (let j = 0; j < cct.data[i].length; ++j) {\\r\\n                dp[j] = Math.min(dp[j], dp[j + 1]) + cct.data[i][j];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, dp[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        const n = cct.data[0]; // Number of rows\\r\\n        const m = cct.data[1]; // Number of columns\\r\\n        const currentRow = [];\\r\\n        currentRow.length = n;\\r\\n        for (let i = 0; i < n; i++) {\\r\\n            currentRow[i] = 1;\\r\\n        }\\r\\n        for (let row = 1; row < m; row++) {\\r\\n            for (let i = 1; i < n; i++) {\\r\\n                currentRow[i] += currentRow[i - 1];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, currentRow[n - 1]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        const obstacleGrid = [];\\r\\n        obstacleGrid.length = cct.data.length;\\r\\n        for (let i = 0; i < obstacleGrid.length; ++i) {\\r\\n            obstacleGrid[i] = cct.data[i].slice();\\r\\n        }\\r\\n        for (let i = 0; i < obstacleGrid.length; i++) {\\r\\n            for (let j = 0; j < obstacleGrid[0].length; j++) {\\r\\n                if (obstacleGrid[i][j] == 1) {\\r\\n                    obstacleGrid[i][j] = 0;\\r\\n                }\\r\\n                else if (i == 0 && j == 0) {\\r\\n                    obstacleGrid[0][0] = 1;\\r\\n                }\\r\\n                else {\\r\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]);\\r\\n    }\\r\\n    static solveShortestPathinaGrid(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const width = data[0].length;\\r\\n        const height = data.length;\\r\\n        const dstY = height - 1;\\r\\n        const dstX = width - 1;\\r\\n        const paths = new Array(height);\\r\\n        for (let y = 0; y < height; y++) {\\r\\n            paths[y] = new Array(width);\\r\\n        }\\r\\n        function validPosition(y, x) {\\r\\n            return y >= 0 && y < height && x >= 0 && x < width && data[y][x] == 0;\\r\\n        }\\r\\n        // List in-bounds and passable neighbors\\r\\n        function* neighbors(y, x) {\\r\\n            if (validPosition(y - 1, x))\\r\\n                yield [y - 1, x]; // Up\\r\\n            if (validPosition(y + 1, x))\\r\\n                yield [y + 1, x]; // Down\\r\\n            if (validPosition(y, x - 1))\\r\\n                yield [y, x - 1]; // Left\\r\\n            if (validPosition(y, x + 1))\\r\\n                yield [y, x + 1]; // Right\\r\\n        }\\r\\n        // Prepare starting point\\r\\n        paths[0][0] = [-1, -1];\\r\\n        const queue = [[0, 0]];\\r\\n        while (queue.length > 0) {\\r\\n            const cur = queue.shift();\\r\\n            if (!cur)\\r\\n                break;\\r\\n            for (const n of neighbors(cur[0], cur[1])) {\\r\\n                const y = n[0];\\r\\n                const x = n[1];\\r\\n                if (!paths[y][x]) {\\r\\n                    paths[y][x] = cur;\\r\\n                    queue.push(n);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        function translate(cy, cx, ny, nx) {\\r\\n            if (ny === -1 && nx === -1)\\r\\n                return \\\"X\\\";\\r\\n            if (cy === ny) {\\r\\n                if (cx > nx)\\r\\n                    return \\\"L\\\";\\r\\n                return \\\"R\\\";\\r\\n            }\\r\\n            if (cy > ny) {\\r\\n                return \\\"U\\\";\\r\\n            }\\r\\n            return \\\"D\\\";\\r\\n        }\\r\\n        // for (let y = 0; y < height; y++) {\\r\\n        //     let xstr = \\\"\\\";\\r\\n        //     for (let x = 0; x < width; x++) {\\r\\n        //         const n = paths[y][x];\\r\\n        //         const nstr = n ? `[${translate(y, x, n[0], n[1])}]` : \\\"[ ]\\\";\\r\\n        //         xstr = ns.sprintf(\\\"%s%s\\\", xstr, validPosition(y, x) ? nstr : \\\"[-]\\\");\\r\\n        //     }\\r\\n        //     ns.tprintf(xstr);\\r\\n        // }\\r\\n        // reverse the path\\r\\n        let path = \\\"\\\";\\r\\n        let cur = [dstY, dstX];\\r\\n        while (validPosition(cur[0], cur[1])) {\\r\\n            const cy = cur[0];\\r\\n            const cx = cur[1];\\r\\n            const n = paths[cy][cx];\\r\\n            if (!n)\\r\\n                break;\\r\\n            const ny = n[0];\\r\\n            const nx = n[1];\\r\\n            switch (translate(cy, cx, ny, nx)) {\\r\\n                case \\\"L\\\":\\r\\n                    path = \\\"R\\\" + path;\\r\\n                    break;\\r\\n                case \\\"R\\\":\\r\\n                    path = \\\"L\\\" + path;\\r\\n                    break;\\r\\n                case \\\"U\\\":\\r\\n                    path = \\\"D\\\" + path;\\r\\n                    break;\\r\\n                case \\\"D\\\":\\r\\n                    path = \\\"U\\\" + path;\\r\\n                    break;\\r\\n            }\\r\\n            cur = n;\\r\\n        }\\r\\n        answerCCT(ns, cct, [path]);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        let left = 0;\\r\\n        let right = 0;\\r\\n        const res = [];\\r\\n        for (let i = 0; i < cct.data.length; ++i) {\\r\\n            if (cct.data[i] === \\\"(\\\") {\\r\\n                ++left;\\r\\n            }\\r\\n            else if (cct.data[i] === \\\")\\\") {\\r\\n                left > 0 ? --left : ++right;\\r\\n            }\\r\\n        }\\r\\n        function dfs(pair, index, left, right, s, solution, res) {\\r\\n            if (s.length === index) {\\r\\n                if (left === 0 && right === 0 && pair === 0) {\\r\\n                    for (let i = 0; i < res.length; i++) {\\r\\n                        if (res[i] === solution) {\\r\\n                            return;\\r\\n                        }\\r\\n                    }\\r\\n                    res.push(solution);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            if (s[index] === \\\"(\\\") {\\r\\n                if (left > 0) {\\r\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n                }\\r\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else if (s[index] === \\\")\\\") {\\r\\n                if (right > 0)\\r\\n                    dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n                if (pair > 0)\\r\\n                    dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else {\\r\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n        }\\r\\n        dfs(0, 0, left, right, cct.data, \\\"\\\", res);\\r\\n        answerCCT(ns, cct, res);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        const num = cct.data[0];\\r\\n        const target = cct.data[1];\\r\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n            if (pos === num.length) {\\r\\n                if (target === evaluated) {\\r\\n                    res.push(path);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            for (let i = pos; i < num.length; ++i) {\\r\\n                if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                    break;\\r\\n                }\\r\\n                const cur = parseInt(num.substring(pos, i + 1));\\r\\n                if (pos === 0) {\\r\\n                    helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n                }\\r\\n                else {\\r\\n                    helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                    helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                    helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const result = [];\\r\\n        helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveHammingCodesIntegertoEncodedBinary(ns, cct) {\\r\\n        answerCCT(ns, cct, [HammingEncode(cct.data)]);\\r\\n    }\\r\\n    static solveHammingCodesEncodedBinarytoInteger(ns, cct) {\\r\\n        answerCCT(ns, cct, HammingDecode(cct.data));\\r\\n    }\\r\\n    static solveProper2ColoringofaGraph(ns, cct) {\\r\\n        // const data = cct.data;\\r\\n        // function neighbourhood(vertex: number): number[] {\\r\\n        //     const adjLeft = data[1].filter(([a, _]) => a == vertex).map(([_, b]) => b);\\r\\n        //     const adjRight = data[1].filter(([_, b]) => b == vertex).map(([a, _]) => a);\\r\\n        //     return adjLeft.concat(adjRight);\\r\\n        // }\\r\\n        // //Verify that there is no solution by attempting to create a proper 2-coloring.\\r\\n        // const coloring: (number | undefined)[] = Array(data[0]).fill(undefined);\\r\\n        // while (coloring.some((val) => val === undefined)) {\\r\\n        //     //Color a vertex in the graph\\r\\n        //     const initialVertex: number = coloring.findIndex((val) => val === undefined);\\r\\n        //     coloring[initialVertex] = 0;\\r\\n        //     const frontier: number[] = [initialVertex];\\r\\n        //     //Propogate the coloring throughout the component containing v greedily\\r\\n        //     while (frontier.length > 0) {\\r\\n        //         const v: number = frontier.pop() || 0;\\r\\n        //         const neighbors: number[] = neighbourhood(v);\\r\\n        //         //For each vertex u adjacent to v\\r\\n        //         for (const id in neighbors) {\\r\\n        //             const u: number = neighbors[id];\\r\\n        //             //Set the color of u to the opposite of v's color if it is new,\\r\\n        //             //then add u to the frontier to continue the algorithm.\\r\\n        //             if (coloring[u] === undefined) {\\r\\n        //                 if (coloring[v] === 0) coloring[u] = 1;\\r\\n        //                 else coloring[u] = 0;\\r\\n        //                 frontier.push(u);\\r\\n        //             }\\r\\n        //             //Assert u,v do not have the same color\\r\\n        //             else if (coloring[u] === coloring[v]) {\\r\\n        //                 //If u,v do have the same color, no proper 2-coloring exists, meaning\\r\\n        //                 //the player was correct to say there is no proper 2-coloring of the graph.\\r\\n        //                 answerCCT(ns, cct, []);\\r\\n        //                 return;\\r\\n        //             }\\r\\n        //         }\\r\\n        //     }\\r\\n        // }\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIRLECompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIILZDecompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIIILZCompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        let fac = 2;\\r\\n        let n = cct.data;\\r\\n        while (n > (fac - 1) * (fac - 1)) {\\r\\n            while (n % fac === 0) {\\r\\n                n = Math.round(n / fac);\\r\\n            }\\r\\n            ++fac;\\r\\n        }\\r\\n        answerCCT(ns, cct, n === 1 ? fac - 1 : n);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    options.continuous = options.continuous || options.c;\\r\\n    const hosts = allHosts(ns);\\r\\n    while (true) {\\r\\n        const ccts = [];\\r\\n        for (const hostname of hosts) {\\r\\n            const ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n            if (ls.length === 0)\\r\\n                continue;\\r\\n            ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n        }\\r\\n        for (const cct of ccts) {\\r\\n            cct.solve(ns);\\r\\n        }\\r\\n        if (!options.continuous)\\r\\n            break;\\r\\n        await ns.sleep(60 * 1000);\\r\\n    }\\r\\n}\\r\\nfunction HammingDecode(_data) {\\r\\n    //check for altered bit and decode\\r\\n    const _build = _data.split(\\\"\\\"); // ye, an array for working, again\\r\\n    const _testArray = []; //for the \\\"truthtable\\\". if any is false, the data has an altered bit, will check for and fix it\\r\\n    const _sumParity = Math.ceil(Math.log2(_data.length)); // sum of parity for later use\\r\\n    const count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\r\\n    // the count.... again ;)\\r\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // store first index, for checking in next step and fix the _build properly later on\\r\\n    _testArray.push(_overallParity == (count(_build, \\\"1\\\") % 2).toString() ? true : false); // first check with the overall parity bit\\r\\n    for (let i = 0; i < _sumParity; i++) {\\r\\n        // for the rest of the remaining parity bits we also \\\"check\\\"\\r\\n        const _tempIndex = Math.pow(2, i) - 1; // get the parityBits Index\\r\\n        const _tempStep = _tempIndex + 1; // set the stepsize\\r\\n        const _tempData = [..._build]; // get a \\\"copy\\\" of the build-data for working\\r\\n        const _tempArray = []; // init empty array for \\\"testing\\\"\\r\\n        while (_tempData[_tempIndex] != undefined) {\\r\\n            // extract from the copied data until the \\\"starting\\\" index is undefined\\r\\n            const _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)]; // extract 2*stepsize\\r\\n            _tempArray.push(..._temp.splice(0, _tempStep)); // and cut again for keeping first half\\r\\n        }\\r\\n        const _tempParity = _tempArray.shift(); // and again save the first index separated for checking with the rest of the data\\r\\n        _testArray.push(_tempParity == (count(_tempArray, \\\"1\\\") % 2).toString() ? true : false);\\r\\n        // is the _tempParity the calculated data? push answer into the 'truthtable'\\r\\n    }\\r\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index and start with 0\\r\\n    for (let i = 1; i < _sumParity + 1; i++) {\\r\\n        // simple binary adding for every boolean in the _testArray, starting from 2nd index of it\\r\\n        _fixIndex += _testArray[i] ? 0 : Math.pow(2, i) / 2;\\r\\n    }\\r\\n    _build.unshift(_overallParity); // now we need the \\\"overall\\\" parity back in it's place\\r\\n    // try fix the actual encoded binary string if there is an error\\r\\n    if (_fixIndex > 0 && _testArray[0] == false) {\\r\\n        // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\r\\n        _build[_fixIndex] = _build[_fixIndex] == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == false) {\\r\\n        // otherwise, if the the overall_parity is the only wrong, fix that one\\r\\n        _overallParity = _overallParity == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == true && _testArray.some((truth) => truth == false)) {\\r\\n        return 0; // uhm, there's some strange going on... 2 bits are altered? How? This should not happen 👀\\r\\n    }\\r\\n    // oof.. halfway through... we fixed an possible altered bit, now \\\"extract\\\" the parity-bits from the _build\\r\\n    for (let i = _sumParity; i >= 0; i--) {\\r\\n        // start from the last parity down the 2nd index one\\r\\n        _build.splice(Math.pow(2, i), 1);\\r\\n    }\\r\\n    _build.splice(0, 1); // remove the overall parity bit and we have our binary value\\r\\n    return parseInt(_build.join(\\\"\\\"), 2); // parse the integer with redux 2 and we're done!\\r\\n}\\r\\nexport function HammingEncode(value) {\\r\\n    // encoding following Hammings rule\\r\\n    function HammingSumOfParity(_lengthOfDBits) {\\r\\n        // will calculate the needed amount of parityBits 'without' the \\\"overall\\\"-Parity (that math took me 4 Days to get it working)\\r\\n        return _lengthOfDBits < 3 || _lengthOfDBits == 0 // oh and of course using ternary operators, it's a pretty neat function\\r\\n            ? _lengthOfDBits == 0\\r\\n                ? 0\\r\\n                : _lengthOfDBits + 1\\r\\n            : // the following math will only work, if the length is greater equal 3, otherwise it's \\\"kind of\\\" broken :D\\r\\n                Math.ceil(Math.log2(_lengthOfDBits * 2)) <=\\r\\n                    Math.ceil(Math.log2(1 + _lengthOfDBits + Math.ceil(Math.log2(_lengthOfDBits))))\\r\\n                    ? Math.ceil(Math.log2(_lengthOfDBits) + 1)\\r\\n                    : Math.ceil(Math.log2(_lengthOfDBits));\\r\\n    }\\r\\n    const _data = value.toString(2).split(\\\"\\\"); // first, change into binary string, then create array with 1 bit per index\\r\\n    const _sumParity = HammingSumOfParity(_data.length); // get the sum of needed parity bits (for later use in encoding)\\r\\n    const count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\r\\n    // function count for specific entries in the array, for later use\\r\\n    const _build = [\\\"x\\\", \\\"x\\\", ..._data.splice(0, 1)]; // init the \\\"pre-build\\\"\\r\\n    for (let i = 2; i < _sumParity; i++) {\\r\\n        // add new paritybits and the corresponding data bits (pre-building array)\\r\\n        _build.push(\\\"x\\\", ..._data.splice(0, Math.pow(2, i) - 1));\\r\\n    }\\r\\n    // now the \\\"calculation\\\"... get the paritybits ('x') working\\r\\n    for (const index of _build.reduce(function (a, e, i) {\\r\\n        if (e == \\\"x\\\")\\r\\n            a.push(i);\\r\\n        return a;\\r\\n    }, [])) {\\r\\n        // that reduce will result in an array of index numbers where the \\\"x\\\" is placed\\r\\n        const _tempcount = index + 1; // set the \\\"stepsize\\\" for the parityBit\\r\\n        const _temparray = []; // temporary array to store the extracted bits\\r\\n        const _tempdata = [..._build]; // only work with a copy of the _build\\r\\n        while (_tempdata[index] !== undefined) {\\r\\n            // as long as there are bits on the starting index, do \\\"cut\\\"\\r\\n            const _temp = _tempdata.splice(index, _tempcount * 2); // cut stepsize*2 bits, then...\\r\\n            _temparray.push(..._temp.splice(0, _tempcount)); // ... cut the result again and keep the first half\\r\\n        }\\r\\n        _temparray.splice(0, 1); // remove first bit, which is the parity one\\r\\n        _build[index] = (count(_temparray, \\\"1\\\") % 2).toString(); // count with remainder of 2 and\\\"toString\\\" to store the parityBit\\r\\n    } // parity done, now the \\\"overall\\\"-parity is set\\r\\n    _build.unshift((count(_build, \\\"1\\\") % 2).toString()); // has to be done as last element\\r\\n    return _build.join(\\\"\\\"); // return the _build as string\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFcEMsOERBQThEO0FBQzlELElBQUksT0FBWSxDQUFDO0FBQ2pCLE1BQU0sVUFBVSxHQUFxRDtJQUNqRSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUM7SUFDckIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQ2YsQ0FBQztBQUVGLFNBQVMsU0FBUyxDQUFDLEVBQU0sRUFBRSxHQUFRLEVBQUUsTUFBeUI7SUFDMUQsSUFBSTtRQUNBLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU3RixJQUFJLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDZixFQUFFLENBQUMsT0FBTyxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEYsRUFBRSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ2hGO2FBQU07WUFDSCxFQUFFLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN6RTtLQUNKO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxDQUFD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QUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxRQUFRO1lBQ1IsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxPQUFPO1lBQ1AsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxPQUFPO1lBQ1AsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7U0FDSjtRQUVELFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBTSxF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\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f00deb7e-3d1d-4904-ab50-0049f92f0c6e\",\"moduleSequenceNumber\":1552782},{\"filename\":\"cct.js\",\"url\":\"blob:file:///c8874e51-8614-4ae2-b36e-19dec6e73aa4\",\"moduleSequenceNumber\":1565728}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":1567688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, doProgramBuys, softenServer, stFormat } from \\\"/lib/util\\\";\\r\\nconst SPECIAL_HOSTS = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"all\\\", false],\\r\\n    [\\\"ch\\\", 5],\\r\\n    [\\\"suppress\\\", false],\\r\\n    [\\\"soften\\\", false],\\r\\n    [\\\"s\\\", false],\\r\\n    [\\\"a\\\", false],\\r\\n    [\\\"b\\\", false],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--ch\\\"].includes(lastFlag))\\r\\n        return [\\\"10\\\"];\\r\\n    return [\\\"-s\\\", \\\"-a\\\", \\\"--all\\\", \\\"--ch\\\", \\\"--suppress\\\", \\\"--soften\\\", \\\"-b\\\"];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (options.ch < 0) {\\r\\n        ns.tprintf(\\\"ERROR: check flag must be > 0\\\");\\r\\n        return;\\r\\n    }\\r\\n    options.soften = options.soften || options.s;\\r\\n    options.all = options.all || options.a;\\r\\n    if (options.b)\\r\\n        doProgramBuys(ns);\\r\\n    const hosts = allHosts(ns).sort((a, b) => ns.getServerRequiredHackingLevel(b) - ns.getServerRequiredHackingLevel(a));\\r\\n    if (options.soften) {\\r\\n        for (const hostname of hosts) {\\r\\n            softenServer(ns, hostname);\\r\\n        }\\r\\n    }\\r\\n    let hostnameMaxLen = 0;\\r\\n    hosts.map((a) => (hostnameMaxLen = Math.max(a.length, hostnameMaxLen)));\\r\\n    if (options.suppress)\\r\\n        return;\\r\\n    let serverListCount = hosts.length;\\r\\n    if (!options.all) {\\r\\n        serverListCount = Math.min(serverListCount, options.ch +\\r\\n            hosts.reduce((tally, hostname) => tally + (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? 1 : 0), 0));\\r\\n    }\\r\\n    const lookHosts = serverListCount < hosts.length ? hosts.slice(-serverListCount) : hosts;\\r\\n    for (const hostname of lookHosts) {\\r\\n        const displayHostname = SPECIAL_HOSTS.includes(hostname) ? \\\"*\\\" + hostname : hostname;\\r\\n        const root = ns.hasRootAccess(hostname);\\r\\n        const requiredSkill = ns.getServerRequiredHackingLevel(hostname);\\r\\n        const canHack = ns.getHackingLevel() >= requiredSkill;\\r\\n        const ram = ns.getServerMaxRam(hostname);\\r\\n        const time = ns.getWeakenTime(hostname);\\r\\n        ns.tprintf(`%${hostnameMaxLen}s %4d %s %s %5s %8s %6.2f/%6.2f %9s/%9s`, displayHostname, requiredSkill, root ? \\\"[R]\\\" : \\\"[ ]\\\", canHack ? \\\"[H]\\\" : \\\"[ ]\\\", ram > 0 ? ns.nFormat(ram * 1e9, \\\"0b\\\") : \\\"-----\\\", stFormat(ns, time), ns.getServerSecurityLevel(hostname), ns.getServerMinSecurityLevel(hostname), ns.nFormat(ns.getServerMoneyAvailable(hostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(hostname), \\\"$0.000a\\\"));\\r\\n    }\\r\\n    const availableRam = hosts.reduce((tally, hostname) => tally + (ns.hasRootAccess(hostname) ? ns.getServerMaxRam(hostname) : 0), 0);\\r\\n    ns.tprintf(\\\"Total RAM available: %s\\\", ns.nFormat(availableRam * 1e9, \\\"0b\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jhd2wuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmF3bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTVFLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXpGLElBQUksT0FBTyxDQUFDO0FBQ1osTUFBTSxVQUFVLEdBQXFEO0lBQ2pFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztJQUNkLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNULENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztJQUNuQixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7SUFDakIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQ2YsQ0FBQztBQUVGLGlIQUFpSDtBQUNqSCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFjO0lBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZ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\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///34f19471-7914-4f1b-95ed-8d5e74f5be00\",\"moduleSequenceNumber\":16859},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///51da30a8-cf83-476b-9e7b-74cf22add097\",\"moduleSequenceNumber\":18738}],\"dependents\":[],\"ramUsage\":7.4,\"server\":\"home\",\"moduleSequenceNumber\":1567689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [[\\\"reserve\\\", Number.MAX_SAFE_INTEGER]];\\r\\nlet serverService;\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        //serverService = getServerService(ns);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(\\\"/lib/exec/const_weaken.js\\\", \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    for (const server of scriptableServers) {\\r\\n        const availableRam = server.availableRam();\\r\\n        const availableThreads = Math.floor(availableRam / ns.getScriptRam(\\\"/lib/exec/const_weaken.js\\\"));\\r\\n        if (availableThreads <= 0)\\r\\n            continue;\\r\\n        ns.exec(\\\"/lib/exec/const_weaken.js\\\", server.hostname, availableThreads, \\\"--target\\\", \\\"joesguns\\\");\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiZXhwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxJQUFJLE9BQU8sQ0FBQztBQUNaLE1BQU0sVUFBVSxHQUFxRCxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFFNUcsSUFBSSxhQUE0QixDQUFDO0FBRWpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSTtRQUNBLE9BQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9CLHVDQUF1QztRQUN2QyxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtRQUMvQyxFQUFFLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxPQUFPO0tBQ1Y7SUFFRCxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUUsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDekMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDdEU7SUFFRCxLQUFLLE1BQU0sTUFBTSxJQUFJLGlCQUFpQixFQUFFO1FBQ3BDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzQyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDO1FBRWpHLElBQUksZ0JBQWdCLElBQUksQ0FBQztZQUFFLFNBQVM7UUFFcEMsRUFBRSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztLQUNuRztBQUNMLENBQUMifQ==\",\"filename\":\"exp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///2cb0e27b-059c-4a23-8c6e-60b1077ba754\",\"moduleSequenceNumber\":1567686},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///f035c7aa-7b50-439a-81bd-00f2bbbe75df\",\"moduleSequenceNumber\":1567687},{\"filename\":\"exp.js\",\"url\":\"blob:file:///7b213309-23e4-4c2d-bc1c-32524a1ac12f\",\"moduleSequenceNumber\":1568637}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":1568637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HACKJS, GROWJS, WEAKENJS, llog, stFormat, CONSTSHAREJS } from \\\"/lib/util\\\";\\r\\nimport { ServerService, Server } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst BATCHSPACER = TSPACER * 4;\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SHARE_RAM = 4;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n    [\\\"goal\\\", Number.MAX_SAFE_INTEGER],\\r\\n    [\\\"rounds\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\", \\\"--goal\\\", \\\"--rounds\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    //////\\r\\n    const shortWeakenTime = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    // If we cant fit a single batch within the time limit, fail the allocation.\\r\\n    if (shortWeakenTime + BATCHSPACER > timeLimit)\\r\\n        return {\\r\\n            totalMoney: 0,\\r\\n            totalPercent: 0,\\r\\n            batchCount: 1000000,\\r\\n            hasPrimary: false,\\r\\n            batchLimit: 0,\\r\\n        };\\r\\n    const maxTimeLimitCycles = Math.floor((timeLimit - shortWeakenTime) / BATCHSPACER);\\r\\n    const maxWeakenLengthCycles = Math.floor(shortWeakenTime / BATCHSPACER);\\r\\n    const maxHackTimeCycles = Math.floor(hackTimeLong / BATCHSPACER);\\r\\n    const batchCountMax = Math.max(Math.min(maxTimeLimitCycles, maxWeakenLengthCycles, maxHackTimeCycles), 1);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"tl %d; wl %d; ht %d\\\", maxTimeLimitCycles, maxWeakenLengthCycles, maxHackTimeCycles);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    const result = {\\r\\n        totalMoney: 0,\\r\\n        totalPercent: 0,\\r\\n        batchCount: 0,\\r\\n        hasPrimary: false,\\r\\n        batchLimit: batchCountMax,\\r\\n    };\\r\\n    if (hackTimeLong < 5000)\\r\\n        return {\\r\\n            totalMoney: 0,\\r\\n            totalPercent: 0,\\r\\n            batchCount: 1000000,\\r\\n            hasPrimary: false,\\r\\n            batchLimit: 0,\\r\\n        };\\r\\n    let batchID = 0;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        // allocate primary thread\\r\\n        const bigBlock = servers\\r\\n            .map((a) => a.availableRam())\\r\\n            .filter((a) => a > 0)\\r\\n            .sort((a, b) => b - a)[0];\\r\\n        // We've run out of available ram, break out and execute reserved scripts\\r\\n        if (bigBlock === undefined || bigBlock < GROW_RAM)\\r\\n            break;\\r\\n        if (moneyDiff > 0 || securityDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            result.hasPrimary = true;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                weakenGrowThreads = threadCount;\\r\\n            }\\r\\n            else {\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            batchID++;\\r\\n            result.totalMoney += hackAmount;\\r\\n            result.totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    // fill remaining ram with share threads\\r\\n    for (const server of servers) {\\r\\n        const threads = server.threadsAvailable(SHARE_RAM);\\r\\n        if (threads <= 0)\\r\\n            continue;\\r\\n        server.reserveScript(CONSTSHAREJS, SHARE_RAM, threads, [\\\"--offset\\\", 0]);\\r\\n    }\\r\\n    result.batchCount = batchID;\\r\\n    return result;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    if (options.limit !== Number.MAX_SAFE_INTEGER)\\r\\n        options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    let targetServer;\\r\\n    let servers = [];\\r\\n    const simPlayer = ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\") ? ns.getPlayer() : undefined;\\r\\n    do {\\r\\n        await doSoften(ns);\\r\\n        servers = serverService\\r\\n            .getScriptableServers(options.reserve)\\r\\n            .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n        targetServer = await getBestTarget(ns, servers);\\r\\n        if (!targetServer)\\r\\n            return;\\r\\n        targetServer.reload();\\r\\n        const bestHackLimit = calcHackLimit(ns, targetServer, servers, [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1], options.limit, simPlayer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const totalPercent = allocateBatchResult.totalPercent;\\r\\n        const batchLimit = allocateBatchResult.batchLimit;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * BATCHSPACER;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * BATCHSPACER + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * BATCHSPACER + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * BATCHSPACER + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * BATCHSPACER + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.sprintf(\\\"%s (%s/s)\\\", ns.nFormat(totalMoney, \\\"$0.0a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.0a\\\")),\\r\\n            ns.sprintf(\\\"%d/%d/%.2f\\\", batchCount, batchLimit, bestHackLimit),\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n        // kill all launched share threads\\r\\n        for (const server of servers) {\\r\\n            const processes = ns.ps(server.hostname).filter((a) => a.filename === CONSTSHAREJS);\\r\\n            for (const process of processes) {\\r\\n                ns.kill(process.pid);\\r\\n            }\\r\\n        }\\r\\n    } while (ns.getPlayer().money < options.goal && --options.rounds > 0);\\r\\n}\\r\\nfunction getIncome(ns, targetServer, servers, timespan) {\\r\\n    const simPlayer = ns.getPlayer();\\r\\n    let timeleft = timespan;\\r\\n    let totalMoneyGained = 0;\\r\\n    while (timeleft > 0) {\\r\\n        const bestHackLimit = calcHackLimit(ns, targetServer, servers, [0.5, 0.75, 1], timeleft, simPlayer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, false, timeleft, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const usedPrimary = allocateBatchResult.hasPrimary;\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * BATCHSPACER;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        if (usedPrimary) {\\r\\n            timeleft -= cycleTime;\\r\\n            totalMoneyGained += totalMoney;\\r\\n        }\\r\\n        else {\\r\\n            const cyclesLeft = Math.ceil(timeleft / cycleTime);\\r\\n            timeleft -= cycleTime * cyclesLeft;\\r\\n            totalMoneyGained += totalMoney * cyclesLeft;\\r\\n        }\\r\\n    }\\r\\n    const totalTime = timespan - timeleft;\\r\\n    const hackChance = ns.formulas.hacking.hackChance(targetServer, simPlayer);\\r\\n    return (totalMoneyGained / (totalTime / 1000)) * hackChance; // $/s\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"soften.js\\\", \\\"home\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\nfunction calcHackLimit(ns, targetServer, servers, hackLimits, timeLimit, simPlayer) {\\r\\n    let bestHackLimit = 0;\\r\\n    let bestHackLimitValue = 0;\\r\\n    for (const hackLimit of hackLimits) {\\r\\n        const estimateServer = new Server(ns, targetServer);\\r\\n        const allocateBatchResult = allocateBatches(ns, estimateServer, servers, hackLimit, false, timeLimit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const weakenLevelCalc = estimateServer.weakenLevelForTime(batchCount * BATCHSPACER, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n        const weakenTime = estimateServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        const value = totalMoney / (cycleTime / 1000);\\r\\n        if (value > bestHackLimitValue) {\\r\\n            bestHackLimit = hackLimit;\\r\\n            bestHackLimitValue = value;\\r\\n        }\\r\\n        servers.map((a) => a.clearReservedScripts());\\r\\n    }\\r\\n    return bestHackLimit;\\r\\n}\\r\\nasync function getBestTarget(ns, servers) {\\r\\n    let targetServer;\\r\\n    if (options.target === \\\"\\\") {\\r\\n        const targets = serverService.getHackableServers(ns.getHackingLevel());\\r\\n        let targetIncomes = [];\\r\\n        for (const target of targets) {\\r\\n            targetIncomes.push([target, getIncome(ns, target, servers, options.limit)]);\\r\\n            await ns.sleep(10);\\r\\n        }\\r\\n        // the hub 29.6m/s\\r\\n        targetIncomes = targetIncomes.sort((a, b) => b[1] - a[1]);\\r\\n        // targetIncomes.forEach((a) => ns.tprintf(\\\"%20s: %s/s\\\", a[0].hostname, ns.nFormat(a[1], \\\"$0.000a\\\")));\\r\\n        targetServer = targetIncomes[0][0];\\r\\n    }\\r\\n    else {\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n        if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n            ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n    return targetServer;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUE2QixNQUFNLGtCQUFrQixDQUFDO0FBRXBGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUNwQixNQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWhDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQzdCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUNyQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQztBQUVwQixNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFdkIsU0FBUyx3QkFBd0IsQ0FBQyxJQUFxQixFQUFFLEdBQVcsRUFBRSxHQUFhO0lBQy9FLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdkQsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07UUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdEYsT0FBTztBQUNYLENBQUM7QUFTRCxTQUFTLG1CQUFtQixDQUFDLEVBQU0sRUFBRSxPQUFpQixFQUFFLE9BQWdCO0lBQ3BFLHNHQUFzRztJ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\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///762aa203-641e-4701-9f9f-916945e3a4d6\",\"moduleSequenceNumber\":1567686},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///934e0f50-2959-417d-adb6-1a23079cd89a\",\"moduleSequenceNumber\":1567687},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///766d9623-5a46-4137-b452-5b93c3dc6694\",\"moduleSequenceNumber\":1567686},{\"filename\":\"hack.js\",\"url\":\"blob:file:///18f230eb-11ba-4793-b413-1536210048e5\",\"moduleSequenceNumber\":1567722}],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"home\",\"moduleSequenceNumber\":1567722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, HACKJS, GROWJS, WEAKENJS, CONSTSHAREJS, CONSTWEAKENJS } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const killScriptList = [\\r\\n        HACKJS,\\r\\n        GROWJS,\\r\\n        WEAKENJS,\\r\\n        CONSTSHAREJS,\\r\\n        CONSTWEAKENJS,\\r\\n        \\\"hack.js\\\",\\r\\n        \\\"/lib/stanek/charge.js\\\",\\r\\n        \\\"/archive/hack_2.js\\\",\\r\\n        \\\"controller.js\\\"\\r\\n    ];\\r\\n    const allHostnames = allHosts(ns);\\r\\n    for (const hostname of allHostnames) {\\r\\n        const processes = ns.ps(hostname).filter((a) => killScriptList.includes(a.filename));\\r\\n        for (const process of processes) {\\r\\n            ns.kill(process.pid);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJrYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFNUYsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLGNBQWMsR0FBRztRQUNuQixNQUFNO1FBQ04sTUFBTTtRQUNOLFFBQVE7UUFDUixZQUFZO1FBQ1osYUFBYTtRQUNiLFNBQVM7UUFDVCx1QkFBdUI7UUFDdkIsb0JBQW9CO1FBQ3BCLGVBQWU7S0FDbEIsQ0FBQztJQUVGLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFlBQVksRUFBRTtRQUNqQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUVyRixLQUFLLE1BQU0sT0FBTyxJQUFJLFNBQVMsRUFBRTtZQUM3QixFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QjtLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///34d7f4e6-dc02-4b3e-808a-3622ec893eac\",\"moduleSequenceNumber\":355},{\"filename\":\"ka.js\",\"url\":\"blob:file:///a1c967ca-6042-4fe4-bdb8-7a09a1d4e8b9\",\"moduleSequenceNumber\":1083}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":1567692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const files = ns.ls(ns.getHostname());\\r\\n    const libs = files.filter((a) => a.indexOf(\\\"/lib\\\") !== -1);\\r\\n    const scripts = files.filter((a) => a.indexOf(\\\"/lib\\\") === -1 && a.indexOf(\\\".js\\\") !== -1);\\r\\n    const execs = files.filter((a) => a.indexOf(\\\".exe\\\") !== -1);\\r\\n    const others = files.filter((a) => !libs.includes(a) && !scripts.includes(a) && !execs.includes(a));\\r\\n    let maxFilenameLength = 0;\\r\\n    libs.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length - 5)));\\r\\n    scripts.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    execs.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    others.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    ns.tprintf(\\\"Scripts:\\\");\\r\\n    for (const file of scripts) {\\r\\n        const ram = ns.getScriptRam(file);\\r\\n        ns.tprintf(`  %${maxFilenameLength}s %8s`, file, ns.nFormat(ram * 1e9, \\\"0.00b\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"Library Scripts:\\\");\\r\\n    for (const file of libs) {\\r\\n        const ram = ns.getScriptRam(file);\\r\\n        const subName = file.substring(5);\\r\\n        ns.tprintf(`  %${maxFilenameLength}s %8s`, subName, ns.nFormat(ram * 1e9, \\\"0.00b\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"Executables:\\\");\\r\\n    for (const file of execs) {\\r\\n        ns.tprintf(`  %${maxFilenameLength}s`, file);\\r\\n    }\\r\\n    ns.tprintf(\\\"Other:\\\");\\r\\n    for (const file of others) {\\r\\n        ns.tprintf(`  %${maxFilenameLength}s`, file);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFFdEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBHLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvRSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZCLEtBQUssTUFBTSxJQUFJLElBQUksT0FBTyxFQUFFO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLGlCQUFpQixPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ3BGO0lBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9CLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0saUJBQWlCLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDdkY7SUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3RCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQixLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sRUFBRTtRQUN2QixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNoRDtBQUNMLENBQUMifQ==\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///a5e119dc-edec-454e-9cfd-2966ef8330c9\",\"moduleSequenceNumber\":300759}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":1567693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, HACKJS, GROWJS, WEAKENJS, softenServer, doProgramBuys, CONSTSHAREJS } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    const hosts = allHosts(ns);\\r\\n    for (const hostname of hosts) {\\r\\n        softenServer(ns, hostname);\\r\\n        if (hostname !== \\\"home\\\") {\\r\\n            for (const script of [HACKJS, GROWJS, WEAKENJS, CONSTSHAREJS])\\r\\n                await ns.scp(script, hostname);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdGVuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic29mdGVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFMUcsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTNCLEtBQUssTUFBTSxRQUFRLElBQUksS0FBSyxFQUFFO1FBQzFCLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0IsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO1lBQ3JCLEtBQUssTUFBTSxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUM7Z0JBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNqRztLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///d0cd0e43-abb9-47ec-90a9-f0603e38aba6\",\"moduleSequenceNumber\":1567686},{\"filename\":\"soften.js\",\"url\":\"blob:file:///8ff59ac4-8d77-48f2-a61c-d7d8053dff1d\",\"moduleSequenceNumber\":1567723}],\"dependents\":[],\"ramUsage\":7.3,\"server\":\"home\",\"moduleSequenceNumber\":1567723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { mapHosts } from \\\"/lib/util\\\";\\r\\nconst SPECIAL_HOSTS = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\nexport async function main(ns) {\\r\\n    const hostPaths = mapHosts(ns);\\r\\n    for (const hostname of SPECIAL_HOSTS) {\\r\\n        const path = hostPaths[hostname];\\r\\n        if (!path)\\r\\n            continue;\\r\\n        let pathStr = \\\"\\\";\\r\\n        for (const curPath of path) {\\r\\n            if (pathStr === \\\"\\\")\\r\\n                pathStr = curPath;\\r\\n            else\\r\\n                pathStr = pathStr + \\\" -> \\\" + curPath;\\r\\n        }\\r\\n        ns.tprint(pathStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2UuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJ0cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXpGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRS9CLEtBQUssTUFBTSxRQUFRLElBQUksYUFBYSxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSTtZQUFFLFNBQVM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3hCLElBQUksT0FBTyxLQUFLLEVBQUU7Z0JBQUUsT0FBTyxHQUFHLE9BQU8sQ0FBQzs7Z0JBQ2pDLE9BQU8sR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztTQUM3QztRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdEI7QUFDTCxDQUFDIn0=\",\"filename\":\"trace.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///327a49b7-8e98-40a8-b1eb-a7a0bff74c04\",\"moduleSequenceNumber\":121807},{\"filename\":\"trace.js\",\"url\":\"blob:file:///eab06304-2750-4425-b2da-2462141ce83a\",\"moduleSequenceNumber\":121839}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":1567695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"allow\\\", 1],\\r\\n    [\\\"quiet\\\", false],\\r\\n    [\\\"execute\\\", false],\\r\\n    [\\\"a\\\", 1],\\r\\n    [\\\"q\\\", false],\\r\\n    [\\\"e\\\", false]\\r\\n];\\r\\n// returns the actual number of servers to buy that would be better than the ones we already have\\r\\nfunction compareToActualServers(ns, ram, numServers) {\\r\\n    // find the number of servers we own that have ram sizes > ram\\r\\n    // ns.tprintf(\\\"comparing %s %s\\\", ram, numServers);\\r\\n    const betterServerCount = ns.getPurchasedServers().filter((x) => ns.getServerMaxRam(x) >= ram).length;\\r\\n    const freeSpots = ns.getPurchasedServerLimit() - betterServerCount;\\r\\n    return Math.min(numServers, freeSpots);\\r\\n}\\r\\nfunction getCurrentRamSize(ns) {\\r\\n    return ns.getPurchasedServers().reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0);\\r\\n}\\r\\nfunction getFinalRamSize(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        pservers.shift();\\r\\n    }\\r\\n    return pservers.reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0) + ram * numServers;\\r\\n}\\r\\nfunction buyServers(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    const deleteServers = [];\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        const pserver = pservers.shift();\\r\\n        if (pserver)\\r\\n            deleteServers.push(pserver);\\r\\n    }\\r\\n    for (const server of deleteServers) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Deleting %s with %d RAM\\\", server, ns.getServerMaxRam(server));\\r\\n        ns.killall(server);\\r\\n        ns.deleteServer(server);\\r\\n    }\\r\\n    let serverIndex = 0;\\r\\n    function getNextServerName() {\\r\\n        while (true) {\\r\\n            const serverName = \\\"pserv-\\\" + serverIndex;\\r\\n            if (!ns.getPurchasedServers().includes(serverName))\\r\\n                return serverName;\\r\\n            else\\r\\n                serverIndex++;\\r\\n        }\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n    const cost = ns.getPurchasedServerCost(ram);\\r\\n    for (let i = 0; i < numServers; i++) {\\r\\n        const serverName = getNextServerName();\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Buying %s with %d RAM for %s\\\", serverName, ram, ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n        ns.purchaseServer(serverName, ram);\\r\\n    }\\r\\n    return cost * numServers;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    options = ns.flags(argsSchema);\\r\\n    options.allow = options.allow !== 1 ? options.allow : options.a;\\r\\n    options.quiet = options.quiet || options.q;\\r\\n    options.execute = options.execute || options.e;\\r\\n    let maxPow = 8; // Minimum ram is 256\\r\\n    let sizes = [];\\r\\n    const cash = ns.getPlayer().money * options.allow;\\r\\n    if (cash < 0)\\r\\n        return;\\r\\n    const currentSize = getCurrentRamSize(ns);\\r\\n    while (true) {\\r\\n        const curRam = Math.pow(2, maxPow);\\r\\n        const cost = ns.getPurchasedServerCost(curRam);\\r\\n        if (cost <= cash) {\\r\\n            const numServers = compareToActualServers(ns, curRam, Math.min(Math.floor(cash / cost), ns.getPurchasedServerLimit()));\\r\\n            if (numServers > 0)\\r\\n                sizes.push([curRam, numServers, getFinalRamSize(ns, curRam, numServers)]);\\r\\n            maxPow++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (sizes.length === 0) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Not enough cash to buy an upgrade\\\");\\r\\n        return;\\r\\n    }\\r\\n    sizes = sizes.sort((a, b) => b[2] - a[2]);\\r\\n    const [ram, numServers, finalSize] = sizes[0];\\r\\n    for (const [ram, numServers, finalSize] of sizes) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"%s %s %s\\\", ram, numServers, finalSize);\\r\\n    }\\r\\n    if (!options.execute) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Check: Buying %d %dGB servers, increasing the size from %d to %d for %s\\\", numServers, ram, currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    buyServers(ns, ram, numServers);\\r\\n    if (!options.quiet)\\r\\n        ns.tprintf(\\\"Increased available server ram from %d to %d for %s\\\", currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3NlcnZlcl9hbGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJidXlfc2VydmVyX2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSw4REFBOEQ7QUFDOUQsSUFBSSxPQUFZLENBQUM7QUFDakIsTUFBTSxVQUFVLEdBQXFEO0lBQ2pFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNaLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztJQUNoQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7SUFDbEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ1IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQ2YsQ0FBQztBQUVGLGlHQUFpRztBQUNqRyxTQUFTLHNCQUFzQixDQUFDLEVBQU0sRUFBRSxHQUFXLEVBQUUsVUFBa0I7SUFDbkUsOERBQThEO0lBQzlELGtEQUFrRDtJQUNsRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEcsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsaUJBQWlCLENBQUM7SUFDbkUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxFQUFNO0lBQzdCLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLEVB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\",\"filename\":\"buy_server_all.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"buy_server_all.js\",\"url\":\"blob:file:///a0674af4-c434-4a04-b497-34e4ce12cddf\",\"moduleSequenceNumber\":1568636}],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":1568636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [[\\\"reserve\\\", Number.MAX_SAFE_INTEGER]];\\r\\nlet serverService;\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        //serverService = getServerService(ns);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(\\\"/lib/exec/const_share.js\\\", \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    for (const server of scriptableServers) {\\r\\n        const availableRam = server.availableRam();\\r\\n        const availableThreads = Math.floor(availableRam / ns.getScriptRam(\\\"/lib/exec/const_share.js\\\"));\\r\\n        if (availableThreads <= 0)\\r\\n            continue;\\r\\n        ns.exec(\\\"/lib/exec/const_share.js\\\", server.hostname, availableThreads);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsSUFBSSxPQUFPLENBQUM7QUFDWixNQUFNLFVBQVUsR0FBcUQsQ0FBQyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0FBRTVHLElBQUksYUFBNEIsQ0FBQztBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLElBQUk7UUFDQSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQix1Q0FBdUM7UUFDdkMsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3pDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixPQUFPO0tBQ1Y7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUU7UUFDL0MsRUFBRSxDQUFDLE9BQU8sQ0FBQyw0Q0FBNEMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsT0FBTztLQUNWO0lBRUQsTUFBTSxpQkFBaUIsR0FBRyxhQUFhLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTlFLEtBQUssTUFBTSxNQUFNLElBQUksaUJBQWlCLEVBQUU7UUFDcEMsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLE1BQU07WUFBRSxTQUFTO1FBQ3pDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JFO0lBRUQsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0MsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQztRQUVoRyxJQUFJLGdCQUFnQixJQUFJLENBQUM7WUFBRSxTQUFTO1FBRXBDLEVBQUUsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzFFO0FBQ0wsQ0FBQyJ9\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///ec17ad73-8b6a-493a-aad6-c073ca117140\",\"moduleSequenceNumber\":114672},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///2e0ff331-c5fc-4284-8f91-7593d1f6ebbd\",\"moduleSequenceNumber\":114673},{\"filename\":\"share.js\",\"url\":\"blob:file:///de15d1dc-8af5-4ad7-a473-4dc8dc0fa71e\",\"moduleSequenceNumber\":142661}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":1567697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stdFormat } from \\\"/lib/util\\\";\\r\\nlet lastEl;\\r\\nconst roots = [];\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    if (ms <= 0)\\r\\n        return \\\"--\\\";\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\nfunction insertAfter(newNode, existingNode) {\\r\\n    if (!existingNode.parentNode)\\r\\n        throw \\\"insertAfter init failed\\\";\\r\\n    if (existingNode.nextSibling)\\r\\n        return existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\\r\\n    else\\r\\n        return existingNode.parentNode.appendChild(newNode);\\r\\n}\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const newRootEl = hookRootEl?.cloneNode(true);\\r\\n    if (!hookRootEl || !newRootEl)\\r\\n        throw \\\"addBottomLine init failed\\\";\\r\\n    const child1 = newRootEl?.children[0]?.children[0];\\r\\n    if (child1) {\\r\\n        child1.innerText = \\\"\\\";\\r\\n    }\\r\\n    const child2 = newRootEl?.children[0]?.children[0];\\r\\n    if (child2) {\\r\\n        child2.innerText = \\\"\\\";\\r\\n        child2.removeAttribute(\\\"id\\\");\\r\\n    }\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addBottomLine init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newRootEl;\\r\\n}\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl = newRootEl?.children[0]?.firstChild;\\r\\n    if (!hookRootEl || !newRootEl || !newEl)\\r\\n        throw \\\"addSingle init failed\\\";\\r\\n    if (newRootEl?.childNodes[1])\\r\\n        newRootEl.removeChild(newRootEl.childNodes[1]);\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addSingle init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newEl;\\r\\n}\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl1 = newRootEl?.children[0]?.children[0];\\r\\n    const newEl2 = newRootEl?.children[1]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!hookRootEl || !newRootEl || !newEl1 || !newEl2)\\r\\n        throw \\\"addDouble init failed\\\";\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addDouble init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackProgressEl = overviewEl?.children[3];\\r\\n    const newRootEl = hackProgressEl?.cloneNode(true);\\r\\n    const newSub1 = newRootEl?.children[0]?.children[0];\\r\\n    const newSub2 = newRootEl?.children[0]?.children[0]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!newRootEl || !newSub1 || !newSub2)\\r\\n        throw \\\"addProgress init failed\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = newRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addProgress init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) {\\r\\n            root.parentNode?.removeChild(root);\\r\\n        }\\r\\n    });\\r\\n    try {\\r\\n        const [clockEl, karmaEl] = addDouble();\\r\\n        const targetEl = addSingle();\\r\\n        const incomeEl = addSingle();\\r\\n        const [stateEl, countdownEl] = addDouble();\\r\\n        const [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n        addBottomLine();\\r\\n        // target faction\\r\\n        // target rep (rep/s) || target money\\r\\n        // current rep | rep countdown time\\r\\n        // rep progress\\r\\n        const [factionTarget, factionTargetMoney] = addDouble();\\r\\n        const [factionTargetRep, factionTargetEndTime] = addDouble();\\r\\n        const [factionRepTotal, factionCountdown] = addDouble();\\r\\n        const [factionProgress1, factionProgress2] = addProgress();\\r\\n        addBottomLine();\\r\\n        karmaEl.classList.toggle(\\\"makeStyles-hack-17\\\", false);\\r\\n        karmaEl.classList.add(\\\"makeStyles-hp-15\\\");\\r\\n        const port1 = ns.getPortHandle(1);\\r\\n        const factionPort = ns.getPortHandle(2);\\r\\n        let startTime = 0;\\r\\n        let endTime = 1000;\\r\\n        let fullTime = 1000;\\r\\n        while (true) {\\r\\n            if (!port1.empty()) {\\r\\n                const data = JSON.parse(port1.peek().toString());\\r\\n                startTime = new Date(data[0]).getTime();\\r\\n                endTime = new Date(startTime + data[1]).getTime();\\r\\n                fullTime = endTime - startTime;\\r\\n                const date = new Date();\\r\\n                const curTime = date.getTime();\\r\\n                // Update Clock\\r\\n                // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n                // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                // Update Karma\\r\\n                karmaEl.innerText = `k: ${ns.heart.break().toFixed(0)}`;\\r\\n                // Update Target & Income\\r\\n                targetEl.innerText = data[2];\\r\\n                incomeEl.innerText = data[3];\\r\\n                // Update State & Countdown\\r\\n                stateEl.innerText = data[4];\\r\\n                countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n                // Update Progress\\r\\n                const tvalue = curTime - startTime;\\r\\n                const nvalue = (tvalue / fullTime) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (startTime === 0 || wholeValue > 100) {\\r\\n                    port1.clear();\\r\\n                    transform = 100;\\r\\n                    wholeValue = 0;\\r\\n                }\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                const date = new Date();\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                karmaEl.innerText = ns.heart.break().toFixed(0).toString();\\r\\n                targetEl.innerText = \\\"NO TARGET\\\";\\r\\n                incomeEl.innerText = \\\"\\\";\\r\\n                stateEl.innerText = \\\"\\\";\\r\\n                countdownEl.innerText = \\\"\\\";\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n            }\\r\\n            if (!factionPort.empty()) {\\r\\n                const data = JSON.parse(factionPort.peek().toString());\\r\\n                // Update Faction Name\\r\\n                const factionName = data[0];\\r\\n                factionTarget.innerText = factionName;\\r\\n                // Update Faction Rep Target\\r\\n                // target rep (rep/s)\\r\\n                const repTarget = Number(data[1]);\\r\\n                const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                factionTargetRep.innerText = ns.sprintf(\\\"%s (%s/s)    \\\", ns.nFormat(repTarget, \\\"0.00a\\\"), ns.nFormat(repGainPerMs * 1000, \\\"0.00a\\\"));\\r\\n                // update Money Target\\r\\n                factionTargetMoney.innerText = ns.nFormat(data[2], \\\"$0.00a\\\");\\r\\n                // Update Current Faction Rep\\r\\n                const currentRep = ns.singularity.getFactionRep(factionName) +\\r\\n                    (ns.getPlayer().currentWorkFactionName === factionName ? ns.getPlayer().workRepGained : 0);\\r\\n                factionRepTotal.innerText = ns.nFormat(currentRep, \\\"0.00a\\\");\\r\\n                // Update Rep Countdown Timer\\r\\n                if (repGainPerMs > 0) {\\r\\n                    factionTargetEndTime.innerText = stdFormat(ns, (repTarget - currentRep) / repGainPerMs);\\r\\n                    factionCountdown.innerText = stFormat(ns, (repTarget - currentRep) / repGainPerMs, false);\\r\\n                }\\r\\n                else {\\r\\n                    factionTargetEndTime.innerText = \\\"--\\\";\\r\\n                    factionCountdown.innerText = \\\"--\\\";\\r\\n                }\\r\\n                // Update Progress\\r\\n                const tvalue = currentRep;\\r\\n                const nvalue = (tvalue / repTarget) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (wholeValue > 100) {\\r\\n                    factionPort.clear();\\r\\n                    transform = 0;\\r\\n                    wholeValue = 100;\\r\\n                }\\r\\n                factionProgress1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                factionProgress2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                factionTarget.innerText = \\\"\\\";\\r\\n                factionTargetRep.innerText = \\\"\\\";\\r\\n                factionTargetMoney.innerText = \\\"\\\";\\r\\n                factionRepTotal.innerText = \\\"\\\";\\r\\n                factionCountdown.innerText = \\\"\\\";\\r\\n                factionTargetEndTime.innerText = \\\"\\\";\\r\\n                factionProgress1.setAttribute(\\\"aria-valuenow\\\", \\\"100\\\");\\r\\n                factionProgress2.setAttribute(\\\"style\\\", \\\"transform: translateX(-0%);\\\");\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjbG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXRDLElBQUksTUFBbUIsQ0FBQztBQUN4QixNQUFNLEtBQUssR0FBa0IsRUFBRSxDQUFDO0FBRWhDLFNBQVMsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLElBQUksRUFBRSxRQUFRLEdBQUcsS0FBSztJQUNqRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFekIsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUMzQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUM7SUFFOUIsSUFBSSxNQUFNLEVBQUU7UUFDUixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0Is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\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///01ae8ff8-a9ad-40af-993a-94c4d0aaf428\",\"moduleSequenceNumber\":1567686},{\"filename\":\"clock.js\",\"url\":\"blob:file:///8b57fa9e-edd4-4253-a64f-05adda8eb136\",\"moduleSequenceNumber\":1567721}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":1567721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    function favorToRep(f) {\\r\\n        const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log(r / 25000 + 1) / Math.log(1.02);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    for (const faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.singularity.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(ns.getFavorToDonate());\\r\\n        const currentRep = ns.singularity.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n        const fTotal = repToFavor(currentRep + storedRep);\\r\\n        const fGain = fTotal - favor;\\r\\n        if (favor > 150)\\r\\n            continue;\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 150) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJmYXZvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMzQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUNwRCxNQUFNLFVBQVUsR0FDWixFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7WUFDckMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNqRCxNQUFNLFFBQVEsR0FBRyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBRXhDLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFDbEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUU3QixJQUFJLEtBQUssR0FBRyxHQUFHO1lBQUUsU0FBUztRQUUxQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxLQUFLLEdBQUcsS0FBSyxHQUFHLEdBQUcsRUFBRTtZQUNyQixVQUFVLEdBQUcsWUFBWSxDQUFDO1NBQzdCO1FBRUQsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLElBQUksUUFBUSxHQUFHLFNBQVMsRUFBRTtZQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUN2RjtRQUVELEVBQUUsQ0FBQyxPQUFPLENBQUMsOEJBQThCLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDekc7QUFDTCxDQUFDIn0=\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///5abd1cb3-4e0b-4d00-8605-9c926a8f2364\",\"moduleSequenceNumber\":73163}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":1567699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Augmentation } from \\\"/lib/augmentation/augmentation\\\";\\r\\nimport { allHosts, CONSTWEAKENJS, doBuyAndSoftenAll, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService } from \\\"/services/server\\\";\\r\\nvar ControllerState;\\r\\n(function (ControllerState) {\\r\\n    ControllerState[ControllerState[\\\"init\\\"] = 0] = \\\"init\\\";\\r\\n    ControllerState[ControllerState[\\\"hack\\\"] = 1] = \\\"hack\\\";\\r\\n    ControllerState[ControllerState[\\\"join\\\"] = 2] = \\\"join\\\";\\r\\n    ControllerState[ControllerState[\\\"buying\\\"] = 3] = \\\"buying\\\";\\r\\n})(ControllerState || (ControllerState = {}));\\r\\nconst CS = ControllerState;\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nfunction favorToRep(f) {\\r\\n    const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n    return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    //ns.tail();\\r\\n    const serverService = new ServerService(ns);\\r\\n    if (ns.getRunningScript(\\\"clock.js\\\", \\\"home\\\") === null)\\r\\n        ns.exec(\\\"clock.js\\\", \\\"home\\\");\\r\\n    let state = CS.init;\\r\\n    let waitPID = 0;\\r\\n    let doExp = true;\\r\\n    let doServerBuys = true;\\r\\n    while (true) {\\r\\n        // check waitPID for a state switch;\\r\\n        if (ns.getRunningScript(waitPID) === null) {\\r\\n            waitPID = 0;\\r\\n            switch (state) {\\r\\n                case CS.init:\\r\\n                    state = CS.hack;\\r\\n                    break;\\r\\n                case CS.hack:\\r\\n                    state = CS.join;\\r\\n                    break;\\r\\n                case CS.join:\\r\\n                    state = CS.buying;\\r\\n                    break;\\r\\n                case CS.buying:\\r\\n                    state = CS.hack;\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (waitPID === 0) {\\r\\n            switch (state) {\\r\\n                case CS.hack:\\r\\n                    waitPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n                    break;\\r\\n                case CS.join:\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const hackPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n        while (ns.getRunningScript(hackPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        if (ns.getPlayer().money > 100000000) {\\r\\n            const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1, \\\"-c\\\");\\r\\n            while (ns.getRunningScript(joinPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        // check to see what faction should be targeted\\r\\n        // 1) tian di hui 6.25k - Social Negotiation Assistant (S.N.A)\\r\\n        // 2) cybersec to 10k - Cranial Signal Processors - Gen I\\r\\n        // 3) Nitesec 45k - CRTX42-AA Gene Modification\\r\\n        // 4) The Black Hand 100k\\r\\n        // 5) Bitrunners 65k\\r\\n        // 6) Bitrunners 385k\\r\\n        // 7) Bitrunners Bribe\\r\\n        // 8) Daedalus 65k\\r\\n        // 9) Daedalus 385k\\r\\n        // 10) Daedalus Bribe\\r\\n        // 11) World Daemon\\r\\n        const augTargets = [\\r\\n            {\\r\\n                faction: \\\"Tian Di Hui\\\",\\r\\n                aug: \\\"Social Negotiation Assistant (S.N.A)\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"CyberSec\\\",\\r\\n                aug: \\\"Cranial Signal Processors - Gen I\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"NiteSec\\\",\\r\\n                aug: \\\"CRTX42-AA Gene Modification\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"The Black Hand\\\",\\r\\n                aug: \\\"The Black Hand\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Chongqing\\\",\\r\\n                aug: \\\"Neuregen Gene Modification\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"BitRunners\\\",\\r\\n                aug: \\\"Embedded Netburner Module Core V2 Upgrade\\\"\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Daedalus\\\",\\r\\n                aug: \\\"The Red Pill\\\"\\r\\n            },\\r\\n        ];\\r\\n        let doInstall = false;\\r\\n        let allInstalled = true;\\r\\n        for (const augTarget of augTargets) {\\r\\n            const targetAug = new Augmentation(ns, augTarget.aug, augTarget.faction);\\r\\n            const augs = ns\\r\\n                .singularity.getAugmentationsFromFaction(augTarget.faction)\\r\\n                .map((name) => {\\r\\n                return new Augmentation(ns, name, augTarget.faction);\\r\\n            })\\r\\n                .filter((a) => a.rep <= targetAug.rep && !a.owned && !a.installed)\\r\\n                .sort((a, b) => a.rep - b.rep);\\r\\n            let goalCost = 0;\\r\\n            let multpow = 0;\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            for (const aug of augs) {\\r\\n                goalCost += aug.price * Math.pow(multmult, multpow);\\r\\n                multpow++;\\r\\n            }\\r\\n            if (!targetAug.owned) {\\r\\n                let overrideDoInstall = false;\\r\\n                allInstalled = false;\\r\\n                if (ns.singularity.checkFactionInvitations().includes(augTarget.faction))\\r\\n                    ns.singularity.joinFaction(augTarget.faction);\\r\\n                ns.singularity.workForFaction(augTarget.faction, \\\"Hacking Contracts\\\", true);\\r\\n                if (targetAug.purchaseable)\\r\\n                    doInstall = true;\\r\\n                if (targetAug.rep > favorToRep(ns.getFavorToDonate())) {\\r\\n                    const favor = ns.singularity.getFactionFavor(augTarget.faction);\\r\\n                    const targetRep = favorToRep(ns.getFavorToDonate());\\r\\n                    const currentRep = ns.singularity.getFactionRep(augTarget.faction) +\\r\\n                        (ns.getPlayer().currentWorkFactionName === augTarget.faction\\r\\n                            ? ns.getPlayer().workRepGained\\r\\n                            : 0);\\r\\n                    const storedRep = Math.max(0, favorToRep(favor));\\r\\n                    const targetRep15Percent = targetRep * 0.15;\\r\\n                    const totalRep = currentRep + storedRep;\\r\\n                    // first pass\\r\\n                    if (totalRep < targetRep15Percent && favor < 25) {\\r\\n                        const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                        const msToRep = (targetRep15Percent - totalRep) / repGainPerMS;\\r\\n                        ns.tprintf(\\\"Time For %s %d => %d: %s\\\", augTarget.faction, totalRep, targetRep15Percent, stFormat(ns, msToRep));\\r\\n                    }\\r\\n                    if (totalRep >= targetRep15Percent && favor < 25) {\\r\\n                        overrideDoInstall = true;\\r\\n                        doInstall = true;\\r\\n                    }\\r\\n                    // second pass\\r\\n                    if (totalRep < targetRep && favor < ns.getFavorToDonate()) {\\r\\n                        const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                        const msToRep = (targetRep - totalRep) / repGainPerMS;\\r\\n                        ns.tprintf(\\\"Time For %s %d => %d: %s\\\", augTarget.faction, totalRep, targetRep, stFormat(ns, msToRep));\\r\\n                    }\\r\\n                    if (totalRep > targetRep && favor < ns.getFavorToDonate()) {\\r\\n                        overrideDoInstall = true;\\r\\n                        doInstall = true;\\r\\n                    }\\r\\n                    // third pass\\r\\n                    if (favor > ns.getFavorToDonate() && currentRep < targetAug.rep) {\\r\\n                        const donateAmt = 1e6 * ((targetAug.rep - currentRep) / ns.getPlayer().faction_rep_mult);\\r\\n                        if (donateAmt < ns.getPlayer().money) {\\r\\n                            ns.singularity.donateToFaction(augTarget.faction, donateAmt);\\r\\n                            doInstall = true;\\r\\n                        }\\r\\n                        else {\\r\\n                            goalCost += donateAmt;\\r\\n                        }\\r\\n                    }\\r\\n                    if (ns.getPlayer().money < goalCost && !overrideDoInstall) {\\r\\n                        ns.tprintf(\\\"Controller: Target Cash %s\\\", ns.nFormat(goalCost, \\\"$0.000a\\\"));\\r\\n                        if (doInstall)\\r\\n                            doServerBuys = false;\\r\\n                        doInstall = false;\\r\\n                    }\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (doInstall) {\\r\\n            ns.singularity.stopAction();\\r\\n            const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, \\\"-g\\\");\\r\\n            while (ns.getRunningScript(mcpPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(joinPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(cctPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n        }\\r\\n        if (allInstalled) {\\r\\n            // if we have the red pill and we can hack the world daemon, ascend\\r\\n            if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\"))\\r\\n                ns.exec(\\\"ascend.js\\\", \\\"home\\\", 1);\\r\\n            // level up until we can hack the world daemon\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            let ngPrice = ns.singularity.getAugmentationPrice(\\\"NeuroFlux Governor\\\");\\r\\n            let ngRepReq = ns.singularity.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n            let total = 0;\\r\\n            for (let i = 0; i < 10; i++) {\\r\\n                total += ngPrice;\\r\\n                ngPrice = ngPrice * 1.14 * multmult;\\r\\n                ngRepReq *= 1.14;\\r\\n            }\\r\\n            const donateAmt = 1e6 * (ngRepReq / ns.getPlayer().faction_rep_mult);\\r\\n            if (donateAmt + total <= ns.getPlayer().money) {\\r\\n                ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n            }\\r\\n        }\\r\\n        const servers = serverService.getScriptableServers(HOME_RESERVE_RAM);\\r\\n        const availableRamBefore = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        doBuyAndSoftenAll(ns);\\r\\n        if (ns.getPlayer().money * 0.25 > ns.singularity.getUpgradeHomeRamCost())\\r\\n            ns.singularity.upgradeHomeRam();\\r\\n        if (ns.getPlayer().money < 1000000000 && doServerBuys) {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.5, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        else {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.25, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        const availableRamAfter = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        if (availableRamBefore < availableRamAfter || doExp) {\\r\\n            doExp = false;\\r\\n            ns.exec(\\\"exp.js\\\", \\\"home\\\", 1, \\\"--reserve\\\", HOME_RESERVE_RAM);\\r\\n            await ns.sleep(60 * 1000);\\r\\n            // kill all weaken scripts\\r\\n            const allHostnames = allHosts(ns);\\r\\n            for (const hostname of allHostnames) {\\r\\n                const processes = ns.ps(hostname).filter((a) => a.filename === CONSTWEAKENJS);\\r\\n                for (const process of processes) {\\r\\n                    ns.kill(process.pid);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWNwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibWNwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELElBQUssZUFLSjtBQUxELFdBQUssZUFBZTtJQUNoQixxREFBSSxDQUFBO0lBQ0oscURBQUksQ0FBQTtJQUNKLHFEQUFJLENBQUE7SUFDSix5REFBTSxDQUFBO0FBQ1YsQ0FBQyxFQUxJLGVBQWUsS0FBZixlQUFlLFFBS25CO0FBRUQsTUFBTSxFQUFFLEdBQUcsZUFBZSxDQUFDO0FBRTNCLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBRTdCLFNBQVMsVUFBVSxDQUFDLENBQVM7SUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7QUFDM0UsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLFlBQVk7SUFDWixNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU1QyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxV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\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///d597a4a5-6960-42d8-81cb-42132d4ffd4f\",\"moduleSequenceNumber\":91410},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///894fdc88-a0ce-42f9-a1bd-5e2108b95bd0\",\"moduleSequenceNumber\":91411},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///726f0342-d86b-4bda-99e8-5602d5d1651e\",\"moduleSequenceNumber\":91410},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///2a5f07a5-e04d-413e-a19c-3071a75ac86b\",\"moduleSequenceNumber\":91410},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///9466e2e5-5732-43b6-84c6-18b19d96cd3b\",\"moduleSequenceNumber\":91425},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///5ee6b0d2-c5e6-416b-b792-d6a4f3394d5e\",\"moduleSequenceNumber\":96272}],\"dependents\":[],\"ramUsage\":66,\"server\":\"home\",\"moduleSequenceNumber\":1567700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\n// AUG NOTES:\\r\\n// CyberSec - Cranial Signal Processors - $70m [10k]\\r\\n// NiteSec - CRTX42-AA Gene Modification - $225m [45k]\\r\\n// The Black Hand - The Black Hand - $550m [100k]\\r\\nexport class Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.singularity.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.singularity.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.singularity.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.singularity.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.singularity.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.singularity.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.singularity.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    printAugStats(ns) {\\r\\n        for (const [key, val] of Object.entries(this.stats)) {\\r\\n            ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n        }\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful(all = false) {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        if (all)\\r\\n            return true;\\r\\n        // if (this.stats.crime_money_mult) return true;\\r\\n        // if (this.stats.crime_success_mult) return true;                    \\r\\n        if (this.stats.company_rep_mult)\\r\\n            return true;\\r\\n        if (this.stats.faction_rep_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_money_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_money_mult) return true;\\r\\n        // if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2F1Z21lbnRhdGlvbi9hdWdtZW50YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVwQyxhQUFhO0FBQ2Isb0RBQW9EO0FBQ3BELHNEQUFzRDtBQUN0RCxpREFBaUQ7QUFFakQsTUFBTSxPQUFPLFlBQVk7SUFDckIsSUFBSSxDQUFTO0lBQ2IsT0FBTyxDQUFTO0lBQ2hCLEtBQUssQ0FBUztJQUNkLEdBQUcsQ0FBUztJQUNaLEtBQUssQ0FBb0I7SUFDekIsS0FBSyxDQUFVO0lBQ2YsU0FBUyxDQUFVO0lBQ25CLFlBQVksQ0FBVTtJQUN0QixHQUFHLENBQVM7SUFDWixHQUFHLENBQVM7SUFFWixZQUFZLEVBQU0sRUFBRSxJQUFZLEVBQUUsT0FBZTtRQUM3QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUM3RCxNQUFNLFVBQVUsR0FDWixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RixFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMs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\",\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.1,\"server\":\"home\",\"moduleSequenceNumber\":1567701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\n// AUG NOTES:\\r\\n// CyberSec - Cranial Signal Processors - $70m [10k]\\r\\n// NiteSec - CRTX42-AA Gene Modification - $225m [45k]\\r\\n// The Black Hand - The Black Hand - $550m [100k]\\r\\nexport class Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    printAugStats(ns) {\\r\\n        for (const [key, val] of Object.entries(this.stats)) {\\r\\n            ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n        }\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful() {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        return true;\\r\\n        // if (this.stats.crime_money_mult) return true;\\r\\n        // if (this.stats.crime_success_mult) return true;                    \\r\\n        // if (this.stats.company_rep_mult) return true;\\r\\n        // if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_money_mult) return true;\\r\\n        // if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXVnbWVudGF0aW9uL2F1Z21lbnRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDLGFBQWE7QUFDYixvREFBb0Q7QUFDcEQsc0RBQXNEO0FBQ3RELGlEQUFpRDtBQUVqRCxNQUFNLE9BQU8sWUFBWTtJQUNyQixJQUFJLENBQVM7SUFDYixPQUFPLENBQVM7SUFDaEIsS0FBSyxDQUFTO0lBQ2QsR0FBRyxDQUFTO0lBQ1osS0FBSyxDQUFvQjtJQUN6QixLQUFLLENBQVU7SUFDZixTQUFTLENBQVU7SUFDbkIsWUFBWSxDQUFVO0lBQ3RCLEdBQUcsQ0FBUztJQUNaLEdBQUcsQ0FBUztJQUVaLFlBQVksRUFBTSxFQUFFLElBQVksRUFBRSxPQUFlO1FBQzdDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNqRCxNQUFNLFVBQVUsR0FDWixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RixFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsR0FB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\",\"filename\":\"/augmentation/augmentation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.1,\"server\":\"home\",\"moduleSequenceNumber\":1567702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { canBackdoor, doBackdoor } from \\\"lib/util\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nconst findProp = function (propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n};\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet playerProp;\\r\\nfunction refreshInvitations() {\\r\\n    const factions = playerProp.checkForFactionInvitations();\\r\\n    for (const faction of factions) {\\r\\n        if (!faction.alreadyInvited) {\\r\\n            playerProp.receiveInvite(faction.name);\\r\\n            faction.alreadyInvited = true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"c\\\", false],\\r\\n    [\\\"t\\\", \\\"\\\"],\\r\\n    [\\\"target\\\", \\\"\\\"],\\r\\n];\\r\\nclass Faction {\\r\\n    name;\\r\\n    invited;\\r\\n    joined;\\r\\n    requirements;\\r\\n    constructor(ns, name, requirements) {\\r\\n        this.name = name;\\r\\n        this.invited = ns.singularity.checkFactionInvitations().includes(this.name);\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        this.requirements = requirements;\\r\\n    }\\r\\n    async getInvite(ns) {\\r\\n        refreshInvitations();\\r\\n        this.invited = ns.singularity.checkFactionInvitations().includes(this.name);\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        if (this.invited || this.joined)\\r\\n            return true;\\r\\n        if (!this.checkRequirements(ns))\\r\\n            return false;\\r\\n        // location check\\r\\n        if (this.requirements.locations) {\\r\\n            if (Array.isArray(this.requirements.locations)) {\\r\\n                if (!this.requirements.locations.includes(ns.getPlayer().location)) {\\r\\n                    ns.singularity.travelToCity(this.requirements.locations[0]);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                if (this.requirements.locations !== ns.getPlayer().location) {\\r\\n                    ns.singularity.travelToCity(this.requirements.locations);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // do backdoor\\r\\n        if (this.requirements.backdoor)\\r\\n            await doBackdoor(ns, this.requirements.backdoor);\\r\\n        refreshInvitations();\\r\\n        this.invited = ns.singularity.checkFactionInvitations().includes(this.name);\\r\\n        return this.invited;\\r\\n    }\\r\\n    async join(ns) {\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        if (this.joined)\\r\\n            return true;\\r\\n        if (!(await this.getInvite(ns)))\\r\\n            return false;\\r\\n        return ns.singularity.joinFaction(this.name);\\r\\n    }\\r\\n    checkRequirements(ns, enforceLocation = false) {\\r\\n        let passed = true;\\r\\n        // location check\\r\\n        if (enforceLocation && this.requirements.locations) {\\r\\n            if (Array.isArray(this.requirements.locations)) {\\r\\n                passed &&= this.requirements.locations.includes(ns.getPlayer().location);\\r\\n            }\\r\\n            else {\\r\\n                passed &&= this.requirements.locations === ns.getPlayer().location;\\r\\n            }\\r\\n        }\\r\\n        if (this.requirements.daedalus && this.requirements.money && this.requirements.hacking) {\\r\\n            passed &&=\\r\\n                ns.getPlayer().money >= this.requirements.money || ns.getPlayer().hacking >= this.requirements.hacking;\\r\\n        }\\r\\n        else {\\r\\n            // money check\\r\\n            if (this.requirements.money) {\\r\\n                passed &&= ns.getPlayer().money >= this.requirements.money;\\r\\n            }\\r\\n            // hacking check\\r\\n            if (this.requirements.hacking) {\\r\\n                passed &&= ns.getPlayer().hacking >= this.requirements.hacking;\\r\\n            }\\r\\n        }\\r\\n        // karma check\\r\\n        if (this.requirements.karma) {\\r\\n            passed &&= ns.heart.break() <= this.requirements.karma;\\r\\n        }\\r\\n        // combat check\\r\\n        if (this.requirements.combat) {\\r\\n            passed &&= ns.getPlayer().strength >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().defense >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().dexterity >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().agility >= this.requirements.combat;\\r\\n        }\\r\\n        // murder check\\r\\n        if (this.requirements.murder) {\\r\\n            passed &&= ns.getPlayer().numPeopleKilled >= this.requirements.murder;\\r\\n        }\\r\\n        // law check\\r\\n        if (this.requirements.law) {\\r\\n            //\\r\\n        }\\r\\n        // augmentations check\\r\\n        if (this.requirements.augmentations) {\\r\\n            passed &&= ns.singularity.getOwnedAugmentations().length >= this.requirements.augmentations;\\r\\n        }\\r\\n        // corporation check\\r\\n        if (this.requirements.corp && this.requirements.corporationRep) {\\r\\n            passed &&= ns.singularity.getCompanyRep(this.requirements.corp) >= this.requirements.corporationRep;\\r\\n        }\\r\\n        // businessLeader check\\r\\n        if (this.requirements.businessLeader) {\\r\\n            //\\r\\n        }\\r\\n        // hacknet check\\r\\n        if (this.requirements.hnServer) {\\r\\n            passed = false;\\r\\n        }\\r\\n        // backdoor check\\r\\n        if (this.requirements.backdoor) {\\r\\n            passed &&= canBackdoor(ns, this.requirements.backdoor);\\r\\n        }\\r\\n        return passed;\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    options.target = options.target !== \\\"\\\" ? options.target : options.t;\\r\\n    playerProp = findProp(\\\"player\\\");\\r\\n    if (!playerProp)\\r\\n        return;\\r\\n    // faction checklist so we dont try to get invites for factions we are already invited to / joined\\r\\n    const factions = {\\r\\n        CyberSec: new Faction(ns, \\\"CyberSec\\\", {\\r\\n            backdoor: \\\"CSEC\\\",\\r\\n        }),\\r\\n        NiteSec: new Faction(ns, \\\"NiteSec\\\", {\\r\\n            backdoor: \\\"avmnite-02h\\\",\\r\\n        }),\\r\\n        \\\"The Black Hand\\\": new Faction(ns, \\\"The Black Hand\\\", {\\r\\n            backdoor: \\\"I.I.I.I\\\",\\r\\n        }),\\r\\n        BitRunners: new Faction(ns, \\\"BitRunners\\\", {\\r\\n            backdoor: \\\"run4theh111z\\\",\\r\\n        }),\\r\\n        \\\"Tian Di Hui\\\": new Faction(ns, \\\"Tian Di Hui\\\", {\\r\\n            money: 1e6,\\r\\n            hacking: 50,\\r\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\r\\n        }),\\r\\n        Netburners: new Faction(ns, \\\"Netburners\\\", {\\r\\n            hacking: 80,\\r\\n            hnServer: true,\\r\\n        }),\\r\\n        \\\"Sector-12\\\": new Faction(ns, \\\"Sector-12\\\", {\\r\\n            money: 15e6,\\r\\n            locations: \\\"Sector-12\\\",\\r\\n        }),\\r\\n        Chongqing: new Faction(ns, \\\"Chongqing\\\", {\\r\\n            money: 20e6,\\r\\n            locations: \\\"Chongqing\\\",\\r\\n        }),\\r\\n        \\\"New Tokyo\\\": new Faction(ns, \\\"New Tokyo\\\", {\\r\\n            money: 20e6,\\r\\n            locations: \\\"New Tokyo\\\",\\r\\n        }),\\r\\n        Ishima: new Faction(ns, \\\"Ishima\\\", {\\r\\n            money: 30e6,\\r\\n            locations: \\\"Ishima\\\",\\r\\n        }),\\r\\n        Aevum: new Faction(ns, \\\"Aevum\\\", {\\r\\n            money: 40e6,\\r\\n            locations: \\\"Aevum\\\",\\r\\n        }),\\r\\n        Volhaven: new Faction(ns, \\\"Volhaven\\\", {\\r\\n            money: 50e6,\\r\\n            locations: \\\"Volhaven\\\",\\r\\n        }),\\r\\n        ECorp: new Faction(ns, \\\"ECorp\\\", {\\r\\n            corp: \\\"ECorp\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        MegaCorp: new Faction(ns, \\\"MegaCorp\\\", {\\r\\n            corp: \\\"MegaCorp\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"KuaiGong International\\\": new Faction(ns, \\\"KuaiGong International\\\", {\\r\\n            corp: \\\"KuaiGong International\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Four Sigma\\\": new Faction(ns, \\\"Four Sigma\\\", {\\r\\n            corp: \\\"Four Sigma\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        NWO: new Faction(ns, \\\"NWO\\\", {\\r\\n            corp: \\\"NWO\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Blade Industries\\\": new Faction(ns, \\\"Blade Industries\\\", {\\r\\n            corp: \\\"Blade Industries\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"OmniTek Incorporated\\\": new Faction(ns, \\\"OmniTek Incorporated\\\", {\\r\\n            corp: \\\"OmniTek Incorporated\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Bachman & Associates\\\": new Faction(ns, \\\"Bachman & Associates\\\", {\\r\\n            corp: \\\"Bachman & Associates\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Clarke Incorporated\\\": new Faction(ns, \\\"Clarke Incorporated\\\", {\\r\\n            corp: \\\"Clarke Incorporated\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Fulcrum Secret Technologies\\\": new Faction(ns, \\\"Fulcrum Secret Technologies\\\", {\\r\\n            corp: \\\"Fulcrum Technologies\\\",\\r\\n            corporationRep: 250000,\\r\\n            backdoor: \\\"fulcrumassets\\\",\\r\\n        }),\\r\\n        \\\"Slum Snakes\\\": new Faction(ns, \\\"Slum Snakes\\\", {\\r\\n            karma: -9,\\r\\n            money: 1e6,\\r\\n            combat: 30,\\r\\n        }),\\r\\n        Tetrads: new Faction(ns, \\\"Tetrads\\\", {\\r\\n            karma: -18,\\r\\n            combat: 75,\\r\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\r\\n        }),\\r\\n        Silhouette: new Faction(ns, \\\"Silhouette\\\", {\\r\\n            karma: -22,\\r\\n            money: 15e6,\\r\\n            businessLeader: true,\\r\\n        }),\\r\\n        \\\"Speakers for the Dead\\\": new Faction(ns, \\\"Speakers for the Dead\\\", {\\r\\n            karma: -45,\\r\\n            hacking: 100,\\r\\n            combat: 300,\\r\\n            murder: 30,\\r\\n            law: true,\\r\\n        }),\\r\\n        \\\"The Dark Army\\\": new Faction(ns, \\\"The Dark Army\\\", {\\r\\n            karma: -45,\\r\\n            hacking: 300,\\r\\n            combat: 300,\\r\\n            murder: 5,\\r\\n            law: true,\\r\\n            locations: \\\"Chongqing\\\",\\r\\n        }),\\r\\n        \\\"The Syndicate\\\": new Faction(ns, \\\"The Syndicate\\\", {\\r\\n            karma: -90,\\r\\n            hacking: 200,\\r\\n            combat: 200,\\r\\n            money: 10e6,\\r\\n            law: true,\\r\\n            locations: [\\\"Aevum\\\", \\\"Sector-12\\\"],\\r\\n        }),\\r\\n        \\\"The Covenant\\\": new Faction(ns, \\\"The Covenant\\\", {\\r\\n            hacking: 850,\\r\\n            combat: 850,\\r\\n            money: 75e9,\\r\\n            augmentations: 20,\\r\\n        }),\\r\\n        Daedalus: new Faction(ns, \\\"Daedalus\\\", {\\r\\n            hacking: 2500,\\r\\n            combat: 1500,\\r\\n            money: 100e9,\\r\\n            augmentations: ns.getBitNodeMultipliers().DaedalusAugsRequirement,\\r\\n            daedalus: true,\\r\\n        }),\\r\\n        Illuminati: new Faction(ns, \\\"Illuminati\\\", {\\r\\n            hacking: 1500,\\r\\n            combat: 1200,\\r\\n            money: 150e9,\\r\\n            augmentations: 30,\\r\\n        }),\\r\\n    };\\r\\n    if (options.target) {\\r\\n        if (factions[options.target]) {\\r\\n            await factions[options.target].getInvite(ns);\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        for (const faction of Object.values(factions)) {\\r\\n            await faction.getInvite(ns);\\r\\n        }\\r\\n    }\\r\\n    // for (const faction of factions) {\\r\\n    // }\\r\\n    // city priority:\\r\\n    //   Chongqing [Neuregen Gene Modification]\\r\\n    //   Sector-12 [CashRoot Starter Kit]\\r\\n    //   Aevum [PCMatrix]\\r\\n    //   New Tokyo --\\r\\n    //   Ishima --\\r\\n    //   Volhaven --\\r\\n    if (options.c)\\r\\n        return;\\r\\n    if (ns.singularity.checkFactionInvitations().includes(\\\"Chongqing\\\") &&\\r\\n        !ns.singularity.getOwnedAugmentations(true).includes(\\\"Neuregen Gene Modification\\\")) {\\r\\n        await factions[\\\"Chongqing\\\"].join(ns);\\r\\n    }\\r\\n    if (ns.singularity.checkFactionInvitations().includes(\\\"Sector-12\\\") &&\\r\\n        !ns.singularity.getOwnedAugmentations(true).includes(\\\"CashRoot Starter Kit\\\")) {\\r\\n        await factions[\\\"Sector-12\\\"].join(ns);\\r\\n    }\\r\\n    if (ns.singularity.checkFactionInvitations().includes(\\\"Aevum\\\") && !ns.singularity.getOwnedAugmentations(true).includes(\\\"PCMatrix\\\")) {\\r\\n        await factions[\\\"Aevum\\\"].join(ns);\\r\\n    }\\r\\n    for (const faction of Object.values(factions)) {\\r\\n        await faction.join(ns);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImpvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbkQsOERBQThEO0FBQzlELE1BQU0sUUFBUSxHQUFHLFVBQVUsUUFBZ0I7SUFDdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTztZQUFFLFNBQVM7UUFDdkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRyxJQUFJLEtBQUssQ0FBQyxRQUFRLFlBQVksS0FBSztZQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO2dCQUFFLElBQUksS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkg7QUFDTCxDQUFDLENBQUM7QUFFRiw4REFBOEQ7QUFDOUQsSUFBSSxVQUFlLENBQUM7QUFFcEIsU0FBUyxrQkFBa0I7SUFDdkIsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLDBCQUEwQixFQUFFLENBQUM7SUFFekQsS0FBSyxNQUFNLE9B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\",\"filename\":\"join.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///d1fc8ae4-4149-4bc6-ac0a-a6b8b1390acd\",\"moduleSequenceNumber\":1567686},{\"filename\":\"join.js\",\"url\":\"blob:file:///800e52d7-0d0e-4ad3-b764-d78c672be2ae\",\"moduleSequenceNumber\":1568635}],\"dependents\":[],\"ramUsage\":26.65,\"server\":\"home\",\"moduleSequenceNumber\":1568635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    for (const faction of ns.singularity.checkFactionInvitations()) {\\r\\n        ns.singularity.joinFaction(faction);\\r\\n    }\\r\\n    ns.singularity.softReset(ns.getScriptName());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQzVELEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZDO0lBR0QsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQyJ9\",\"filename\":\"int.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"int.js\",\"url\":\"blob:file:///c6fad107-bc81-4634-870b-5299a468dac0\",\"moduleSequenceNumber\":38579760}],\"dependents\":[],\"ramUsage\":12.6,\"server\":\"home\",\"moduleSequenceNumber\":1567704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.softReset\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Fast hack using < 8GB footprint; Define simPlayer for a better experience (if you have Formulas.exe) but it puts it over 8GB.\\r\\nimport { HACKJS, GROWJS, WEAKENJS, llog, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst HOME_RESERVE_RAM = 16;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"n00dles\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    if ([\\\"--reserve\\\"].includes(lastFlag))\\r\\n        return [\\\"16\\\", \\\"32\\\", \\\"64\\\", \\\"128\\\"];\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    const weakenTimeShort = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    if (timeLimit > 10 * 60 * 60 * 1000)\\r\\n        timeLimit = weakenTimeShort * 2;\\r\\n    const batchCountLimit = Math.max(Math.floor((timeLimit - weakenTimeShort) / batchSpacer), 1);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    const batchCountMax = Math.min(Math.max(Math.floor(hackTimeLong / batchSpacer), 1), batchCountLimit);\\r\\n    // update batchCountMax to prevent time stretching when security isnt minimized\\r\\n    // if (targetServer.hackDifficulty - targetServer.minDifficulty > 0) {\\r\\n    //     const newBatchCountLimit = Math.max(Math.floor(weakenTimeShort / batchSpacer), 1);\\r\\n    //     llog(ns, \\\"Reducing batch count limit from %f to %f\\\", batchCountMax, batchCountLimit);\\r\\n    //     batchCountMax = Math.min(batchCountMax, batchCountLimit);\\r\\n    // }\\r\\n    // if (doLog)\\r\\n    //     llog(ns, \\\"timeLimit: %f; weakenTimeShort %f; batchCountLimit: %f\\\", timeLimit, weakenTimeShort, batchCountLimit);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    let totalMoney = 0;\\r\\n    let totalPercent = 0;\\r\\n    let batchID = 0;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        if (moneyDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Big Block %d\\\", bigBlock);\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                // Full weaken loop indicates we are done allocating batches\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            // if (doLog)\\r\\n            //     llog(\\r\\n            //         ns,\\r\\n            //         \\\"Reserving Batch %d H-%d HW-%d G-%d GW-%d; Big Block %d; Total %s (%.2f%%)\\\",\\r\\n            //         batchID,\\r\\n            //         hackThreads,\\r\\n            //         weakenHackThreads,\\r\\n            //         growThreads,\\r\\n            //         weakenGrowThreads,\\r\\n            //         bigBlock,\\r\\n            //         ns.nFormat(hackAmount, \\\"$0.000a\\\"),\\r\\n            //         (hackAmount / targetServer.moneyMax) * 100\\r\\n            //     );\\r\\n            reserveBatch(ns, targetServer, batchID++, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            totalMoney += hackAmount;\\r\\n            totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    return [batchID, totalMoney, totalPercent];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.disableLog(\\\"getHackingLevel\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    ns.tail();\\r\\n    let targetServer;\\r\\n    await doSoften(ns);\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    // if (!targetServer.canRunScripts()) {\\r\\n    //     ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetServer.hostname);\\r\\n    //     return;\\r\\n    // }\\r\\n    if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    const servers = serverService\\r\\n        .getScriptableServers(options.reserve)\\r\\n        .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n    const simPlayer = undefined; // ns.getPlayer();\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    while (true) {\\r\\n        let bestHackLimit = 0;\\r\\n        let bestHackLimitValue = 0;\\r\\n        for (const hackLimit of [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1]) {\\r\\n            targetServer.reload();\\r\\n            const [batchCount, totalMoney] = allocateBatches(ns, targetServer, servers, hackLimit, false, options.limit, simPlayer);\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Check %.3f - %d, %s, %s/s\\\",\\r\\n            //     hackLimit,\\r\\n            //     batchCount,\\r\\n            //     ns.nFormat(totalMoney, \\\"$0.000a\\\"),\\r\\n            //     ns.nFormat(value, \\\"$0.000a\\\")\\r\\n            // );\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer.reload();\\r\\n        const [batchCount, totalMoney, totalPercent] = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        // const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n        // const batchCountMax = Math.max(Math.floor(hackTimeLong / batchSpacer), 1);\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // ns.tprintf(\\\"Batches: %d\\\", batchCount);\\r\\n        // ns.tprintf(\\\"Target Time: %s\\\", stFormat(ns, hackTimeTarget, true));\\r\\n        // ns.tprintf(\\\"Hack Level          : %8.4f/%8.4f %s\\\", hackLevelCalc, hackLevel, stFormat(ns, hackTime, true));\\r\\n        // ns.tprintf(\\\"Grow Level          : %8.4f/%8.4f %s\\\", growLevelCalc, growLevel, stFormat(ns, growTime, true));\\r\\n        // ns.tprintf(\\\"Weaken Level        : %8.4f/%8.4f %s\\\", weakenLevelCalc, weakenLevel, stFormat(ns, weakenTime, true));\\r\\n        // ns.tprintf(\\\"Hack Timeline       : %6d %6d %6d\\\", hackOffset + startOffset, hackTime, hackOffset + startOffset + hackTime);\\r\\n        // ns.tprintf(\\\"Weaken Hack Timeline: %6d %6d %6d\\\", weakenHackOffset + startOffset, weakenTime, weakenHackOffset + startOffset + weakenTime);\\r\\n        // ns.tprintf(\\\"Grow Timeline       : %6d %6d %6d\\\", growOffset + startOffset, growTime, growOffset + startOffset + growTime);\\r\\n        // ns.tprintf(\\\"Weaken Grow Timeline: %6d %6d %6d\\\", weakenGrowOffset + startOffset, weakenTime, weakenGrowOffset + startOffset + weakenTime);\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n    }\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Executing %s:%s -t%d offset: %s\\\",\\r\\n            //     exec.hostname,\\r\\n            //     exec.filename,\\r\\n            //     exec.threads,\\r\\n            //     stFormat(ns, exec.offset, true)\\r\\n            // );\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"crawl.js\\\", \\\"home\\\", 1, \\\"-bs\\\", \\\"--suppress\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja18yLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrXzIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNklBQTZJO0FBRzdJLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQXFDLE1BQU0sa0JBQWtCLENBQUM7QUFFcEYsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBRXBCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQzVCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUNyQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBRXhCLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUV2QixTQUFTLHdCQUF3QixDQUFDLElBQXFCLEVBQUUsR0FBVyxFQUFFLEdBQWE7SUFDL0UsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUN2RCxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN0RixPQUFPO0FBQ1gsQ0FBQztBQVNELFNBQVMsbUJBQW1CLENBQUMsRUFBTSxFQUFFLE9BQWlCLEVBQUUsT0FBZ0I7SUFDcEUsc0dBQXNHO0lBQ3RHLE1BQU0sTUFBTSxHQUFHLE9BQU87U0FDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxD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\",\"filename\":\"/archive/hack_2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///e40fa039-e023-4830-8ec9-7a73cfc1bc19\",\"moduleSequenceNumber\":68},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///16227fd0-97f4-43e6-8a7e-44ab5546ea0a\",\"moduleSequenceNumber\":69},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f8b6086d-6896-4301-aad1-54c2ca3264c7\",\"moduleSequenceNumber\":68},{\"filename\":\"/archive/hack_2.js\",\"url\":\"blob:file:///38d7cbef-0d67-4820-83ee-f86676975ac1\",\"moduleSequenceNumber\":182}],\"dependents\":[],\"ramUsage\":8.85,\"server\":\"home\",\"moduleSequenceNumber\":1567705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/src/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1567706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.tail();\\r\\n    // const crimes = [\\r\\n    //     \\\"shoplift\\\",\\r\\n    //     \\\"rob store\\\",\\r\\n    //     \\\"mug\\\",\\r\\n    //     \\\"larceny\\\",\\r\\n    //     \\\"drugs\\\",\\r\\n    //     \\\"bond forge\\\",\\r\\n    //     \\\"traffick arms\\\",\\r\\n    //     \\\"homicide\\\",\\r\\n    //     \\\"grand auto\\\",\\r\\n    //     \\\"kidnap\\\",\\r\\n    //     \\\"assassinate\\\",\\r\\n    //     \\\"heist\\\",\\r\\n    // ];\\r\\n    // for (const crimename of crimes) {\\r\\n    //     const crimeStats = ns.getCrimeStats(crimename);\\r\\n    //     ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    // }\\r\\n    let dynamic = true;\\r\\n    let crime = \\\"shoplift\\\";\\r\\n    if (ns.args[0]) {\\r\\n        crime = ns.args[0].toString();\\r\\n        dynamic = false;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (dynamic) {\\r\\n            if (ns.singularity.getCrimeChance(\\\"mug\\\") > 0.7)\\r\\n                crime = \\\"mug\\\";\\r\\n            if (ns.singularity.getCrimeChance(\\\"homicide\\\") > 0.7)\\r\\n                crime = \\\"homicide\\\";\\r\\n        }\\r\\n        await ns.sleep(ns.singularity.commitCrime(crime) + 200);\\r\\n    }\\r\\n    ns.singularity.workForFaction(\\\"NiteSec\\\", \\\"Field Work\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JpbWUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRVYsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLEtBQUs7SUFFTCxvQ0FBb0M7SUFDcEMsc0RBQXNEO0lBQ3RELGlOQUFpTjtJQUNqTixJQUFJO0lBRUosSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWixLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLEdBQUcsS0FBSyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDVCxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRztnQkFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQzlELElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRztnQkFBRSxLQUFLLEdBQUcsVUFBVSxDQUFDO1NBQzNFO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0tBQzNEO0lBRUQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzNELENBQUMifQ==\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crime.js\",\"url\":\"blob:file:///b8faad77-7c83-45ba-acb3-77c301e98ff7\",\"moduleSequenceNumber\":156401}],\"dependents\":[],\"ramUsage\":14.6,\"server\":\"home\",\"moduleSequenceNumber\":1567707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var FragmentType;\\r\\n(function (FragmentType) {\\r\\n    // Special fragments for the UI\\r\\n    FragmentType[FragmentType[\\\"None\\\"] = 0] = \\\"None\\\";\\r\\n    FragmentType[FragmentType[\\\"Delete\\\"] = 1] = \\\"Delete\\\";\\r\\n    // Stats boosting fragments\\r\\n    FragmentType[FragmentType[\\\"HackingChance\\\"] = 2] = \\\"HackingChance\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingSpeed\\\"] = 3] = \\\"HackingSpeed\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingMoney\\\"] = 4] = \\\"HackingMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingGrow\\\"] = 5] = \\\"HackingGrow\\\";\\r\\n    FragmentType[FragmentType[\\\"Hacking\\\"] = 6] = \\\"Hacking\\\";\\r\\n    FragmentType[FragmentType[\\\"Strength\\\"] = 7] = \\\"Strength\\\";\\r\\n    FragmentType[FragmentType[\\\"Defense\\\"] = 8] = \\\"Defense\\\";\\r\\n    FragmentType[FragmentType[\\\"Dexterity\\\"] = 9] = \\\"Dexterity\\\";\\r\\n    FragmentType[FragmentType[\\\"Agility\\\"] = 10] = \\\"Agility\\\";\\r\\n    FragmentType[FragmentType[\\\"Charisma\\\"] = 11] = \\\"Charisma\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetMoney\\\"] = 12] = \\\"HacknetMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetCost\\\"] = 13] = \\\"HacknetCost\\\";\\r\\n    FragmentType[FragmentType[\\\"Rep\\\"] = 14] = \\\"Rep\\\";\\r\\n    FragmentType[FragmentType[\\\"WorkMoney\\\"] = 15] = \\\"WorkMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"Crime\\\"] = 16] = \\\"Crime\\\";\\r\\n    FragmentType[FragmentType[\\\"Bladeburner\\\"] = 17] = \\\"Bladeburner\\\";\\r\\n    // utility fragments.\\r\\n    FragmentType[FragmentType[\\\"Booster\\\"] = 18] = \\\"Booster\\\";\\r\\n})(FragmentType || (FragmentType = {}));\\r\\nfunction fragmentTypeEffect(tpe) {\\r\\n    switch (tpe) {\\r\\n        case FragmentType.HackingChance: {\\r\\n            return \\\"+x% hack() success chance\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingSpeed: {\\r\\n            return \\\"+x% faster hack(), grow(), and weaken()\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingMoney: {\\r\\n            return \\\"+x% hack() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingGrow: {\\r\\n            return \\\"+x% grow() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Hacking: {\\r\\n            return \\\"+x% hacking skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Strength: {\\r\\n            return \\\"+x% strength skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Defense: {\\r\\n            return \\\"+x% defense skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Dexterity: {\\r\\n            return \\\"+x% dexterity skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Agility: {\\r\\n            return \\\"+x% agility skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Charisma: {\\r\\n            return \\\"+x% charisma skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetMoney: {\\r\\n            return \\\"+x% hacknet production\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetCost: {\\r\\n            return \\\"x% cheaper hacknet cost\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Rep: {\\r\\n            return \\\"+x% reputation from factions and companies\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.WorkMoney: {\\r\\n            return \\\"+x% work money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Crime: {\\r\\n            return \\\"+x% crime money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Bladeburner: {\\r\\n            return \\\"+x% all bladeburner stats\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Booster: {\\r\\n            return \\\"Booster\\\";\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    throw new Error(\\\"Calling effect for fragment type that doesn't have an effect \\\" + tpe);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const fragmentDefs = ns.stanek.fragmentDefinitions();\\r\\n    for (const fragmentDef of fragmentDefs) {\\r\\n        ns.tprintf(\\\"%s %s %s %s %s\\\", fragmentDef.id, fragmentDef.limit, fragmentDef.power, fragmentDef.shape, fragmentTypeEffect(fragmentDef.type));\\r\\n    }\\r\\n    // useful hack fragment id's are\\r\\n    // 0 1    S  +x% hacking skill  0,1\\r\\n    // 1 1    Z  +x% hacking skill  0,1\\r\\n    // 5 1.3  T  +x% faster HGW     0,1,2,3\\r\\n    // 6 2    I  +x% hack() power   0,1\\r\\n    // 7 0.5  J  +x% grow() power   0,1,2,3\\r\\n    // array of fragments, each fragment is an ID and an array of valid rotations\\r\\n    const fragmentIDs = [\\r\\n        //[100, [0, 1, 2, 3]], // 4\\r\\n        [0, [0, 1]],\\r\\n        //[101, [0, 1, 2, 3]], // 4\\r\\n        [1, [0, 1]],\\r\\n        //[102, [0, 1, 2, 3]], // 4\\r\\n        [5, [0, 1, 2, 3]],\\r\\n        //[103, [0, 1, 2, 3]], // 4\\r\\n        [6, [0, 1]],\\r\\n        //[104, [0, 1, 2, 3]], // 4\\r\\n        [7, [0, 1, 2, 3]],\\r\\n        //[105, [0, 1, 2, 3]], // 4\\r\\n        [25, [0, 1, 2, 3]],\\r\\n        //[106, [0, 1, 2, 3]], // 4\\r\\n        [28, [0, 1, 2, 3]], // 4\\r\\n        // [107, [0, 1, 2, 3]], // 4\\r\\n    ];\\r\\n    // a valid configuration is if all pieces can be placed\\r\\n    // try to place each piece\\r\\n    // if we hit a piece that cant be placed, iterate over all rotations\\r\\n    // if all rotations cant be placed, move to next cell and iterate over all rotations\\r\\n    // if all cells have been checked, roll back to earlier piece and rotate it.\\r\\n    ns.stanek.clearGift();\\r\\n    let watchdog = 0;\\r\\n    async function doPlacement(frag, x, y, rot) {\\r\\n        if (watchdog++ % 1000 === 0) {\\r\\n            await ns.sleep(0);\\r\\n        }\\r\\n        //ns.tprintf(\\\"Attempting to place %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n        if (ns.stanek.placeFragment(x, y, rot, fragmentIDs[frag][0])) {\\r\\n            if (frag === fragmentIDs.length - 1)\\r\\n                return true;\\r\\n            //ns.tprintf(\\\"Placed %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n            if (!(await doPlacement(frag + 1, 0, 0, 0))) {\\r\\n                // ns.tprintf(\\r\\n                //     \\\"Failed to place %d in current board, rolling back %d at %d,%d,%d\\\",\\r\\n                //     fragmentIDs[frag + 1][0],\\r\\n                //     fragmentIDs[frag][0],\\r\\n                //     x,\\r\\n                //     y,\\r\\n                //     rot\\r\\n                // );\\r\\n                ns.stanek.removeFragment(x, y);\\r\\n            }\\r\\n            else {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        if (rot + 1 < fragmentIDs[frag][1].length)\\r\\n            return await doPlacement(frag, x, y, rot + 1);\\r\\n        if (x + 1 < ns.stanek.giftWidth())\\r\\n            return await doPlacement(frag, x + 1, y, 0);\\r\\n        if (y + 1 < ns.stanek.giftHeight())\\r\\n            return await doPlacement(frag, 0, y + 1, 0);\\r\\n        return false;\\r\\n    }\\r\\n    await doPlacement(0, 0, 0, 0);\\r\\n    for (const fragment of ns.stanek.activeFragments()) {\\r\\n        ns.tprintf(\\\"%s %s %s %s\\\", fragment.id, fragment.x, fragment.y, fragment.rotation);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmVrLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3RhbmVrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUssWUF5Qko7QUF6QkQsV0FBSyxZQUFZO0lBQ2IsK0JBQStCO0lBQy9CLCtDQUFJLENBQUE7SUFDSixtREFBTSxDQUFBO0lBRU4sMkJBQTJCO0lBQzNCLGlFQUFhLENBQUE7SUFDYiwrREFBWSxDQUFBO0lBQ1osK0RBQVksQ0FBQTtJQUNaLDZEQUFXLENBQUE7SUFDWCxxREFBTyxDQUFBO0lBQ1AsdURBQVEsQ0FBQTtJQUNSLHFEQUFPLENBQUE7SUFDUCx5REFBUyxDQUFBO0lBQ1Qsc0RBQU8sQ0FBQTtJQUNQLHdEQUFRLENBQUE7SUFDUixnRUFBWSxDQUFBO0lBQ1osOERBQVcsQ0FBQTtJQUNYLDhDQUFHLENBQUE7SUFDSCwwREFBUyxDQUFBO0lBQ1Qsa0RBQUssQ0FBQTtJQUNMLDhEQUFXLENBQUE7SUFFWCxxQkFBcUI7SUFDckIsc0RBQU8sQ0FBQTtBQUNYLENBQUMsRUF6QkksWUFBWSxLQUFaLFlBQVksUUF5QmhCO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxHQUFpQjtJQUN6QyxRQUFRLEdBQUcsRUFBRTtRQUNULEtBQUssWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sMkJBQTJCLENBQUM7WUFDbkMsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUIsT0FBTyx5Q0FBeUMsQ0FBQztZQUNqRCxNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QixPQUFPLGtCQUFrQixDQUFDO1lBQzFCLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sa0JBQWtCLENBQUM7WUFDMUIsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENB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\",\"filename\":\"stanek.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stanek.js\",\"url\":\"blob:file:///dbff1e3f-8e80-4462-82c6-90172926f74c\",\"moduleSequenceNumber\":73980}],\"dependents\":[],\"ramUsage\":12.55,\"server\":\"home\",\"moduleSequenceNumber\":1567708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.placeFragment\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.removeFragment\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.giftWidth\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.giftHeight\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [[\\\"reserve\\\", Number.MAX_SAFE_INTEGER]];\\r\\nlet serverService;\\r\\nconst CHARGEJS = \\\"/lib/stanek/charge.js\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"scp\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.tail();\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const fragments = ns.stanek.activeFragments().filter((x) => x.id < 100);\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(CHARGEJS, \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    const availableThreadsTotal = scriptableServers.reduce((input, server) => input + Math.floor(server.threadsAvailable(ns.getScriptRam(CHARGEJS))), 0);\\r\\n    ns.tprintf(\\\"available threads: %d\\\", availableThreadsTotal);\\r\\n    const fragSplit = Math.floor(availableThreadsTotal / fragments.length);\\r\\n    ns.tprintf(\\\"Frags %d\\\", fragments.length);\\r\\n    ns.tprintf(\\\"Split %d\\\", fragSplit);\\r\\n    for (const fragment of fragments) {\\r\\n        let threadsRemaining = fragSplit;\\r\\n        for (const server of scriptableServers) {\\r\\n            server.reload();\\r\\n            const availableThreads = Math.floor(server.threadsAvailable(ns.getScriptRam(CHARGEJS)));\\r\\n            const usingThreads = Math.min(threadsRemaining, availableThreads);\\r\\n            if (usingThreads <= 0)\\r\\n                continue;\\r\\n            const pid = ns.exec(CHARGEJS, server.hostname, usingThreads, fragment.x, fragment.y);\\r\\n            threadsRemaining -= usingThreads;\\r\\n            if (threadsRemaining <= 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2hhcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxJQUFJLE9BQU8sQ0FBQztBQUNaLE1BQU0sVUFBVSxHQUFxRCxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFFNUcsSUFBSSxhQUE0QixDQUFDO0FBQ2pDLE1BQU0sUUFBUSxHQUFHLHVCQUF1QixDQUFDO0FBRXpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVWLElBQUk7UUFDQSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtRQUMvQyxFQUFFLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxPQUFPO0tBQ1Y7SUFFRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN4RSxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUUsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDekMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsTUFBTSxxQkFBcUIsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQ2xELENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUN6RixDQUFDLENBQ0osQ0FBQztJQUVGLEVBQUUsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMzRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV2RSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFbEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsSUFBSSxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDakMsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtZQUNwQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDaEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFbEUsSUFBSSxZQUFZLElBQUksQ0FBQztnQkFBRSxTQUFTO1lBRWhDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXJGLGdCQUFnQixJQUFJLFlBQVksQ0FBQztZQUVqQyxJQUFJLGdCQUFnQixJQUFJLENBQUM7Z0JBQUUsTUFBTTtTQUNwQztLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f8a0e222-84df-4133-bc8b-1e7e5915ddc2\",\"moduleSequenceNumber\":43},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///a44ebbb7-ff82-483e-b69a-425834826731\",\"moduleSequenceNumber\":44},{\"filename\":\"charge.js\",\"url\":\"blob:file:///f3eee896-9eee-4a6f-a1d0-f2542ea2c967\",\"moduleSequenceNumber\":140}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":1567709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.chargeFragment(Number(ns.args[0]), Number(ns.args[1]));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUU7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///1dea4df2-ecba-4cae-b3a8-941df9ca23ca\",\"moduleSequenceNumber\":226}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":1567710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Joining factions gives a small amount of int xp.\\r\\n// With singularity functions, soft reset, and the 10 corp factions you can create a script that farms int xp rather quickly.\\r\\n// This would be faster than the below travel-based method, which has been nerfed quite heavily\\r\\n/** @param {NS} ns\\r\\n * Script contributed by https://github.com/ShawnPatton\\r\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\r\\nexport async function main(ns) {\\r\\n    //disableLogs(ns, [\\\"travelToCity\\\", \\\"sleep\\\"]);\\r\\n    ns.tail();\\r\\n    const tripsPerCycle = 1000;\\r\\n    const moneyThreshold = 1000000000000;\\r\\n    let previousInt = ns.getPlayer().intelligence;\\r\\n    let currentInt = previousInt;\\r\\n    let previousLevelTime = Date.now();\\r\\n    let levelupTime;\\r\\n    let cycles = 0;\\r\\n    let duration = 0;\\r\\n    let tripsPerLevel = 0;\\r\\n    let tripsPerMs = 0;\\r\\n    ns.print(`Starting Script at Int ` + currentInt);\\r\\n    while (true) {\\r\\n        while (ns.getPlayer().money > moneyThreshold) {\\r\\n            for (let i = 0; i < tripsPerCycle; i++) {\\r\\n                ns.singularity.travelToCity(\\\"Aevum\\\");\\r\\n                ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            }\\r\\n            await ns.sleep(1);\\r\\n            cycles++;\\r\\n            if (previousInt != ns.getPlayer().intelligence) {\\r\\n                currentInt = ns.getPlayer().intelligence;\\r\\n                levelupTime = Date.now();\\r\\n                duration = levelupTime - previousLevelTime;\\r\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\r\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\r\\n                // ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\r\\n                //     + formatDuration(duration) + ` & ` + formatNumberShort(tripsPerLevel) + ` Travels`);\\r\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\r\\n                previousLevelTime = levelupTime;\\r\\n                previousInt = currentInt;\\r\\n                cycles = 0;\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50XzEuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJhcmNoaXZlL2ludF8xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHlEQUF5RDtBQUN6RCw2SEFBNkg7QUFDN0gsK0ZBQStGO0FBRS9GOzt5SkFFeUo7QUFDekosTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3Qiw2Q0FBNkM7SUFDN0MsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztJQUNyQyxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWSxDQUFDO0lBQzlDLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztJQUM3QixJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNuQyxJQUFJLFdBQVcsQ0FBQztJQUNoQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDZixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNuQixFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sSUFBSSxFQUFFO1FBQ1QsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxHQUFHLGNBQWMsRUFBRTtZQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwQyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDckMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDNUM7WUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUM7WUFDVCxJQUFJLFdBQVcsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWSxFQUFFO2dCQUM1QyxVQUFVLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDekMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDekIsUUFBUSxHQUFHLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztnQkFDM0MsYUFBYSxHQUFHLE1BQU0sR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLENBQUM7Z0JBQ2xELCtGQUErRjtnQkFDL0YsMkZBQTJGO2dCQUMzRixFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUMvRCxpQkFBaUIsR0FBRyxXQUFXLENBQUM7Z0JBQ2hDLFdBQVcsR0FBRyxVQUFVLENBQUM7Z0JBQ3pCLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDZDtTQUNKO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztLQUN6RDtBQUNMLENBQUMifQ==\",\"filename\":\"/archive/int_1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":1567711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.singularity.destroyW0r1dD43m0n(12, \\\"starter.js\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNjZW5kLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXNjZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDeEQsQ0FBQyJ9\",\"filename\":\"ascend.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"ascend.js\",\"url\":\"blob:file:///8a8503d2-6771-445d-8c79-c401ed132604\",\"moduleSequenceNumber\":1569105}],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"home\",\"moduleSequenceNumber\":1569105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.destroyW0r1dD43m0n\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Fast hack using < 8GB footprint; Define simPlayer for a better experience (if you have Formulas.exe) but it puts it over 8GB.\\r\\nimport { HACKJS, GROWJS, WEAKENJS, llog, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService, Server } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst HOME_RESERVE_RAM = 16;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"n00dles\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    if ([\\\"--reserve\\\"].includes(lastFlag))\\r\\n        return [\\\"16\\\", \\\"32\\\", \\\"64\\\", \\\"128\\\"];\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    const weakenTimeShort = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    if (timeLimit > 10 * 60 * 60 * 1000)\\r\\n        timeLimit = weakenTimeShort * 2;\\r\\n    const batchCountLimit = Math.max(Math.floor((timeLimit - weakenTimeShort) / batchSpacer), 1);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    const batchCountMax = Math.min(Math.max(Math.floor(hackTimeLong / batchSpacer), 1), batchCountLimit);\\r\\n    // update batchCountMax to prevent time stretching when security isnt minimized\\r\\n    // if (targetServer.hackDifficulty - targetServer.minDifficulty > 0) {\\r\\n    //     const newBatchCountLimit = Math.max(Math.floor(weakenTimeShort / batchSpacer), 1);\\r\\n    //     llog(ns, \\\"Reducing batch count limit from %f to %f\\\", batchCountMax, batchCountLimit);\\r\\n    //     batchCountMax = Math.min(batchCountMax, batchCountLimit);\\r\\n    // }\\r\\n    // if (doLog)\\r\\n    //     llog(ns, \\\"timeLimit: %f; weakenTimeShort %f; batchCountLimit: %f\\\", timeLimit, weakenTimeShort, batchCountLimit);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    let totalMoney = 0;\\r\\n    let totalPercent = 0;\\r\\n    let batchID = 0;\\r\\n    let hasPrimary = false;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        if (moneyDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            hasPrimary = true;\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Big Block %d\\\", bigBlock);\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                // Full weaken loop indicates we are done allocating batches\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            // if (doLog)\\r\\n            //     llog(\\r\\n            //         ns,\\r\\n            //         \\\"Reserving Batch %d H-%d HW-%d G-%d GW-%d; Big Block %d; Total %s (%.2f%%)\\\",\\r\\n            //         batchID,\\r\\n            //         hackThreads,\\r\\n            //         weakenHackThreads,\\r\\n            //         growThreads,\\r\\n            //         weakenGrowThreads,\\r\\n            //         bigBlock,\\r\\n            //         ns.nFormat(hackAmount, \\\"$0.000a\\\"),\\r\\n            //         (hackAmount / targetServer.moneyMax) * 100\\r\\n            //     );\\r\\n            reserveBatch(ns, targetServer, batchID++, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            totalMoney += hackAmount;\\r\\n            totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    return { batchID: batchID, totalMoney: totalMoney, totalPercent: totalPercent, hasPrimary: hasPrimary };\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.disableLog(\\\"getHackingLevel\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    ns.tail();\\r\\n    let targetServer;\\r\\n    await doSoften(ns);\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    // if (!targetServer.canRunScripts()) {\\r\\n    //     ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetServer.hostname);\\r\\n    //     return;\\r\\n    // }\\r\\n    if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    const servers = serverService\\r\\n        .getScriptableServers(options.reserve)\\r\\n        .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n    const simPlayer = undefined; // ns.getPlayer();\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    // const targets = serverService.getHackableServers(ns.getHackingLevel());\\r\\n    // const targetIncomes: [Server, number][] = [];\\r\\n    // for (const target of targets) {\\r\\n    //     targetIncomes.push([target, getIncome(target)]);\\r\\n    // }\\r\\n    while (true) {\\r\\n        let bestHackLimit = 0;\\r\\n        let bestHackLimitValue = 0;\\r\\n        for (const hackLimit of [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1]) {\\r\\n            targetServer.reload();\\r\\n            const allocateBatchResult = allocateBatches(ns, targetServer, servers, hackLimit, false, options.limit, simPlayer);\\r\\n            const batchCount = allocateBatchResult.batchID;\\r\\n            const totalMoney = allocateBatchResult.totalMoney;\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Check %.3f - %d, %s, %s/s\\\",\\r\\n            //     hackLimit,\\r\\n            //     batchCount,\\r\\n            //     ns.nFormat(totalMoney, \\\"$0.000a\\\"),\\r\\n            //     ns.nFormat(value, \\\"$0.000a\\\")\\r\\n            // );\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer.reload();\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchID;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const totalPercent = allocateBatchResult.totalPercent;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        // const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n        // const batchCountMax = Math.max(Math.floor(hackTimeLong / batchSpacer), 1);\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // ns.tprintf(\\\"Batches: %d\\\", batchCount);\\r\\n        // ns.tprintf(\\\"Target Time: %s\\\", stFormat(ns, hackTimeTarget, true));\\r\\n        // ns.tprintf(\\\"Hack Level          : %8.4f/%8.4f %s\\\", hackLevelCalc, hackLevel, stFormat(ns, hackTime, true));\\r\\n        // ns.tprintf(\\\"Grow Level          : %8.4f/%8.4f %s\\\", growLevelCalc, growLevel, stFormat(ns, growTime, true));\\r\\n        // ns.tprintf(\\\"Weaken Level        : %8.4f/%8.4f %s\\\", weakenLevelCalc, weakenLevel, stFormat(ns, weakenTime, true));\\r\\n        // ns.tprintf(\\\"Hack Timeline       : %6d %6d %6d\\\", hackOffset + startOffset, hackTime, hackOffset + startOffset + hackTime);\\r\\n        // ns.tprintf(\\\"Weaken Hack Timeline: %6d %6d %6d\\\", weakenHackOffset + startOffset, weakenTime, weakenHackOffset + startOffset + weakenTime);\\r\\n        // ns.tprintf(\\\"Grow Timeline       : %6d %6d %6d\\\", growOffset + startOffset, growTime, growOffset + startOffset + growTime);\\r\\n        // ns.tprintf(\\\"Weaken Grow Timeline: %6d %6d %6d\\\", weakenGrowOffset + startOffset, weakenTime, weakenGrowOffset + startOffset + weakenTime);\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n    }\\r\\n}\\r\\nfunction getIncome(ns, _targetServer, servers, timespan) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const simPlayer = ns.getPlayer();\\r\\n    let bestHackLimit = 0;\\r\\n    let bestHackLimitValue = 0;\\r\\n    const initialTargetServer = new Server(ns, _targetServer);\\r\\n    let targetServer = new Server(ns, initialTargetServer);\\r\\n    let timeleft = timespan;\\r\\n    let totalMoneyGained = 0;\\r\\n    while (timeleft > 0) {\\r\\n        const tmpServer = new Server(ns, targetServer);\\r\\n        for (const hackLimit of [0.25, 0.5, 0.75, 0.9, 1]) {\\r\\n            targetServer = new Server(ns, tmpServer);\\r\\n            const allocateBatchResult = allocateBatches(ns, targetServer, servers, hackLimit, false, timeleft, simPlayer);\\r\\n            const batchCount = allocateBatchResult.batchID;\\r\\n            const totalMoney = allocateBatchResult.totalMoney;\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer = new Server(ns, tmpServer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchID;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const usedPrimary = allocateBatchResult.hasPrimary;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        const playerHackingLevel = simPlayer.hacking;\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        if (usedPrimary) {\\r\\n            timeleft -= cycleTime;\\r\\n            totalMoneyGained += totalMoney;\\r\\n            // simulate the batches on targetServer and do the loop again\\r\\n        }\\r\\n        else {\\r\\n            const cyclesLeft = Math.ceil(timeleft / cycleTime);\\r\\n            timeleft -= cycleTime * cyclesLeft;\\r\\n            totalMoneyGained += totalMoney * cyclesLeft;\\r\\n        }\\r\\n    }\\r\\n    const totalTime = timespan - timeleft;\\r\\n    return totalMoneyGained / (totalTime / 1000); // $/s\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Executing %s:%s -t%d offset: %s\\\",\\r\\n            //     exec.hostname,\\r\\n            //     exec.filename,\\r\\n            //     exec.threads,\\r\\n            //     stFormat(ns, exec.offset, true)\\r\\n            // );\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"crawl.js\\\", \\\"home\\\", 1, \\\"-bs\\\", \\\"--suppress\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja194LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrX3gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNklBQTZJO0FBRzdJLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUE2QixNQUFNLGtCQUFrQixDQUFDO0FBRXBGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUVwQixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUM1QixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUM7QUFDckIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQztBQUV4QixNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFdkIsU0FBUyx3QkFBd0IsQ0FBQyxJQUFxQixFQUFFLEdBQVcsRUFBRSxHQUFhO0lBQy9FLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdkQsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07UUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdEYsT0FBTztBQUNYLENBQUM7QUFTRCxTQUFTLG1CQUFtQixDQUFDLEVBQU0sRUFBRSxPQUFpQixFQUFFLE9BQWdCO0lBQ3BFLHNHQUFzRztJQUN0RyxNQUFNLE1BQU0sR0FBRyxPQUFPO1NBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxF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\",\"filename\":\"/archive/hack_x.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":1567713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doBackdoor } from '/lib/util';\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any,  @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    await doBackdoor(ns, String(ns.args[0]));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2Rvb3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJiYWNrZG9vci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRXRDLHFKQUFxSjtBQUNySixNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFjO0lBQ2xELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN4QixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzVDLENBQUMifQ==\",\"filename\":\"backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"server\":\"home\",\"moduleSequenceNumber\":1567714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Augmentation } from \\\"/lib/augmentation/augmentation\\\";\\r\\nimport { allHosts, CONSTWEAKENJS, doBuyAndSoftenAll } from \\\"/lib/util\\\";\\r\\nimport { ServerService } from \\\"/services/server\\\";\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nfunction favorToRep(f) {\\r\\n    const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n    return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"brutessh\\\");\\r\\n    ns.disableLog(\\\"ftpcrack\\\");\\r\\n    ns.disableLog(\\\"httpworm\\\");\\r\\n    ns.disableLog(\\\"relaysmtp\\\");\\r\\n    ns.disableLog(\\\"sqlinject\\\");\\r\\n    ns.disableLog(\\\"nuke\\\");\\r\\n    //ns.tail();\\r\\n    const serverService = new ServerService(ns);\\r\\n    if (ns.getRunningScript(\\\"clock.js\\\", \\\"home\\\") === null)\\r\\n        ns.exec(\\\"clock.js\\\", \\\"home\\\");\\r\\n    let doExp = true;\\r\\n    //const msToRep = 0;\\r\\n    let doServerBuys = true;\\r\\n    while (true) {\\r\\n        const hackPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n        while (ns.getRunningScript(hackPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        if (ns.getPlayer().factions.length > 0) {\\r\\n            const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(cctPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n        }\\r\\n        // if we have the red pill and we can hack the world daemon, ascend\\r\\n        if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\"))\\r\\n            ns.exec(\\\"ascend.js\\\", \\\"home\\\");\\r\\n        const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1, \\\"-c\\\");\\r\\n        while (ns.getRunningScript(joinPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        const augTargets = [\\r\\n            {\\r\\n                faction: \\\"Tian Di Hui\\\",\\r\\n                aug: \\\"Social Negotiation Assistant (S.N.A)\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"CyberSec\\\",\\r\\n                aug: \\\"Cranial Signal Processors - Gen I\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"NiteSec\\\",\\r\\n                aug: \\\"CRTX42-AA Gene Modification\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"The Black Hand\\\",\\r\\n                aug: \\\"The Black Hand\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Chongqing\\\",\\r\\n                aug: \\\"Neuregen Gene Modification\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"BitRunners\\\",\\r\\n                aug: \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Daedalus\\\",\\r\\n                aug: \\\"The Red Pill\\\",\\r\\n            },\\r\\n        ];\\r\\n        const backupTargets = [\\r\\n            {\\r\\n                faction: \\\"Sector-12\\\",\\r\\n                aug: \\\"CashRoot Starter Kit\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Ishima\\\",\\r\\n                aug: \\\"INFRARET Enhancement\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Volhaven\\\",\\r\\n                aug: \\\"Combat Rib II\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"New Tokyo\\\",\\r\\n                aug: \\\"NutriGen Implant\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"New Tokyo\\\",\\r\\n                aug: \\\"NutriGen Implant\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Tian Di Hui\\\",\\r\\n                aug: \\\"Neuroreceptor Management Implant\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Aevum\\\",\\r\\n                aug: \\\"PCMatrix\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n        ];\\r\\n        let doInstall = false;\\r\\n        let allInstalled = true;\\r\\n        let installNonHackAugs = false;\\r\\n        for (const augTarget of augTargets) {\\r\\n            let targetAug = new Augmentation(ns, augTarget.aug, augTarget.faction);\\r\\n            if (targetAug.owned)\\r\\n                continue;\\r\\n            let targetFaction = augTarget.faction;\\r\\n            installNonHackAugs = !!augTarget.allbuy;\\r\\n            // override target aug if we're targeting Daedalus but we dont have enough augments banked\\r\\n            if (augTarget.faction === \\\"Daedalus\\\" &&\\r\\n                ns.singularity.getOwnedAugmentations().length < ns.getBitNodeMultipliers().DaedalusAugsRequirement) {\\r\\n                ns.tprintf(\\\"Overriding Daedalus\\\");\\r\\n                for (const altAugTarget of backupTargets) {\\r\\n                    const altTargetAug = new Augmentation(ns, altAugTarget.aug, altAugTarget.faction);\\r\\n                    if (altTargetAug.owned)\\r\\n                        continue;\\r\\n                    targetAug = new Augmentation(ns, altAugTarget.aug, altAugTarget.faction);\\r\\n                    targetFaction = altAugTarget.faction;\\r\\n                    installNonHackAugs = !!altAugTarget.allbuy;\\r\\n                    ns.tprintf(\\\"Overriding Daedalus => %s\\\", targetFaction);\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            let targetRepDisp = targetAug.rep;\\r\\n            const augs = ns\\r\\n                .singularity.getAugmentationsFromFaction(targetFaction)\\r\\n                .map((name) => {\\r\\n                return new Augmentation(ns, name, targetFaction);\\r\\n            })\\r\\n                .filter((a) => a.rep <= targetAug.rep && !a.owned && !a.installed)\\r\\n                .sort((a, b) => a.rep - b.rep);\\r\\n            let goalCost = 0;\\r\\n            let multpow = 0;\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            for (const aug of augs) {\\r\\n                goalCost += aug.price * Math.pow(multmult, multpow);\\r\\n                multpow++;\\r\\n            }\\r\\n            let overrideDoInstall = false;\\r\\n            allInstalled = false;\\r\\n            if (ns.singularity.checkFactionInvitations().includes(targetFaction))\\r\\n                ns.singularity.joinFaction(targetFaction);\\r\\n            ns.singularity.workForFaction(targetFaction, \\\"Hacking Contracts\\\", true);\\r\\n            if (targetAug.purchaseable)\\r\\n                doInstall = true;\\r\\n            if (targetAug.rep > favorToRep(ns.getFavorToDonate())) {\\r\\n                const favor = ns.singularity.getFactionFavor(targetFaction);\\r\\n                const targetRep = favorToRep(ns.getFavorToDonate());\\r\\n                const currentRep = ns.singularity.getFactionRep(targetFaction) +\\r\\n                    (ns.getPlayer().currentWorkFactionName === targetFaction ? ns.getPlayer().workRepGained : 0);\\r\\n                const storedRep = Math.max(0, favorToRep(favor));\\r\\n                const targetRep15Percent = targetRep * 0.15;\\r\\n                const totalRep = currentRep + storedRep;\\r\\n                // first pass\\r\\n                if (totalRep < targetRep15Percent && favor < 25) {\\r\\n                    targetRepDisp = targetRep15Percent;\\r\\n                    // const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                    // const msToRep = (targetRep15Percent - totalRep) / repGainPerMS;\\r\\n                    // ns.tprintf(\\r\\n                    //     \\\"Time For %s %d => %d: %s\\\",\\r\\n                    //     targetFaction,\\r\\n                    //     totalRep,\\r\\n                    //     targetRep15Percent,\\r\\n                    //     stFormat(ns, msToRep)\\r\\n                    // );\\r\\n                }\\r\\n                if (totalRep >= targetRep15Percent && favor < 25) {\\r\\n                    overrideDoInstall = true;\\r\\n                    doInstall = true;\\r\\n                }\\r\\n                // second pass\\r\\n                if (totalRep > targetRep15Percent && totalRep < targetRep && favor < ns.getFavorToDonate()) {\\r\\n                    targetRepDisp = targetRep;\\r\\n                    // const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                    // const msToRep = (targetRep - totalRep) / repGainPerMS;\\r\\n                    // ns.tprintf(\\\"Time For %s %d => %d: %s\\\", targetFaction, totalRep, targetRep, stFormat(ns, msToRep));\\r\\n                }\\r\\n                if (totalRep > targetRep15Percent && totalRep > targetRep && favor < ns.getFavorToDonate()) {\\r\\n                    overrideDoInstall = true;\\r\\n                    doInstall = true;\\r\\n                }\\r\\n                // third pass\\r\\n                if (favor > ns.getFavorToDonate() && currentRep < targetAug.rep) {\\r\\n                    const donateAmt = 1e6 * ((targetAug.rep - currentRep) / ns.getPlayer().faction_rep_mult);\\r\\n                    if (donateAmt < ns.getPlayer().money) {\\r\\n                        ns.singularity.donateToFaction(targetFaction, donateAmt);\\r\\n                        doInstall = true;\\r\\n                    }\\r\\n                    else {\\r\\n                        goalCost += donateAmt;\\r\\n                    }\\r\\n                }\\r\\n                if (ns.getPlayer().money < goalCost && !overrideDoInstall) {\\r\\n                    ns.tprintf(\\\"Controller: Target Cash %s\\\", ns.nFormat(goalCost, \\\"$0.000a\\\"));\\r\\n                    if (doInstall)\\r\\n                        doServerBuys = false;\\r\\n                    doInstall = false;\\r\\n                }\\r\\n            }\\r\\n            const port = ns.getPortHandle(2);\\r\\n            port.clear();\\r\\n            port.write(JSON.stringify([targetFaction, targetRepDisp, goalCost]));\\r\\n            break;\\r\\n        }\\r\\n        if (doInstall) {\\r\\n            ns.singularity.stopAction();\\r\\n            const baFlags = installNonHackAugs ? \\\"-gn\\\" : \\\"-g\\\";\\r\\n            const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, baFlags);\\r\\n            while (ns.getRunningScript(mcpPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(joinPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(cctPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n        }\\r\\n        if (allInstalled) {\\r\\n            // level up until we can hack the world daemon\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            let ngPrice = ns.singularity.getAugmentationPrice(\\\"NeuroFlux Governor\\\");\\r\\n            let ngRepReq = ns.singularity.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n            let total = 0;\\r\\n            for (let i = 0; i < 10; i++) {\\r\\n                total += ngPrice;\\r\\n                ngPrice = ngPrice * 1.14 * multmult;\\r\\n                ngRepReq *= 1.14;\\r\\n            }\\r\\n            const donateAmt = 1e6 * (ngRepReq / ns.getPlayer().faction_rep_mult);\\r\\n            if (donateAmt + total <= ns.getPlayer().money) {\\r\\n                ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n            }\\r\\n        }\\r\\n        const servers = serverService.getScriptableServers(HOME_RESERVE_RAM);\\r\\n        const availableRamBefore = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        doBuyAndSoftenAll(ns);\\r\\n        if (ns.getPlayer().money * 0.25 > ns.singularity.getUpgradeHomeRamCost())\\r\\n            ns.singularity.upgradeHomeRam();\\r\\n        if (ns.getPlayer().money < 1000000000 && doServerBuys) {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.5, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        else {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.25, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        const availableRamAfter = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        if (availableRamBefore < availableRamAfter || doExp) {\\r\\n            doExp = false;\\r\\n            ns.exec(\\\"exp.js\\\", \\\"home\\\", 1, \\\"--reserve\\\", HOME_RESERVE_RAM);\\r\\n            await ns.sleep(60 * 1000);\\r\\n            // kill all weaken scripts\\r\\n            const allHostnames = allHosts(ns);\\r\\n            for (const hostname of allHostnames) {\\r\\n                const processes = ns.ps(hostname).filter((a) => a.filename === CONSTWEAKENJS);\\r\\n                for (const process of processes) {\\r\\n                    ns.kill(process.pid);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // if we have the red pill and we can hack the world daemon, ascend\\r\\n        if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\"))\\r\\n            ns.exec(\\\"ascend.js\\\", \\\"home\\\");\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUU3QixTQUFTLFVBQVUsQ0FBQyxDQUFTO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsK0JBQStCO0FBQzNFLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QixFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQixFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV0QixZ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\",\"filename\":\"controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///25014eae-2d1f-4dad-9603-b7e25a50c93c\",\"moduleSequenceNumber\":1567686},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///29bf3fba-9602-4902-a063-d345f9d9e6b8\",\"moduleSequenceNumber\":1567687},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///afc64ed1-0f4e-4c78-823e-9fb81a4a4603\",\"moduleSequenceNumber\":1567686},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///de781719-f31b-424b-92ba-e272f8be9571\",\"moduleSequenceNumber\":1567686},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///a8ec8952-fe35-43dd-a36c-8f3568534775\",\"moduleSequenceNumber\":1567701},{\"filename\":\"controller.js\",\"url\":\"blob:file:///8e450036-94e3-474f-9e74-df527109b52b\",\"moduleSequenceNumber\":1567720}],\"dependents\":[],\"ramUsage\":69.9,\"server\":\"home\",\"moduleSequenceNumber\":1567720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.singularity.stopAction();\\r\\n    while (ns.singularity.upgradeHomeRam())\\r\\n        await ns.sleep(10);\\r\\n    while (ns.singularity.upgradeHomeCores())\\r\\n        await ns.sleep(10);\\r\\n    const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\");\\r\\n    while (ns.getRunningScript(joinPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n    while (ns.getRunningScript(cctPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, \\\"-ng\\\");\\r\\n    while (ns.getRunningScript(mcpPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    ns.singularity.installAugmentations(\\\"controller.js\\\");\\r\\n    // in case install fails because we dont have any augs to install\\r\\n    ns.singularity.softReset(\\\"controller.js\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJyZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFNUIsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRCxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFN0QsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVqRSxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVoRSxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hELE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFaEUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUVyRCxpRUFBaUU7SUFDakUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDOUMsQ0FBQyJ9\",\"filename\":\"reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"reset.js\",\"url\":\"blob:file:///215b1a27-6f7c-4dfe-8172-3f768c99e0dc\",\"moduleSequenceNumber\":1567677}],\"dependents\":[],\"ramUsage\":20.2,\"server\":\"home\",\"moduleSequenceNumber\":1567716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.softReset\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.chargeFragment(Number(ns.args[0]), Number(ns.args[1]));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3RhbmVrL2NoYXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSSxFQUFFO1FBQ1QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMxRTtBQUNMLENBQUMifQ==\",\"filename\":\"/stanek/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":1567717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nimport { doBuyAndSoftenAll, doBackdoors, ALL_FACTIONS } from \\\"lib/util\\\";\\r\\nimport { Augmentation } from \\\"lib/augmentation/augmentation\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"a\\\", false],\\r\\n    [\\\"n\\\", false],\\r\\n    [\\\"g\\\", false], // execute buys\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any,  @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    return [\\\"-a\\\", \\\"-n\\\", \\\"-an\\\"];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n    let sortedFactions;\\r\\n    if (!options.a) {\\r\\n        const player = ns.getPlayer();\\r\\n        const checkFactions = player.factions.concat(ns.singularity.checkFactionInvitations());\\r\\n        sortedFactions = checkFactions.sort((a, b) => (ns.getPlayer().currentWorkFactionName === b ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.singularity.getFactionRep(b) -\\r\\n            ((ns.getPlayer().currentWorkFactionName === a ? ns.getPlayer().workRepGained : 0) + ns.singularity.getFactionRep(a)));\\r\\n    }\\r\\n    else {\\r\\n        sortedFactions = ALL_FACTIONS.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a));\\r\\n    }\\r\\n    sortedFactions = sortedFactions.filter((a) => a !== \\\"Church of the Machine God\\\");\\r\\n    let allPurchaseableAugs = [];\\r\\n    let topFaction = true;\\r\\n    for (const faction of sortedFactions) {\\r\\n        const augs = ns\\r\\n            .singularity.getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n            return new Augmentation(ns, name, faction);\\r\\n        })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        const augsToBuy = [];\\r\\n        for (const aug of augs) {\\r\\n            if (aug.isHackUseful(options.n) && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful(options.n) && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n        if (augsToBuy.length === 0 && !topFaction)\\r\\n            continue;\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.singularity.getFactionRep(faction));\\r\\n        for (const aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n        topFaction = false;\\r\\n    }\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        const checkName = allPurchaseableAugs[i].name;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === checkName) {\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n            }\\r\\n            else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n    // reorder array to buy dependent augs first and purge augs that cant be bought\\r\\n    // because of a missing dependency, need to loop multiple times until no more dependencies are found\\r\\n    while (true) {\\r\\n        let didDepMove = false;\\r\\n        for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n            const augName = allPurchaseableAugs[i].name;\\r\\n            const depName = allPurchaseableAugs[i].dep;\\r\\n            if (depName === \\\"\\\")\\r\\n                continue;\\r\\n            let foundDep = false;\\r\\n            // check to see if we've already re-organized this dep and it is placed higher in the queue\\r\\n            for (let k = 0; k < i; k++) {\\r\\n                if (allPurchaseableAugs[k].name === depName) {\\r\\n                    foundDep = true;\\r\\n                }\\r\\n            }\\r\\n            if (foundDep)\\r\\n                continue;\\r\\n            const depLoc = allPurchaseableAugs.findIndex((a) => a.name === depName);\\r\\n            if (depLoc >= 0) {\\r\\n                const tmp = allPurchaseableAugs[depLoc];\\r\\n                // remove aug from current place\\r\\n                allPurchaseableAugs.splice(depLoc, 1);\\r\\n                // place it before the main aug\\r\\n                const curLoc = allPurchaseableAugs.findIndex((a) => a.name === augName);\\r\\n                allPurchaseableAugs.splice(curLoc, 0, tmp);\\r\\n                foundDep = true;\\r\\n                didDepMove = true;\\r\\n            }\\r\\n            // if we dont have the dependency queued, remove this aug from the buy list\\r\\n            if (!foundDep) {\\r\\n                ns.tprintf(\\\"WARNING: Unable to find dependency %s:%s in the queue\\\", allPurchaseableAugs[i].name, allPurchaseableAugs[i].dep);\\r\\n                allPurchaseableAugs.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n        if (!didDepMove)\\r\\n            break;\\r\\n    }\\r\\n    if (options.g) {\\r\\n        ns.singularity.stopAction();\\r\\n    }\\r\\n    let mult = 1;\\r\\n    const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n    const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n    const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n    let total = Number.MAX_SAFE_INTEGER;\\r\\n    let startAug = 0;\\r\\n    const purchaseableAugs = allPurchaseableAugs.filter((a) => a.name !== \\\"The Red Pill\\\");\\r\\n    while (startAug < purchaseableAugs.length) {\\r\\n        total = 0;\\r\\n        mult = 1;\\r\\n        for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n            total += purchaseableAugs[augIdx].price * mult;\\r\\n            mult *= multmult;\\r\\n        }\\r\\n        if (total < ns.getPlayer().money)\\r\\n            break;\\r\\n        startAug++;\\r\\n    }\\r\\n    let affordableAugs = purchaseableAugs.slice(startAug);\\r\\n    // check if affordableAugs includes deps if they're not already installed\\r\\n    let redoUpdate = false;\\r\\n    for (const aug of affordableAugs) {\\r\\n        const depName = aug.dep;\\r\\n        if (depName === \\\"\\\")\\r\\n            continue;\\r\\n        if (ns.singularity.getOwnedAugmentations(true).includes(depName))\\r\\n            continue;\\r\\n        let depAug = affordableAugs.find((a) => a.name === depName);\\r\\n        if (depAug === undefined) {\\r\\n            // dependency is not installed, and not in the list to be installed, pull it from purchaseableAugs\\r\\n            depAug = purchaseableAugs.find((a) => a.name === depName);\\r\\n            if (depAug === undefined) {\\r\\n                ns.tprintf(\\\"ERROR: Unable to find dependency aug in the purchaseableAugs \\\" +\\r\\n                    \\\"array even though it should be there %s | %s\\\");\\r\\n                return;\\r\\n            }\\r\\n            const thisAugIdx = affordableAugs.findIndex((a) => a.name === aug.name);\\r\\n            affordableAugs.splice(thisAugIdx, 0, depAug);\\r\\n            redoUpdate = true;\\r\\n        }\\r\\n    }\\r\\n    if (redoUpdate) {\\r\\n        startAug = 0;\\r\\n        while (startAug < affordableAugs.length) {\\r\\n            total = 0;\\r\\n            mult = 1;\\r\\n            for (let augIdx = startAug; augIdx < affordableAugs.length; augIdx++) {\\r\\n                total += affordableAugs[augIdx].price * mult;\\r\\n                mult *= multmult;\\r\\n            }\\r\\n            if (total < ns.getPlayer().money)\\r\\n                break;\\r\\n            startAug++;\\r\\n        }\\r\\n        affordableAugs = affordableAugs.slice(startAug);\\r\\n    }\\r\\n    //if (affordableAugs.length === 0) return;\\r\\n    ns.tprintf(\\\"============================\\\");\\r\\n    total = 0;\\r\\n    mult = 1;\\r\\n    const startmoney = ns.getPlayer().money;\\r\\n    for (const aug of affordableAugs) {\\r\\n        if (options.g)\\r\\n            ns.singularity.purchaseAugmentation(aug.faction, aug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", aug.name, ns.nFormat(aug.price * mult, \\\"$0.000a\\\"), aug.dep);\\r\\n        total += aug.price * mult;\\r\\n        mult *= multmult;\\r\\n    }\\r\\n    // see how many Neuroflux Governors we can buy\\r\\n    let neurofluxFactionIdx = 0;\\r\\n    while (neurofluxFactionIdx < sortedFactions.length) {\\r\\n        if (ns.gang.inGang() && ns.gang.getGangInformation().faction === sortedFactions[neurofluxFactionIdx]) {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else if (sortedFactions[neurofluxFactionIdx] === \\\"Bladeburners\\\") {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const topFactionForNeuroflux = neurofluxFactionIdx >= sortedFactions.length ? \\\"\\\" : sortedFactions[neurofluxFactionIdx];\\r\\n    const topFactionRep = topFactionForNeuroflux !== \\\"\\\"\\r\\n        ? (ns.getPlayer().currentWorkFactionName === topFactionForNeuroflux ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.singularity.getFactionRep(topFactionForNeuroflux)\\r\\n        : 0;\\r\\n    let ngPrice = ns.singularity.getAugmentationPrice(\\\"NeuroFlux Governor\\\") * (options.g ? 1 : mult);\\r\\n    let ngRepReq = ns.singularity.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n    let nfCount = 1;\\r\\n    let neuroError = false;\\r\\n    while (true) {\\r\\n        if (total + ngPrice < startmoney && ngRepReq <= topFactionRep) {\\r\\n            if (options.g) {\\r\\n                const result = ns.singularity.purchaseAugmentation(topFactionForNeuroflux, \\\"NeuroFlux Governor\\\");\\r\\n                if (!result) {\\r\\n                    ns.tprintf(\\\"ERROR, could not buy Neuroflux governor\\\");\\r\\n                    neuroError = true;\\r\\n                }\\r\\n            }\\r\\n            ns.tprintf(\\\"%50s - %9s %s\\\", \\\"NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            nfCount++;\\r\\n            total += ngPrice;\\r\\n            ngPrice = ngPrice * 1.14 * multmult;\\r\\n            ngRepReq *= 1.14;\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"%50s - %9s %s)\\\", \\\"(NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const redPillAug = allPurchaseableAugs.find((a) => a.name === \\\"The Red Pill\\\");\\r\\n    if (!neuroError && redPillAug) {\\r\\n        if (options.g)\\r\\n            ns.singularity.purchaseAugmentation(redPillAug.faction, redPillAug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", \\\"The Red Pill\\\", ns.nFormat(0, \\\"$0.000a\\\"), ns.nFormat(redPillAug.rep, \\\"0.000a\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"\\\\n%50s - %9s (%s)\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"), ns.nFormat(total + ngPrice, \\\"$0.000a\\\"));\\r\\n    if (options.n && options.g) {\\r\\n        // find a faction with donation favor\\r\\n        const joinedFactions = ns.getPlayer().factions;\\r\\n        let targetFaction = \\\"\\\";\\r\\n        for (const faction of joinedFactions) {\\r\\n            if (ns.singularity.getFactionFavor(faction) >= ns.getFavorToDonate()) {\\r\\n                targetFaction = faction;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (targetFaction !== \\\"\\\") {\\r\\n            while (true) {\\r\\n                const aug = new Augmentation(ns, \\\"NeuroFlux Governor\\\", targetFaction);\\r\\n                if (aug.price > ns.getPlayer().money)\\r\\n                    break;\\r\\n                if (aug.purchaseable) {\\r\\n                    if (ns.singularity.purchaseAugmentation(aug.faction, aug.name))\\r\\n                        continue;\\r\\n                    else\\r\\n                        break;\\r\\n                }\\r\\n                const repDiff = aug.rep - ns.singularity.getFactionRep(targetFaction);\\r\\n                const donateAmt = 1e6 * (repDiff / ns.getPlayer().faction_rep_mult);\\r\\n                if (donateAmt > ns.getPlayer().money)\\r\\n                    break;\\r\\n                ns.singularity.donateToFaction(targetFaction, donateAmt);\\r\\n                if (aug.price > ns.getPlayer().money)\\r\\n                    break;\\r\\n                ns.singularity.purchaseAugmentation(aug.faction, aug.name);\\r\\n                ns.tprintf(\\\"Donated %s for %d rep and paid %s for a level of NeuroFlux Governor\\\", ns.nFormat(donateAmt, \\\"$0.000a\\\"), repDiff, ns.nFormat(aug.price, \\\"$0.000a\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X2F1Z3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJidXlfYXVncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSw2REFBNkQ7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBWSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTdELDhEQUE4RDtBQUM5RCxJQUFJLE9BQVksQ0FBQztBQUNqQixNQUFNLFVBQVUsR0FBcUQ7SUFDakUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsZUFBZTtDQUNoQyxDQUFDO0FBRUYscUpBQXFKO0FBQ3JKLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBUyxFQUFFLElBQWM7SUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixJQUFJO1FBQ0EsT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDbEM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLElBQUksY0FBd0IsQ0FBQztJQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUNaLE1BQU0s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\",\"filename\":\"buy_augs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///04b36a63-7b43-43ef-839c-88f8b0e5c1a5\",\"moduleSequenceNumber\":1552782},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///274ea521-792e-42f5-accd-a4a38ca411c7\",\"moduleSequenceNumber\":1552797},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///01d8b9e1-9571-43d3-9d94-cdec18680d29\",\"moduleSequenceNumber\":1552782},{\"filename\":\"buy_augs.js\",\"url\":\"blob:file:///0eb92c72-8b61-4c1a-b446-b593d0a6e9b5\",\"moduleSequenceNumber\":1567676}],\"dependents\":[],\"ramUsage\":61.85,\"server\":\"home\",\"moduleSequenceNumber\":1567718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        if (ns.getServerMaxRam(\\\"home\\\") >= 128) {\\r\\n            ns.run(\\\"controller.js\\\");\\r\\n            break;\\r\\n        }\\r\\n        const hackPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n        while (ns.getRunningScript(hackPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n        while (ns.getRunningScript(cctPID) !== null)\\r\\n            await ns.sleep(10);\\r\\n        while (ns.singularity.upgradeHomeRam())\\r\\n            await ns.sleep(10);\\r\\n        const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1, \\\"-t\\\", \\\"Tian Di Hui\\\");\\r\\n        while (ns.getRunningScript(joinPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        ns.singularity.workForFaction(\\\"Tian Di Hui\\\", \\\"Hacking Contracts\\\", true);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnRlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInN0YXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixPQUFPLElBQUksRUFBRTtRQUNULElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUU7WUFDbkMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN4QixNQUFNO1NBQ1Q7UUFFRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUk7WUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEUsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUk7WUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFaEUsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRTtZQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUzRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNuRSxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJO1lBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxFLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMzRTtBQUNMLENBQUMifQ==\",\"filename\":\"starter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"starter.js\",\"url\":\"blob:file:///b2ff97d0-9bea-4ab0-9c2c-f35cd69b230f\",\"moduleSequenceNumber\":1245107}],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":1567719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"14.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":1567989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":1567991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":1567993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":1567995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":25806457051.735558,\"moneyMax\":539842220788.9081,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1278,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"82.2.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":1568005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":1568007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":1568009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":1568011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":53.708,\"minDifficulty\":50,\"moneyAvailable\":1043820799637.973,\"moneyMax\":1043820799637.973,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1280,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"35.3.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1567885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1567887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1567889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1567891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":15910147227.272305,\"moneyMax\":332822486830.7343,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":950,\"serverGrowth\":64}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"38.0.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":1567917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":1567919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///118a04c4-5445-40e5-bc8c-863a977c6519\",\"moduleSequenceNumber\":1573042}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":1573042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":1567923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":32601194012.874084,\"moneyMax\":681980519100.2141,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1159,\"serverGrowth\":57}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"98.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":1567901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":1567903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":1567905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":1567907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":25655741903.194687,\"moneyMax\":536689428434.1992,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":973,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"81.2.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1567981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1567983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1567985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1567987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":14354843228.400715,\"moneyMax\":300287266553.5192,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":967,\"serverGrowth\":60}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"63.6.4.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":1567877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":1567879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3a95ee13-eeb8-42c3-95fc-878ca81928c8\",\"moduleSequenceNumber\":1573049}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":1573049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":1567883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":145.5,\"hackDifficulty\":145.5,\"minDifficulty\":49,\"moneyAvailable\":15583611322.652075,\"moneyMax\":325991720888.5476,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1067,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"84.1.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":1567909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":1567911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":1567913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":1567915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"minDifficulty\":35,\"moneyAvailable\":20162018761.255447,\"moneyMax\":421766884227.59564,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1029,\"serverGrowth\":88}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"20.1.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1567973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1567975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1567977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1567979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":18063574183.952953,\"moneyMax\":377869770472.601,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":964,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"57.6.8.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1567869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1567871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bc333886-0583-4edb-947f-86174ff79b84\",\"moduleSequenceNumber\":1573048}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1573048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1567875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130.5,\"hackDifficulty\":130.5,\"minDifficulty\":44,\"moneyAvailable\":1387288588.7921236,\"moneyMax\":29020525798.92145,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1161,\"serverGrowth\":94}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"76.7.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1567925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1567927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1567929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1567931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":836755.2658726582,\"moneyMax\":17503984.374140576,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1503,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"42.9.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":1567933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1567935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1567937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":1567939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":966656383.222056,\"moneyMax\":20221370473.76184,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":985,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"79.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":1567845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":1567847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":1567849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":1567851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":715332148.693306,\"moneyMax\":14963948556.678179,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"49.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":1568021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":1568023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":1568025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":1568027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":643314482.2298471,\"moneyMax\":13457419515.44918,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":36}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"33.9.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":1568053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":1568055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9c371192-3834-4c2a-be06-b5f5fc2714be\",\"moduleSequenceNumber\":1573045}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":1573045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":1568059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":595715114.2030028,\"moneyMax\":12461693969.232365,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"0.0.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":1567965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":1567967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///271f23e4-dd58-4443-854d-7e3ac1e3449d\",\"moduleSequenceNumber\":1573047}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":1573047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":1567971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":619229692.6865723,\"moneyMax\":12953592653.504932,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":61}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"50.9.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":1567941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":1567943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":1567945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":1567947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":762210116.5352308,\"moneyMax\":15944583217.80667,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"30.6.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1568221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1568223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f292ad97-c3c2-48a6-9259-9928b5f6eeb2\",\"moduleSequenceNumber\":1569141}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1569141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1568227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///9de5d877-bdd4-430e-b14c-9b9f01e2139e\",\"moduleSequenceNumber\":1568737}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1568737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":44,\"minDifficulty\":44,\"moneyAvailable\":19796760781.26019,\"moneyMax\":19796760781.26019,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"68.0.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1567861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1567863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b9ddba3d-cc0d-42cc-a6a1-cb34f679e726\",\"moduleSequenceNumber\":1573039}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1573039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1567867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":675496806.8545723,\"moneyMax\":14130637755.393232,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":67}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"69.1.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":1568045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":1568047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///eba4a4b0-cb8d-482a-8c3d-322f2c72a239\",\"moduleSequenceNumber\":1573044}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":1573044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":1568051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":520687042.44169533,\"moneyMax\":10892190615.868721,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"73.8.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1567853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1567855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1567857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1567859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":748959455.9456036,\"moneyMax\":15667394217.190126,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"96.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1567805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1567807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1567809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1567811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":642026818.7965667,\"moneyMax\":13430483036.487453,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"24.4.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1568197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1568199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1568201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1568203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":892037114.1031774,\"moneyMax\":18660418814.492077,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":907,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"38.0.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":1568213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":1568215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e7d70e01-983c-46b6-8a6f-50ae0b2f0a52\",\"moduleSequenceNumber\":1573040}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":1573040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":1568219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"minDifficulty\":46,\"moneyAvailable\":799925143.9593905,\"moneyMax\":16733539412.799107,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":915,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"80.5.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":1567949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":1567951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":1567953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":1567955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":860115468.0302058,\"moneyMax\":17992653678.32002,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"53.3.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1568029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1568031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1568033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1568035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":744802014.814723,\"moneyMax\":15580425198.21963,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":789,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"34.5.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":1567821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":1567823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///8e8944f6-42fe-4ebf-bc08-b77b4b779b3e\",\"moduleSequenceNumber\":1573041}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":1573041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":1567827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":683372182.5761784,\"moneyMax\":14295381808.037724,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":768,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"91.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":1567813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":1567815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":1567817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":1567819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":1248539704.1001596,\"moneyMax\":26118054301.422478,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":70}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"17.5.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1568205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1568207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a26d31dc-3289-436d-958b-df86c06d0af1\",\"moduleSequenceNumber\":1569143}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1569143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1568211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///e9948627-ac27-494a-b39c-fc41aa4e03db\",\"moduleSequenceNumber\":1568736}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1568736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":1372898030.7286375,\"moneyMax\":28719491417.959747,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"42.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":1568037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1568039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1568041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":1568043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":1032838831.4077884,\"moneyMax\":21605833274.45574,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"7.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1568013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1568015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1568017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1568019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":1226652735.938226,\"moneyMax\":25660203404.83535,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"98.6.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":1567837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1567839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f00e9aa8-571e-4970-a427-0aa484158bc4\",\"moduleSequenceNumber\":1569139}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1569139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":1567843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///859c770c-036b-47ee-ae00-d93e46164614\",\"moduleSequenceNumber\":1568720}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1568720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":894488145.158769,\"moneyMax\":18711691643.056667,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"76.2.8.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1568173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1568175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///077b21ef-33f2-4cd7-ac98-056db5c9453a\",\"moduleSequenceNumber\":1569144}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1569144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1568179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d394b646-6b69-4822-8729-18138c06c712\",\"moduleSequenceNumber\":1568733}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1568733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":608833510.561264,\"moneyMax\":12736116150.04686,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":746,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"69.7.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1568189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1568191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///15160144-6ebc-42e1-b4b9-fccf6cda6631\",\"moduleSequenceNumber\":1568304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1568304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1568195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///6424c407-54dc-46a2-aa73-83efad031d42\",\"moduleSequenceNumber\":1568735}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1568735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67.5,\"hackDifficulty\":67.5,\"minDifficulty\":23,\"moneyAvailable\":463012733.5139298,\"moneyMax\":9685708573.346863,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":494,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"56.1.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1568253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1568255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///59c688bd-d61e-4835-be12-d2956b264adc\",\"moduleSequenceNumber\":1569142}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1569142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1568259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ada17e2a-b17d-4798-b4f5-403859a2d5d3\",\"moduleSequenceNumber\":1568740}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1568740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":627462262.4960741,\"moneyMax\":13125808806.999054,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":519,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"64.8.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1567797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1567799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///54e57de5-ad9f-4e5b-8cc8-d8bbd4c9718b\",\"moduleSequenceNumber\":1569138}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1569138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1567803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///5735de02-9dd9-45c9-8b40-dbbe5620c098\",\"moduleSequenceNumber\":1568719}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1568719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":182353149.64030436,\"moneyMax\":3814623955.249738,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":418,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"9.8.0.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1568149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1568151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///32231f68-2220-48bc-86eb-c0580f5a6219\",\"moduleSequenceNumber\":1568306}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1568306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1568155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///9ba4e57d-fce8-41ba-9f7e-81c245e0071d\",\"moduleSequenceNumber\":1568731}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1568731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":155478853.16883987,\"moneyMax\":3252443728.021715,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":412,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"14.1.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1567789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1567791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c55f3ceb-e492-4d1e-b09e-08a336d6c1e8\",\"moduleSequenceNumber\":1573046}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1573046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1567795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":907444816.8062636,\"moneyMax\":18982730723.78727,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":748,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"32.3.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1567765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1567767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///d016f714-fdac-44d0-b18c-049214304021\",\"moduleSequenceNumber\":1568301}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1568301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1567771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///503652b3-87a7-43d0-b3d5-e72fdbd2fc00\",\"moduleSequenceNumber\":1568716}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1568716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":263966569.85631147,\"moneyMax\":5521885433.540288,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":435,\"serverGrowth\":45}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"93.1.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":1568245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1568247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1568249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":1568251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":392377072.9664678,\"moneyMax\":8208089550.309805,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":568,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"38.9.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":1568165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1568167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///38f1be43-f79c-489a-ba37-af93286ab9e3\",\"moduleSequenceNumber\":1568303}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1568303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":1568171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///271fe747-084c-4708-8a2f-bfc6b18a2645\",\"moduleSequenceNumber\":1568732}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1568732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":392403994.730392,\"moneyMax\":8208652723.503058,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":429,\"serverGrowth\":29}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"92.4.3.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":1567781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1567783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b654196e-0e0c-4e66-9f68-d15acf2703fd\",\"moduleSequenceNumber\":1568286}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1568286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":1567787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///33b60ac6-195e-4f40-bfed-fcd90e912d8b\",\"moduleSequenceNumber\":1568718}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1568718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67.5,\"hackDifficulty\":67.5,\"minDifficulty\":23,\"moneyAvailable\":140224021.46905246,\"moneyMax\":2933329709.151758,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":302,\"serverGrowth\":51}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"54.9.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":1568141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":1568143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":1568145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"computek\",\"moduleSequenceNumber\":1568147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":192732610.04837942,\"moneyMax\":4031750659.0840774,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":375,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"85.5.8.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":1567757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1567759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///884c3ecf-153d-4524-8284-e9179c44edca\",\"moduleSequenceNumber\":1568305}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1568305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":1567763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///6260554d-5f28-49f5-80dd-3df826e86477\",\"moduleSequenceNumber\":1568715}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1568715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":230107698.11498103,\"moneyMax\":4813595702.888659,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":410,\"serverGrowth\":45}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"44.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1568077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1568079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1568081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1568083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":66872123.6315016,\"moneyMax\":1398890039.7186599,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":284,\"serverGrowth\":40}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"14.8.1.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":1567725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1567727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6ab47aad-e5fd-45f0-af58-4db155c45a3e\",\"moduleSequenceNumber\":1568285}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1568285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":1567731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///0a3311e2-4722-484c-a0b0-03f03fe921c6\",\"moduleSequenceNumber\":1568711}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1568711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1.5,\"hackDifficulty\":1.5,\"minDifficulty\":1,\"moneyAvailable\":58572.86861108608,\"moneyMax\":1225278.9061898403,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"96.6.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1567733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1567735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f4dc1d88-8902-44f6-98eb-35c853160b68\",\"moduleSequenceNumber\":1568288}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1568288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1567739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///84633d67-b5c7-4009-b146-799b8b45fc4e\",\"moduleSequenceNumber\":1568712}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1568712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1673510.5317453165,\"moneyMax\":35007968.74828115,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"25.7.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1568085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1568087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1917ed53-570e-4569-ba46-197730e7844f\",\"moduleSequenceNumber\":1568289}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1568289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1568091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///bfa6214b-3fc8-48c6-911f-624af0590992\",\"moduleSequenceNumber\":1568724}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1568724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":40259164.06052332,\"moneyMax\":40259164.06052332,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"65.2.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":1568101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1568103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6077e2d0-df3a-4d2d-b66c-21be855b4924\",\"moduleSequenceNumber\":1568290}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1568290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":1568107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///7535ff8e-5dc1-41f6-b9d0-62283f14d8f3\",\"moduleSequenceNumber\":1568726}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1568726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":2091888.1646816456,\"moneyMax\":43759960.93535144,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"71.4.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":1568269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1568271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///728aa9af-aafb-4d25-8ccf-255010272df5\",\"moduleSequenceNumber\":1568300}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1568300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":1568275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///01c803b3-3da9-45a1-b6ce-7ee4d64218d0\",\"moduleSequenceNumber\":1568742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1568742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":6275664.494044937,\"moneyMax\":131279882.80605431,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"5.9.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1568125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1568127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///fc7e86ba-2f79-4f8c-8293-c503d1d27deb\",\"moduleSequenceNumber\":1568293}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1568293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1568131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///15d2d92c-2719-41c5-9f16-3c57cdadebdf\",\"moduleSequenceNumber\":1568729}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1568729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2301076.9811498104,\"moneyMax\":48135957.02888658,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"71.8.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":1567749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1567751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///208de9c5-17ad-40b2-b076-e84f15261230\",\"moduleSequenceNumber\":1568295}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1568295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":1567755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///94cc7f92-1092-402b-98a2-5c67c9abb7c0\",\"moduleSequenceNumber\":1568714}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1568714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":4183776.329363291,\"moneyMax\":87519921.87070288,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"52.2.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1568133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1568135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0c5cf575-4710-49e4-83ac-dc7781eeb90d\",\"moduleSequenceNumber\":1568302}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1568302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1568139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///af06399c-f8f9-43fe-9df8-2278d7e4a64a\",\"moduleSequenceNumber\":1568730}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1568730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":37653986.96426962,\"moneyMax\":787679296.8363259,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"40.9.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1568109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1568111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c76e3cd9-6df9-4d04-8095-908c40a79bdf\",\"moduleSequenceNumber\":1568291}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1568291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1568115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///4dc59c6b-ac56-4a38-94c3-02a03aa35372\",\"moduleSequenceNumber\":1568727}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1568727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":2510265.7976179747,\"moneyMax\":52511953.12242172,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"31.2.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1568117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1568119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///eb871b17-20fc-4760-907e-46cd79ee93cf\",\"moduleSequenceNumber\":1568292}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1568292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1568123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///2adf8df3-be5a-4a9a-b8ea-1f1801ea0fdd\",\"moduleSequenceNumber\":1568728}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1568728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":3347021.063490633,\"moneyMax\":70015937.4965623,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"50.5.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":1567773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1567775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6cefc7bd-6fea-4f55-9f02-4fccc1902c30\",\"moduleSequenceNumber\":1568296}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1568296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":1567779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///5cd98d2b-725c-4331-83ff-b93ff1374e41\",\"moduleSequenceNumber\":1568717}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1568717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20082126.380943798,\"moneyMax\":420095624.97937375,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"31.7.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1567741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1567743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f37dc815-a0b0-4790-82d8-be1e6d5403d4\",\"moduleSequenceNumber\":1568294}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1568294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1567747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///6382575c-957a-496b-86a8-dab4a7581d37\",\"moduleSequenceNumber\":1568713}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1568713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":8367552.658726582,\"moneyMax\":175039843.74140576,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"14.3.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1568069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1568071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///36b24e1b-0ef2-463c-aece-1f8d3a795da0\",\"moduleSequenceNumber\":1568297}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1568297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":1568075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d0e6527c-7209-4942-be80-ed0fd7b3fd6d\",\"moduleSequenceNumber\":1568723}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1568723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":52925007.36818588,\"moneyMax\":1107131965.2919693,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":183,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"16.7.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1568157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1568159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1568161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1568163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":35607137.15177357,\"moneyMax\":744861487.8599125,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":265,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"55.9.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1568261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1568263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///996ef88e-24c6-4b21-880b-d47a1210f04d\",\"moduleSequenceNumber\":1568299}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1568299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1568267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///33d6124c-c217-46f5-a723-8ad2b1a7155c\",\"moduleSequenceNumber\":1568741}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1568741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":16735105.317453165,\"moneyMax\":350079687.4828115,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"60.9.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///cb179e50-3595-49c1-be74-3a1363fa42ce\",\"moduleSequenceNumber\":1568633}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1568633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1568231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///2d32aa2a-34cb-431b-a41a-03728da0ad15\",\"moduleSequenceNumber\":1568307}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1568307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1568235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///f0349cdf-ec20-4170-a8b8-70ce8177e43d\",\"moduleSequenceNumber\":1568738}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1568738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":209188816.46816456,\"moneyMax\":4375996093.535144,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":478,\"serverGrowth\":37}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"28.0.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1567997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1567999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///5e3f70a1-a626-44d9-9308-e06013388fc0\",\"moduleSequenceNumber\":1573043}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1573043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1568003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":753079739.2853924,\"moneyMax\":15753585936.726519,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1012,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"0.9.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1567829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1567831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1567833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1567835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79.5,\"hackDifficulty\":79.5,\"minDifficulty\":27,\"moneyAvailable\":376539869.6426962,\"moneyMax\":7876792968.363259,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":713,\"serverGrowth\":56}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"86.2.8.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1567957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1567959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///10e4fed8-5929-4364-a926-71866f0e1087\",\"moduleSequenceNumber\":1569145}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1569145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1567963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b2b26a6f-2ae8-4a51-bb39-5c13414a76a1\",\"moduleSequenceNumber\":1568721}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1568721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":508,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"72.3.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1568181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1568183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1374baa2-a9da-48a8-b36b-34bb988010f2\",\"moduleSequenceNumber\":1568298}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1568298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1568187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///95f497d1-6c86-4d2c-9b82-7cb9c54ac546\",\"moduleSequenceNumber\":1568734}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1568734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":353,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"97.2.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1568237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1568239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3d97bb46-562d-4f3b-98db-053fb6d7e3a5\",\"moduleSequenceNumber\":1568308}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1568308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1568243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///1ecb81ac-e1f2-4342-9067-517a6fd1a447\",\"moduleSequenceNumber\":1568739}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1568739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":205,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"94.8.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":1568061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1568063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///22620175-8db0-487d-8dc8-e34d51f581bc\",\"moduleSequenceNumber\":1569140}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1569140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":1568067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///2c5baaec-6bfe-443a-adf5-94f11616fcbb\",\"moduleSequenceNumber\":1568722}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1568722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":516,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"24.6.4.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":1568093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1568095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///5e9cb97c-4b3b-4056-9709-a6f2dff655fa\",\"moduleSequenceNumber\":1568287}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1568287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":1568099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///fbbf4fda-7698-48d8-857b-d26942578f8b\",\"moduleSequenceNumber\":1568725}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1568725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"38.8.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1567893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1567895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1567897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1567899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"68.4.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3585.277705866933,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"58.2.7.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":1568277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1568279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1568281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"darkweb\",\"moduleSequenceNumber\":1568283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":true,\"ip\":\"70.4.7.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///2e872312-3dbc-4b87-889d-61c18b9d0e02\",\"moduleSequenceNumber\":1568743}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1568743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1569107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1569109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b436bbe1-0e1a-45df-88d2-a9a3ccbeceeb\",\"moduleSequenceNumber\":1569146}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1569146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1569113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":true,\"ip\":\"10.4.9.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///9c517a73-590c-4089-b672-9e7bb18d4257\",\"moduleSequenceNumber\":1568744}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1568744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1569115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1569117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f28252be-87c7-4a2f-b544-70f0db38d1cd\",\"moduleSequenceNumber\":1569147}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1569147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1569121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":true,\"ip\":\"77.1.2.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b1e96982-4e61-47f1-b784-e91f3cf7eb15\",\"moduleSequenceNumber\":1568745}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1568745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1569123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1569125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///2927dc4b-b8ea-4c57-848c-9c8eb1d9f3da\",\"moduleSequenceNumber\":1569148}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1569148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1569129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":true,\"ip\":\"9.5.2.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d7263825-423f-4da2-b11d-19ce9e33abe8\",\"moduleSequenceNumber\":1568746}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1568746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1569131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1569133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///802a0006-40b1-4908-a08e-b68f9763d240\",\"moduleSequenceNumber\":1569149}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1569149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1569137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":true,\"ip\":\"7.5.7.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///32467744-ca87-4227-8cc9-4503432bfbeb\",\"moduleSequenceNumber\":1573051}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"moduleSequenceNumber\":1573051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d9f9f17c-9f6a-493a-80b6-0b4d7c574f93\",\"moduleSequenceNumber\":1573038}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":1573038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6fbf40dd-8c23-4aa5-b476-7e841adc972d\",\"moduleSequenceNumber\":1573050}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":1573050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4\",\"moduleSequenceNumber\":1572897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":true,\"ip\":\"50.7.2.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12015.349999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",56,\"--offset\",90800,\"--uid\",113721],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":810.8100000000475,\"pid\":814,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",57,\"--offset\",91200,\"--uid\",113722],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":810.4100000000474,\"pid\":815,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",57,\"--offset\",91600,\"--uid\",113724],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":810.0100000000473,\"pid\":816,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",57,\"--offset\",92000,\"--uid\",113723],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":809.6100000000472,\"pid\":817,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e1996849-26a1-4d36-acc2-a6c2d81b8bf0\",\"moduleSequenceNumber\":1573494}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",57,\"--offset\",92400,\"--uid\",113725],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":809.2100000000471,\"pid\":818,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",58,\"--offset\",92800,\"--uid\",113726],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":808.810000000047,\"pid\":819,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",58,\"--offset\",93200,\"--uid\",113728],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":808.4100000000469,\"pid\":820,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",58,\"--offset\",93600,\"--uid\",113727],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":808.0100000000468,\"pid\":821,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e1996849-26a1-4d36-acc2-a6c2d81b8bf0\",\"moduleSequenceNumber\":1573494}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",58,\"--offset\",94000,\"--uid\",113729],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":807.6100000000467,\"pid\":822,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",59,\"--offset\",94400,\"--uid\",113730],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":807.2100000000466,\"pid\":823,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",59,\"--offset\",94800,\"--uid\",113732],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":806.8100000000466,\"pid\":824,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",59,\"--offset\",95200,\"--uid\",113731],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":806.4100000000465,\"pid\":825,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e1996849-26a1-4d36-acc2-a6c2d81b8bf0\",\"moduleSequenceNumber\":1573494}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",59,\"--offset\",95600,\"--uid\",113733],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":806.0100000000464,\"pid\":826,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",60,\"--offset\",96000,\"--uid\",113734],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":805.6100000000463,\"pid\":827,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",60,\"--offset\",96400,\"--uid\",113736],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":805.2100000000462,\"pid\":828,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",60,\"--offset\",96800,\"--uid\",113735],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":804.8100000000461,\"pid\":829,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e1996849-26a1-4d36-acc2-a6c2d81b8bf0\",\"moduleSequenceNumber\":1573494}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",60,\"--offset\",97200,\"--uid\",113737],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":804.410000000046,\"pid\":830,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",61,\"--offset\",97600,\"--uid\",113738],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":804.0100000000459,\"pid\":831,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",61,\"--offset\",98000,\"--uid\",113740],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":803.6100000000458,\"pid\":832,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",61,\"--offset\",98400,\"--uid\",113739],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":803.2100000000457,\"pid\":833,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e1996849-26a1-4d36-acc2-a6c2d81b8bf0\",\"moduleSequenceNumber\":1573494}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",61,\"--offset\",98800,\"--uid\",113741],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":802.8100000000456,\"pid\":834,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",62,\"--offset\",99200,\"--uid\",113742],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":802.4100000000456,\"pid\":835,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",62,\"--offset\",99600,\"--uid\",113744],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":802.0100000000455,\"pid\":836,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",62,\"--offset\",100400,\"--uid\",113745],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":801.2100000000453,\"pid\":838,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",63,\"--offset\",100800,\"--uid\",113746],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":800.8100000000452,\"pid\":839,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",63,\"--offset\",101200,\"--uid\",113748],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":800.4100000000451,\"pid\":840,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",63,\"--offset\",102000,\"--uid\",113749],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":799.6100000000449,\"pid\":842,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",64,\"--offset\",102400,\"--uid\",113750],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":799.2100000000448,\"pid\":843,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",64,\"--offset\",102800,\"--uid\",113752],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":798.8100000000447,\"pid\":844,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",64,\"--offset\",103600,\"--uid\",113753],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":798.0100000000446,\"pid\":846,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",65,\"--offset\",104000,\"--uid\",113754],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":797.6100000000445,\"pid\":847,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",65,\"--offset\",104400,\"--uid\",113756],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":797.2100000000444,\"pid\":848,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",65,\"--offset\",105200,\"--uid\",113757],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":796.4100000000442,\"pid\":850,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",66,\"--offset\",105600,\"--uid\",113758],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":796.0100000000441,\"pid\":851,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",66,\"--offset\",106000,\"--uid\",113760],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":795.610000000044,\"pid\":852,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",66,\"--offset\",106800,\"--uid\",113761],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":794.8100000000438,\"pid\":854,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",67,\"--offset\",107200,\"--uid\",113762],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":794.4100000000437,\"pid\":855,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",67,\"--offset\",107600,\"--uid\",113764],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":794.0100000000436,\"pid\":856,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",67,\"--offset\",108400,\"--uid\",113765],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":793.2100000000435,\"pid\":858,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",68,\"--offset\",108800,\"--uid\",113766],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":792.8100000000434,\"pid\":859,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",68,\"--offset\",109200,\"--uid\",113768],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":792.4100000000433,\"pid\":860,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",68,\"--offset\",110000,\"--uid\",113769],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":791.6100000000431,\"pid\":862,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":31,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///60d74132-5534-4390-a94c-3663359d9431\",\"moduleSequenceNumber\":1573496}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"moduleSequenceNumber\":1573496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///e1996849-26a1-4d36-acc2-a6c2d81b8bf0\",\"moduleSequenceNumber\":1573494}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":1573494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a518825c-a8eb-4cad-9983-67c27dab84dd\",\"moduleSequenceNumber\":1573495}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":1573495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-5\",\"moduleSequenceNumber\":1572905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":true,\"ip\":\"71.6.7.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65517.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",62,\"--offset\",100000,\"--uid\",113743],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":801.6100000000454,\"pid\":837,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",63,\"--offset\",101600,\"--uid\",113747],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":800.010000000045,\"pid\":841,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",64,\"--offset\",103200,\"--uid\",113751],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":798.4100000000446,\"pid\":845,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",65,\"--offset\",104800,\"--uid\",113755],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":796.8100000000443,\"pid\":849,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",66,\"--offset\",106400,\"--uid\",113759],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":795.2100000000439,\"pid\":853,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",67,\"--offset\",108000,\"--uid\",113763],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":793.6100000000436,\"pid\":857,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",68,\"--offset\",109600,\"--uid\",113767],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":792.0100000000432,\"pid\":861,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",68,\"--offset\",110000,\"--uid\",113770],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":791.6100000000431,\"pid\":863,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":67,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",69,\"--offset\",110400,\"--uid\",113771],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":791.210000000043,\"pid\":864,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",69,\"--offset\",110800,\"--uid\",113773],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":790.8100000000429,\"pid\":865,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",69,\"--offset\",111200,\"--uid\",113772],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":790.4100000000428,\"pid\":866,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",69,\"--offset\",111600,\"--uid\",113774],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":790.0100000000427,\"pid\":867,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",70,\"--offset\",112000,\"--uid\",113775],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":789.6100000000426,\"pid\":868,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",70,\"--offset\",112400,\"--uid\",113777],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":789.2100000000426,\"pid\":869,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",70,\"--offset\",112800,\"--uid\",113776],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":788.8100000000425,\"pid\":870,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",70,\"--offset\",113200,\"--uid\",113778],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":788.4100000000424,\"pid\":871,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",71,\"--offset\",113600,\"--uid\",113779],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":788.0100000000423,\"pid\":872,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",71,\"--offset\",114000,\"--uid\",113781],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":787.6100000000422,\"pid\":873,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",71,\"--offset\",114400,\"--uid\",113780],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":787.2100000000421,\"pid\":874,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",71,\"--offset\",114800,\"--uid\",113782],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":786.810000000042,\"pid\":875,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",72,\"--offset\",115200,\"--uid\",113783],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":786.4100000000419,\"pid\":876,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",72,\"--offset\",115600,\"--uid\",113785],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":786.0100000000418,\"pid\":877,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",72,\"--offset\",116000,\"--uid\",113784],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":785.6100000000417,\"pid\":878,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",72,\"--offset\",116400,\"--uid\",113786],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":785.2100000000416,\"pid\":879,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",73,\"--offset\",116800,\"--uid\",113787],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":784.8100000000416,\"pid\":880,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",73,\"--offset\",117200,\"--uid\",113789],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":784.4100000000415,\"pid\":881,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",73,\"--offset\",117600,\"--uid\",113788],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":784.0100000000414,\"pid\":882,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",73,\"--offset\",118000,\"--uid\",113790],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":783.6100000000413,\"pid\":883,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",74,\"--offset\",118400,\"--uid\",113791],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":783.2100000000412,\"pid\":884,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",74,\"--offset\",118800,\"--uid\",113793],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":782.8100000000411,\"pid\":885,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",74,\"--offset\",119200,\"--uid\",113792],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":782.410000000041,\"pid\":886,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",74,\"--offset\",119600,\"--uid\",113794],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":782.0100000000409,\"pid\":887,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",75,\"--offset\",120000,\"--uid\",113795],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":781.6100000000408,\"pid\":888,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",75,\"--offset\",120400,\"--uid\",113797],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":781.2100000000407,\"pid\":889,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",75,\"--offset\",120800,\"--uid\",113796],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":780.8100000000406,\"pid\":890,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",75,\"--offset\",121200,\"--uid\",113798],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":780.4100000000406,\"pid\":891,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",76,\"--offset\",121600,\"--uid\",113799],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":780.0100000000405,\"pid\":892,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",76,\"--offset\",122000,\"--uid\",113801],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":779.6100000000404,\"pid\":893,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",76,\"--offset\",122400,\"--uid\",113800],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":779.2100000000403,\"pid\":894,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",76,\"--offset\",122800,\"--uid\",113802],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":778.8100000000402,\"pid\":895,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",77,\"--offset\",123200,\"--uid\",113803],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":778.4100000000401,\"pid\":896,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",77,\"--offset\",123600,\"--uid\",113805],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":778.01000000004,\"pid\":897,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",77,\"--offset\",124000,\"--uid\",113804],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":777.6100000000399,\"pid\":898,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",77,\"--offset\",124400,\"--uid\",113806],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":777.2100000000398,\"pid\":899,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",78,\"--offset\",124800,\"--uid\",113807],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":776.8100000000397,\"pid\":900,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",78,\"--offset\",125200,\"--uid\",113809],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":776.4100000000396,\"pid\":901,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",78,\"--offset\",125600,\"--uid\",113808],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":776.0100000000396,\"pid\":902,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",78,\"--offset\",126000,\"--uid\",113810],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":775.6100000000395,\"pid\":903,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",79,\"--offset\",126400,\"--uid\",113811],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":775.2100000000394,\"pid\":904,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",79,\"--offset\",126800,\"--uid\",113813],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":774.8100000000393,\"pid\":905,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",79,\"--offset\",127200,\"--uid\",113812],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":774.4100000000392,\"pid\":906,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",79,\"--offset\",127600,\"--uid\",113814],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":774.0100000000391,\"pid\":907,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",80,\"--offset\",128000,\"--uid\",113815],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":773.610000000039,\"pid\":908,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",80,\"--offset\",128400,\"--uid\",113817],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":773.2100000000389,\"pid\":909,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",80,\"--offset\",128800,\"--uid\",113816],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":772.8100000000388,\"pid\":910,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",80,\"--offset\",129200,\"--uid\",113818],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":772.4100000000387,\"pid\":911,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",81,\"--offset\",129600,\"--uid\",113819],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":772.0100000000386,\"pid\":912,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",81,\"--offset\",130000,\"--uid\",113821],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":771.6100000000386,\"pid\":913,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",81,\"--offset\",130400,\"--uid\",113820],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":771.2100000000385,\"pid\":914,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",81,\"--offset\",130800,\"--uid\",113822],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000384,\"pid\":915,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",82,\"--offset\",131200,\"--uid\",113823],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.4100000000383,\"pid\":916,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",82,\"--offset\",131600,\"--uid\",113825],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.0100000000382,\"pid\":917,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",82,\"--offset\",132000,\"--uid\",113824],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":769.6100000000381,\"pid\":918,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",82,\"--offset\",132400,\"--uid\",113826],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":769.210000000038,\"pid\":919,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",83,\"--offset\",132800,\"--uid\",113827],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":768.8100000000379,\"pid\":920,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",83,\"--offset\",133200,\"--uid\",113829],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":768.4100000000378,\"pid\":921,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",83,\"--offset\",133600,\"--uid\",113828],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":768.0100000000377,\"pid\":922,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",83,\"--offset\",134000,\"--uid\",113830],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":767.6100000000376,\"pid\":923,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",84,\"--offset\",134400,\"--uid\",113831],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":767.2100000000376,\"pid\":924,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",84,\"--offset\",134800,\"--uid\",113833],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":766.8100000000375,\"pid\":925,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",84,\"--offset\",135200,\"--uid\",113832],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":766.4100000000374,\"pid\":926,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",84,\"--offset\",135600,\"--uid\",113834],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":766.0100000000373,\"pid\":927,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",85,\"--offset\",136000,\"--uid\",113835],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":765.6100000000372,\"pid\":928,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",85,\"--offset\",136400,\"--uid\",113837],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":765.2100000000371,\"pid\":929,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",85,\"--offset\",136800,\"--uid\",113836],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":764.810000000037,\"pid\":930,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",85,\"--offset\",137200,\"--uid\",113838],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":764.4100000000369,\"pid\":931,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",86,\"--offset\",137600,\"--uid\",113839],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":764.0100000000368,\"pid\":932,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",86,\"--offset\",138000,\"--uid\",113841],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":763.6100000000367,\"pid\":933,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",86,\"--offset\",138400,\"--uid\",113840],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":763.2100000000366,\"pid\":934,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",86,\"--offset\",138800,\"--uid\",113842],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":762.8100000000366,\"pid\":935,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",87,\"--offset\",139200,\"--uid\",113843],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":762.4100000000365,\"pid\":936,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",87,\"--offset\",139600,\"--uid\",113845],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":762.0100000000364,\"pid\":937,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",87,\"--offset\",140000,\"--uid\",113844],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":761.6100000000363,\"pid\":938,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",87,\"--offset\",140400,\"--uid\",113846],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":761.2100000000362,\"pid\":939,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",88,\"--offset\",140800,\"--uid\",113847],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":760.8100000000361,\"pid\":940,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",88,\"--offset\",141200,\"--uid\",113849],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":760.410000000036,\"pid\":941,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",88,\"--offset\",141600,\"--uid\",113848],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":760.0100000000359,\"pid\":942,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",88,\"--offset\",142000,\"--uid\",113850],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":759.6100000000358,\"pid\":943,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",89,\"--offset\",142400,\"--uid\",113851],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":759.2100000000357,\"pid\":944,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",89,\"--offset\",142800,\"--uid\",113853],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":758.8100000000356,\"pid\":945,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",89,\"--offset\",143200,\"--uid\",113852],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":758.4100000000356,\"pid\":946,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",89,\"--offset\",143600,\"--uid\",113854],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":758.0100000000355,\"pid\":947,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",90,\"--offset\",144000,\"--uid\",113855],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":757.6100000000354,\"pid\":948,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",90,\"--offset\",144400,\"--uid\",113857],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":757.2100000000353,\"pid\":949,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",90,\"--offset\",144800,\"--uid\",113856],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":756.8100000000352,\"pid\":950,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",90,\"--offset\",145200,\"--uid\",113858],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":756.4100000000351,\"pid\":951,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",91,\"--offset\",145600,\"--uid\",113859],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":756.010000000035,\"pid\":952,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",91,\"--offset\",146000,\"--uid\",113861],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":755.6100000000349,\"pid\":953,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",91,\"--offset\",146400,\"--uid\",113860],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":755.2100000000348,\"pid\":954,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",91,\"--offset\",146800,\"--uid\",113862],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":754.8100000000347,\"pid\":955,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",92,\"--offset\",147200,\"--uid\",113863],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":754.4100000000346,\"pid\":956,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",92,\"--offset\",147600,\"--uid\",113865],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":754.0100000000346,\"pid\":957,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",92,\"--offset\",148000,\"--uid\",113864],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":753.6100000000345,\"pid\":958,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",92,\"--offset\",148400,\"--uid\",113866],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":753.2100000000344,\"pid\":959,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",93,\"--offset\",148800,\"--uid\",113867],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":752.8100000000343,\"pid\":960,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",93,\"--offset\",149200,\"--uid\",113869],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":752.4100000000342,\"pid\":961,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",93,\"--offset\",149600,\"--uid\",113868],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":752.0100000000341,\"pid\":962,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",93,\"--offset\",150000,\"--uid\",113870],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":751.610000000034,\"pid\":963,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",94,\"--offset\",150400,\"--uid\",113871],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":751.2100000000339,\"pid\":964,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",94,\"--offset\",150800,\"--uid\",113873],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":750.8100000000338,\"pid\":965,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",94,\"--offset\",151200,\"--uid\",113872],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":750.4100000000337,\"pid\":966,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",94,\"--offset\",151600,\"--uid\",113874],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":750.0100000000336,\"pid\":967,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":6,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///8744e817-3a9a-4e83-9f38-cecb82254a7f\",\"moduleSequenceNumber\":1573941}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"moduleSequenceNumber\":1573941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///22ea7bcd-2a7c-4d07-a6af-5d34e5e272e4\",\"moduleSequenceNumber\":1573939}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":1573939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///9cf2a803-111b-4071-8238-06af7e7ab76e\",\"moduleSequenceNumber\":1573940}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":1573940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-6\",\"moduleSequenceNumber\":1572913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":true,\"ip\":\"0.1.3.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65512.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",94,\"--offset\",151600,\"--uid\",113875],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":750.0100000000336,\"pid\":968,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":92,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",95,\"--offset\",152000,\"--uid\",113876],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":749.6100000000336,\"pid\":969,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",95,\"--offset\",152400,\"--uid\",113878],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":749.2100000000335,\"pid\":970,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",95,\"--offset\",152800,\"--uid\",113877],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":748.8100000000334,\"pid\":971,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",95,\"--offset\",153200,\"--uid\",113879],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":748.4100000000333,\"pid\":972,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",96,\"--offset\",153600,\"--uid\",113880],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":748.0100000000332,\"pid\":973,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",96,\"--offset\",154000,\"--uid\",113882],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":974,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",96,\"--offset\",154400,\"--uid\",113881],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.210000000033,\"pid\":975,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",96,\"--offset\",154800,\"--uid\",113883],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":746.8100000000329,\"pid\":976,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",97,\"--offset\",155200,\"--uid\",113884],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":746.4100000000328,\"pid\":977,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",97,\"--offset\",155600,\"--uid\",113886],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":746.0100000000327,\"pid\":978,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",97,\"--offset\",156000,\"--uid\",113885],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":745.6100000000326,\"pid\":979,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",97,\"--offset\",156400,\"--uid\",113887],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":745.2100000000326,\"pid\":980,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",98,\"--offset\",156800,\"--uid\",113888],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":744.8100000000325,\"pid\":981,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",98,\"--offset\",157200,\"--uid\",113890],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":744.4100000000324,\"pid\":982,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",98,\"--offset\",157600,\"--uid\",113889],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":744.0100000000323,\"pid\":983,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",98,\"--offset\",158000,\"--uid\",113891],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":743.6100000000322,\"pid\":984,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",99,\"--offset\",158400,\"--uid\",113892],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":743.2100000000321,\"pid\":985,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",99,\"--offset\",158800,\"--uid\",113894],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":742.810000000032,\"pid\":986,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",99,\"--offset\",159200,\"--uid\",113893],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":742.4100000000319,\"pid\":987,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",99,\"--offset\",159600,\"--uid\",113895],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":742.0100000000318,\"pid\":988,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",100,\"--offset\",160000,\"--uid\",113896],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":741.6100000000317,\"pid\":989,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",100,\"--offset\",160400,\"--uid\",113898],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":741.2100000000316,\"pid\":990,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",100,\"--offset\",160800,\"--uid\",113897],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.8100000000316,\"pid\":991,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",100,\"--offset\",161200,\"--uid\",113899],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.4100000000315,\"pid\":992,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",101,\"--offset\",161600,\"--uid\",113900],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.0100000000314,\"pid\":993,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",101,\"--offset\",162000,\"--uid\",113902],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":739.6100000000313,\"pid\":994,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",101,\"--offset\",162400,\"--uid\",113901],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":739.2100000000312,\"pid\":995,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",101,\"--offset\",162800,\"--uid\",113903],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":738.8100000000311,\"pid\":996,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",102,\"--offset\",163200,\"--uid\",113904],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":738.410000000031,\"pid\":997,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",102,\"--offset\",163600,\"--uid\",113906],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":738.0100000000309,\"pid\":998,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",102,\"--offset\",164000,\"--uid\",113905],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":737.6100000000308,\"pid\":999,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",102,\"--offset\",164400,\"--uid\",113907],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":737.2100000000307,\"pid\":1000,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",103,\"--offset\",164800,\"--uid\",113908],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":736.8100000000306,\"pid\":1001,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",103,\"--offset\",165200,\"--uid\",113910],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":736.4100000000305,\"pid\":1002,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",103,\"--offset\",165600,\"--uid\",113909],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":736.0100000000305,\"pid\":1003,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",103,\"--offset\",166000,\"--uid\",113911],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":735.6100000000304,\"pid\":1004,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",104,\"--offset\",166400,\"--uid\",113912],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":735.2100000000303,\"pid\":1005,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",104,\"--offset\",166800,\"--uid\",113914],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":734.8100000000302,\"pid\":1006,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",104,\"--offset\",167200,\"--uid\",113913],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":734.4100000000301,\"pid\":1007,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",104,\"--offset\",167600,\"--uid\",113915],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":734.01000000003,\"pid\":1008,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",105,\"--offset\",168000,\"--uid\",113916],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":733.6100000000299,\"pid\":1009,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",105,\"--offset\",168400,\"--uid\",113918],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":733.2100000000298,\"pid\":1010,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",105,\"--offset\",168800,\"--uid\",113917],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":732.8100000000297,\"pid\":1011,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",105,\"--offset\",169200,\"--uid\",113919],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":732.4100000000296,\"pid\":1012,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",106,\"--offset\",169600,\"--uid\",113920],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":732.0100000000295,\"pid\":1013,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",106,\"--offset\",170000,\"--uid\",113922],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":731.6100000000295,\"pid\":1014,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",106,\"--offset\",170400,\"--uid\",113921],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":731.2100000000294,\"pid\":1015,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",106,\"--offset\",170800,\"--uid\",113923],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":730.8100000000293,\"pid\":1016,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",107,\"--offset\",171200,\"--uid\",113924],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":730.4100000000292,\"pid\":1017,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",107,\"--offset\",171600,\"--uid\",113926],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":730.0100000000291,\"pid\":1018,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",107,\"--offset\",172000,\"--uid\",113925],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":729.610000000029,\"pid\":1019,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",107,\"--offset\",172400,\"--uid\",113927],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":729.2100000000289,\"pid\":1020,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",108,\"--offset\",172800,\"--uid\",113928],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":728.8100000000288,\"pid\":1021,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",108,\"--offset\",173200,\"--uid\",113930],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":728.4100000000287,\"pid\":1022,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",108,\"--offset\",173600,\"--uid\",113929],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":728.0100000000286,\"pid\":1023,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",108,\"--offset\",174000,\"--uid\",113931],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":727.6100000000285,\"pid\":1024,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",109,\"--offset\",174400,\"--uid\",113932],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":727.2100000000285,\"pid\":1025,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",109,\"--offset\",174800,\"--uid\",113934],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":726.8100000000284,\"pid\":1026,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",109,\"--offset\",175200,\"--uid\",113933],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":726.4100000000283,\"pid\":1027,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",109,\"--offset\",175600,\"--uid\",113935],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":726.0100000000282,\"pid\":1028,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",110,\"--offset\",176000,\"--uid\",113936],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":725.6100000000281,\"pid\":1029,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",110,\"--offset\",176400,\"--uid\",113938],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":725.210000000028,\"pid\":1030,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",110,\"--offset\",176800,\"--uid\",113937],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":724.8100000000279,\"pid\":1031,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",110,\"--offset\",177200,\"--uid\",113939],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":724.4100000000278,\"pid\":1032,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",111,\"--offset\",177600,\"--uid\",113940],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":724.0100000000277,\"pid\":1033,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",111,\"--offset\",178000,\"--uid\",113942],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":723.6100000000276,\"pid\":1034,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",111,\"--offset\",178400,\"--uid\",113941],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":723.2100000000275,\"pid\":1035,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",111,\"--offset\",178800,\"--uid\",113943],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":722.8100000000275,\"pid\":1036,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",112,\"--offset\",179200,\"--uid\",113944],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":722.4100000000274,\"pid\":1037,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",112,\"--offset\",179600,\"--uid\",113946],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":722.0100000000273,\"pid\":1038,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",112,\"--offset\",180000,\"--uid\",113945],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.6100000000272,\"pid\":1039,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",112,\"--offset\",180400,\"--uid\",113947],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.2100000000271,\"pid\":1040,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",113,\"--offset\",180800,\"--uid\",113948],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":720.810000000027,\"pid\":1041,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",113,\"--offset\",181200,\"--uid\",113950],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":720.4100000000269,\"pid\":1042,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",113,\"--offset\",181600,\"--uid\",113949],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":720.0100000000268,\"pid\":1043,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",113,\"--offset\",182000,\"--uid\",113951],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":719.6100000000267,\"pid\":1044,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",114,\"--offset\",182400,\"--uid\",113952],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":719.2100000000266,\"pid\":1045,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",114,\"--offset\",182800,\"--uid\",113954],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":718.8100000000265,\"pid\":1046,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",114,\"--offset\",183200,\"--uid\",113953],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":718.4100000000265,\"pid\":1047,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",114,\"--offset\",183600,\"--uid\",113955],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":718.0100000000264,\"pid\":1048,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",115,\"--offset\",184000,\"--uid\",113956],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":717.6100000000263,\"pid\":1049,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",115,\"--offset\",184400,\"--uid\",113958],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":717.2100000000262,\"pid\":1050,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",115,\"--offset\",184800,\"--uid\",113957],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.8100000000261,\"pid\":1051,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",115,\"--offset\",185200,\"--uid\",113959],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.410000000026,\"pid\":1052,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",116,\"--offset\",185600,\"--uid\",113960],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.0100000000259,\"pid\":1053,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",116,\"--offset\",186000,\"--uid\",113962],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":715.6100000000258,\"pid\":1054,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",116,\"--offset\",186400,\"--uid\",113961],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":715.2100000000257,\"pid\":1055,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",116,\"--offset\",186800,\"--uid\",113963],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":714.8100000000256,\"pid\":1056,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",117,\"--offset\",187200,\"--uid\",113964],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":714.4100000000255,\"pid\":1057,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",117,\"--offset\",187600,\"--uid\",113966],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":714.0100000000255,\"pid\":1058,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",117,\"--offset\",188000,\"--uid\",113965],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":713.6100000000254,\"pid\":1059,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",117,\"--offset\",188400,\"--uid\",113967],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":713.2100000000253,\"pid\":1060,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",118,\"--offset\",188800,\"--uid\",113968],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":712.8100000000252,\"pid\":1061,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",118,\"--offset\",189200,\"--uid\",113970],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":712.4100000000251,\"pid\":1062,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",118,\"--offset\",189600,\"--uid\",113969],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":712.010000000025,\"pid\":1063,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",118,\"--offset\",190000,\"--uid\",113971],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.6100000000249,\"pid\":1064,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",119,\"--offset\",190400,\"--uid\",113972],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.2100000000248,\"pid\":1065,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",119,\"--offset\",190800,\"--uid\",113974],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1066,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",119,\"--offset\",191200,\"--uid\",113973],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.4100000000246,\"pid\":1067,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",119,\"--offset\",191600,\"--uid\",113975],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.0100000000245,\"pid\":1068,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",120,\"--offset\",192000,\"--uid\",113976],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":709.6100000000245,\"pid\":1069,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",120,\"--offset\",192400,\"--uid\",113978],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":709.2100000000244,\"pid\":1070,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",120,\"--offset\",192800,\"--uid\",113977],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":708.8100000000243,\"pid\":1071,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",120,\"--offset\",193200,\"--uid\",113979],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":708.4100000000242,\"pid\":1072,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",121,\"--offset\",193600,\"--uid\",113980],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":708.0100000000241,\"pid\":1073,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",121,\"--offset\",194000,\"--uid\",113982],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":707.610000000024,\"pid\":1074,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",121,\"--offset\",194400,\"--uid\",113981],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":707.2100000000239,\"pid\":1075,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",121,\"--offset\",194800,\"--uid\",113983],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":706.8100000000238,\"pid\":1076,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",122,\"--offset\",195200,\"--uid\",113984],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":706.4100000000237,\"pid\":1077,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",122,\"--offset\",195600,\"--uid\",113986],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":706.0100000000236,\"pid\":1078,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",122,\"--offset\",196000,\"--uid\",113985],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":705.6100000000235,\"pid\":1079,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",122,\"--offset\",196400,\"--uid\",113987],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":705.2100000000235,\"pid\":1080,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",123,\"--offset\",196800,\"--uid\",113988],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":704.8100000000234,\"pid\":1081,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",123,\"--offset\",197200,\"--uid\",113990],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":704.4100000000233,\"pid\":1082,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",123,\"--offset\",197600,\"--uid\",113989],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":704.0100000000232,\"pid\":1083,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",123,\"--offset\",198000,\"--uid\",113991],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":703.6100000000231,\"pid\":1084,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",124,\"--offset\",198400,\"--uid\",113992],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":703.210000000023,\"pid\":1085,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",124,\"--offset\",198800,\"--uid\",113994],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":702.8100000000229,\"pid\":1086,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",124,\"--offset\",199200,\"--uid\",113993],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":702.4100000000228,\"pid\":1087,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",124,\"--offset\",199600,\"--uid\",113995],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":702.0100000000227,\"pid\":1088,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",125,\"--offset\",200000,\"--uid\",113996],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":701.6100000000226,\"pid\":1089,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",125,\"--offset\",200400,\"--uid\",113998],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":701.2100000000225,\"pid\":1090,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",125,\"--offset\",200800,\"--uid\",113997],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":700.8100000000225,\"pid\":1091,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",125,\"--offset\",201200,\"--uid\",113999],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":700.4100000000224,\"pid\":1092,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",126,\"--offset\",201600,\"--uid\",114000],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":700.0100000000223,\"pid\":1093,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",126,\"--offset\",202000,\"--uid\",114002],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":699.6100000000222,\"pid\":1094,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",126,\"--offset\",202400,\"--uid\",114001],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":699.2100000000221,\"pid\":1095,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",126,\"--offset\",202800,\"--uid\",114003],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":698.810000000022,\"pid\":1096,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",127,\"--offset\",203600,\"--uid\",114006],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":698.0100000000218,\"pid\":1098,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",127,\"--offset\",204400,\"--uid\",114007],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":697.2100000000216,\"pid\":1100,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":37,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///f6b6b9d9-fd6e-438b-9888-ce7823ceae57\",\"moduleSequenceNumber\":1574385}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"moduleSequenceNumber\":1574385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///d8f42e0d-7feb-4bc5-ad97-777c7056ec9c\",\"moduleSequenceNumber\":1574386}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":1574386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65a68d71-60fb-470a-88f5-0f0db804c270\",\"moduleSequenceNumber\":1574384}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":1574384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-7\",\"moduleSequenceNumber\":1572921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":true,\"ip\":\"75.0.7.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65510.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",127,\"--offset\",203200,\"--uid\",114004],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":698.4100000000219,\"pid\":1097,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",127,\"--offset\",204000,\"--uid\",114005],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":697.6100000000217,\"pid\":1099,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",127,\"--offset\",204400,\"--uid\",114008],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":697.2100000000216,\"pid\":1101,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":61,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",128,\"--offset\",204800,\"--uid\",114009],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":696.8100000000215,\"pid\":1102,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",128,\"--offset\",205200,\"--uid\",114011],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":696.4100000000215,\"pid\":1103,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",128,\"--offset\",205600,\"--uid\",114010],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":696.0100000000214,\"pid\":1104,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",128,\"--offset\",206000,\"--uid\",114012],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":695.6100000000213,\"pid\":1105,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",129,\"--offset\",206400,\"--uid\",114013],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":695.2100000000212,\"pid\":1106,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",129,\"--offset\",206800,\"--uid\",114015],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":694.8100000000211,\"pid\":1107,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",129,\"--offset\",207200,\"--uid\",114014],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":694.410000000021,\"pid\":1108,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",129,\"--offset\",207600,\"--uid\",114016],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":694.0100000000209,\"pid\":1109,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",130,\"--offset\",208000,\"--uid\",114017],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":693.6100000000208,\"pid\":1110,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",130,\"--offset\",208400,\"--uid\",114019],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":693.2100000000207,\"pid\":1111,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",130,\"--offset\",208800,\"--uid\",114018],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":692.8100000000206,\"pid\":1112,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",130,\"--offset\",209200,\"--uid\",114020],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":692.4100000000205,\"pid\":1113,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",131,\"--offset\",209600,\"--uid\",114021],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":692.0100000000205,\"pid\":1114,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",131,\"--offset\",210000,\"--uid\",114023],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":691.6100000000204,\"pid\":1115,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",131,\"--offset\",210400,\"--uid\",114022],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":691.2100000000203,\"pid\":1116,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",131,\"--offset\",210800,\"--uid\",114024],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.8100000000202,\"pid\":1117,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",132,\"--offset\",211200,\"--uid\",114025],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.4100000000201,\"pid\":1118,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",132,\"--offset\",211600,\"--uid\",114027],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":690.01000000002,\"pid\":1119,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",132,\"--offset\",212000,\"--uid\",114026],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":689.6100000000199,\"pid\":1120,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",132,\"--offset\",212400,\"--uid\",114028],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":689.2100000000198,\"pid\":1121,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",133,\"--offset\",212800,\"--uid\",114029],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":688.8100000000197,\"pid\":1122,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",133,\"--offset\",213200,\"--uid\",114031],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":688.4100000000196,\"pid\":1123,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",133,\"--offset\",213600,\"--uid\",114030],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":688.0100000000195,\"pid\":1124,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",133,\"--offset\",214000,\"--uid\",114032],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":687.6100000000195,\"pid\":1125,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",134,\"--offset\",214400,\"--uid\",114033],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":687.2100000000194,\"pid\":1126,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",134,\"--offset\",214800,\"--uid\",114035],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":686.8100000000193,\"pid\":1127,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",134,\"--offset\",215200,\"--uid\",114034],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":686.4100000000192,\"pid\":1128,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",134,\"--offset\",215600,\"--uid\",114036],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":686.0100000000191,\"pid\":1129,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",135,\"--offset\",216000,\"--uid\",114037],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":685.610000000019,\"pid\":1130,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",135,\"--offset\",216400,\"--uid\",114039],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":685.2100000000189,\"pid\":1131,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",135,\"--offset\",216800,\"--uid\",114038],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":684.8100000000188,\"pid\":1132,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",135,\"--offset\",217200,\"--uid\",114040],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":684.4100000000187,\"pid\":1133,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",136,\"--offset\",217600,\"--uid\",114041],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":684.0100000000186,\"pid\":1134,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",136,\"--offset\",218000,\"--uid\",114043],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":683.6100000000185,\"pid\":1135,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",136,\"--offset\",218400,\"--uid\",114042],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":683.2100000000185,\"pid\":1136,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",136,\"--offset\",218800,\"--uid\",114044],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":682.8100000000184,\"pid\":1137,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",137,\"--offset\",219200,\"--uid\",114045],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":682.4100000000183,\"pid\":1138,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",137,\"--offset\",219600,\"--uid\",114047],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":682.0100000000182,\"pid\":1139,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",137,\"--offset\",220000,\"--uid\",114046],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":681.6100000000181,\"pid\":1140,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",137,\"--offset\",220400,\"--uid\",114048],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":681.210000000018,\"pid\":1141,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",138,\"--offset\",220800,\"--uid\",114049],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":680.8100000000179,\"pid\":1142,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",138,\"--offset\",221200,\"--uid\",114051],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":680.4100000000178,\"pid\":1143,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",138,\"--offset\",221600,\"--uid\",114050],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":680.0100000000177,\"pid\":1144,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",138,\"--offset\",222000,\"--uid\",114052],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":679.6100000000176,\"pid\":1145,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",139,\"--offset\",222400,\"--uid\",114053],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":679.2100000000175,\"pid\":1146,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",139,\"--offset\",222800,\"--uid\",114055],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":678.8100000000175,\"pid\":1147,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",139,\"--offset\",223200,\"--uid\",114054],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":678.4100000000174,\"pid\":1148,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",139,\"--offset\",223600,\"--uid\",114056],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":678.0100000000173,\"pid\":1149,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",140,\"--offset\",224000,\"--uid\",114057],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":677.6100000000172,\"pid\":1150,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",140,\"--offset\",224400,\"--uid\",114059],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":677.2100000000171,\"pid\":1151,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",140,\"--offset\",224800,\"--uid\",114058],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":676.810000000017,\"pid\":1152,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",140,\"--offset\",225200,\"--uid\",114060],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":676.4100000000169,\"pid\":1153,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",141,\"--offset\",225600,\"--uid\",114061],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":676.0100000000168,\"pid\":1154,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",141,\"--offset\",226000,\"--uid\",114063],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":675.6100000000167,\"pid\":1155,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",141,\"--offset\",226400,\"--uid\",114062],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":675.2100000000166,\"pid\":1156,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",141,\"--offset\",226800,\"--uid\",114064],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":674.8100000000165,\"pid\":1157,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",142,\"--offset\",227200,\"--uid\",114065],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":674.4100000000165,\"pid\":1158,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",142,\"--offset\",227600,\"--uid\",114067],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":674.0100000000164,\"pid\":1159,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",142,\"--offset\",228000,\"--uid\",114066],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":673.6100000000163,\"pid\":1160,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",142,\"--offset\",228400,\"--uid\",114068],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":673.2100000000162,\"pid\":1161,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",143,\"--offset\",228800,\"--uid\",114069],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":672.8100000000161,\"pid\":1162,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",143,\"--offset\",229200,\"--uid\",114071],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":672.410000000016,\"pid\":1163,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",143,\"--offset\",229600,\"--uid\",114070],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":672.0100000000159,\"pid\":1164,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",143,\"--offset\",230000,\"--uid\",114072],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":671.6100000000158,\"pid\":1165,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",144,\"--offset\",230400,\"--uid\",114073],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":671.2100000000157,\"pid\":1166,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",144,\"--offset\",230800,\"--uid\",114075],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":670.8100000000156,\"pid\":1167,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",144,\"--offset\",231200,\"--uid\",114074],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":670.4100000000155,\"pid\":1168,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",144,\"--offset\",231600,\"--uid\",114076],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":670.0100000000155,\"pid\":1169,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",145,\"--offset\",232000,\"--uid\",114077],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":669.6100000000154,\"pid\":1170,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",145,\"--offset\",232400,\"--uid\",114079],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":669.2100000000153,\"pid\":1171,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",145,\"--offset\",232800,\"--uid\",114078],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":668.8100000000152,\"pid\":1172,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",145,\"--offset\",233200,\"--uid\",114080],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":668.4100000000151,\"pid\":1173,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",146,\"--offset\",233600,\"--uid\",114081],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":668.010000000015,\"pid\":1174,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",146,\"--offset\",234000,\"--uid\",114083],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":667.6100000000149,\"pid\":1175,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",146,\"--offset\",234400,\"--uid\",114082],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":667.2100000000148,\"pid\":1176,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",146,\"--offset\",234800,\"--uid\",114084],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":666.8100000000147,\"pid\":1177,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",147,\"--offset\",235200,\"--uid\",114085],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":666.4100000000146,\"pid\":1178,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",147,\"--offset\",235600,\"--uid\",114087],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":666.0100000000145,\"pid\":1179,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",147,\"--offset\",236000,\"--uid\",114086],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":665.6100000000145,\"pid\":1180,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",147,\"--offset\",236400,\"--uid\",114088],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":665.2100000000144,\"pid\":1181,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",148,\"--offset\",236800,\"--uid\",114089],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":664.8100000000143,\"pid\":1182,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",148,\"--offset\",237200,\"--uid\",114091],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":664.4100000000142,\"pid\":1183,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",148,\"--offset\",237600,\"--uid\",114090],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":664.0100000000141,\"pid\":1184,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",148,\"--offset\",238000,\"--uid\",114092],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":663.610000000014,\"pid\":1185,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",149,\"--offset\",238400,\"--uid\",114093],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":663.2100000000139,\"pid\":1186,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",149,\"--offset\",238800,\"--uid\",114095],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":662.8100000000138,\"pid\":1187,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",149,\"--offset\",239200,\"--uid\",114094],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":662.4100000000137,\"pid\":1188,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",149,\"--offset\",239600,\"--uid\",114096],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":662.0100000000136,\"pid\":1189,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",150,\"--offset\",240000,\"--uid\",114097],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":661.6100000000135,\"pid\":1190,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",150,\"--offset\",240400,\"--uid\",114099],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":661.2100000000135,\"pid\":1191,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",150,\"--offset\",240800,\"--uid\",114098],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":660.8100000000134,\"pid\":1192,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",150,\"--offset\",241200,\"--uid\",114100],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":660.4100000000133,\"pid\":1193,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",151,\"--offset\",241600,\"--uid\",114101],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":660.0100000000132,\"pid\":1194,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",151,\"--offset\",242000,\"--uid\",114103],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":659.6100000000131,\"pid\":1195,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",151,\"--offset\",242400,\"--uid\",114102],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":659.210000000013,\"pid\":1196,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",151,\"--offset\",242800,\"--uid\",114104],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":658.8100000000129,\"pid\":1197,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",152,\"--offset\",243200,\"--uid\",114105],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":658.4100000000128,\"pid\":1198,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",152,\"--offset\",243600,\"--uid\",114107],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":658.0100000000127,\"pid\":1199,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",152,\"--offset\",244000,\"--uid\",114106],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":657.6100000000126,\"pid\":1200,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",152,\"--offset\",244400,\"--uid\",114108],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":657.2100000000125,\"pid\":1201,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",153,\"--offset\",244800,\"--uid\",114109],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":656.8100000000125,\"pid\":1202,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",153,\"--offset\",245200,\"--uid\",114111],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":656.4100000000124,\"pid\":1203,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",153,\"--offset\",245600,\"--uid\",114110],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":656.0100000000123,\"pid\":1204,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",153,\"--offset\",246000,\"--uid\",114112],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":655.6100000000122,\"pid\":1205,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",154,\"--offset\",246400,\"--uid\",114113],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":655.2100000000121,\"pid\":1206,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",154,\"--offset\",246800,\"--uid\",114115],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":654.810000000012,\"pid\":1207,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",154,\"--offset\",247200,\"--uid\",114114],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":654.4100000000119,\"pid\":1208,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",154,\"--offset\",247600,\"--uid\",114116],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":654.0100000000118,\"pid\":1209,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",155,\"--offset\",248000,\"--uid\",114117],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":653.6100000000117,\"pid\":1210,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",155,\"--offset\",248400,\"--uid\",114119],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":653.2100000000116,\"pid\":1211,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",155,\"--offset\",248800,\"--uid\",114118],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":652.8100000000115,\"pid\":1212,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",155,\"--offset\",249200,\"--uid\",114120],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":652.4100000000115,\"pid\":1213,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",156,\"--offset\",249600,\"--uid\",114121],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":652.0100000000114,\"pid\":1214,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",156,\"--offset\",250000,\"--uid\",114123],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":651.6100000000113,\"pid\":1215,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",156,\"--offset\",250400,\"--uid\",114122],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":651.2100000000112,\"pid\":1216,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",156,\"--offset\",250800,\"--uid\",114124],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":650.8100000000111,\"pid\":1217,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",157,\"--offset\",251200,\"--uid\",114125],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":650.410000000011,\"pid\":1218,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",157,\"--offset\",251600,\"--uid\",114127],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":650.0100000000109,\"pid\":1219,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",157,\"--offset\",252000,\"--uid\",114126],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":649.6100000000108,\"pid\":1220,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",157,\"--offset\",252400,\"--uid\",114128],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":649.2100000000107,\"pid\":1221,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",158,\"--offset\",252800,\"--uid\",114129],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":648.8100000000106,\"pid\":1222,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",158,\"--offset\",253200,\"--uid\",114131],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":648.4100000000105,\"pid\":1223,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",158,\"--offset\",253600,\"--uid\",114130],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":648.0100000000105,\"pid\":1224,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",158,\"--offset\",254000,\"--uid\",114132],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":647.6100000000104,\"pid\":1225,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",159,\"--offset\",254400,\"--uid\",114133],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":647.2100000000103,\"pid\":1226,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",159,\"--offset\",254800,\"--uid\",114135],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":646.8100000000102,\"pid\":1227,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",159,\"--offset\",255600,\"--uid\",114136],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":646.01000000001,\"pid\":1229,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",160,\"--offset\",256400,\"--uid\",114139],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.2100000000098,\"pid\":1231,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",160,\"--offset\",257200,\"--uid\",114140],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":644.4100000000096,\"pid\":1233,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":24,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c8f73515-816e-4cb2-b2c1-7faad2b41047\",\"moduleSequenceNumber\":1574829}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"moduleSequenceNumber\":1574829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///de1cb2b1-70ec-4f31-8893-f64e6e183d1a\",\"moduleSequenceNumber\":1574830}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":1574830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1d7ee8b2-5c78-4b12-9046-04d05df562d6\",\"moduleSequenceNumber\":1574831}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":1574831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8\",\"moduleSequenceNumber\":1572929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":true,\"ip\":\"72.7.1.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65525.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114182],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":528,\"ramUsage\":4,\"server\":\"pserv-9\",\"threads\":10336,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",159,\"--offset\",255200,\"--uid\",114134],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":646.4100000000101,\"pid\":1228,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",160,\"--offset\",256000,\"--uid\",114137],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.6100000000099,\"pid\":1230,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",160,\"--offset\",256800,\"--uid\",114138],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":644.8100000000097,\"pid\":1232,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",160,\"--offset\",257200,\"--uid\",114141],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":644.4100000000096,\"pid\":1234,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":74,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",161,\"--offset\",257600,\"--uid\",114142],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":644.0100000000095,\"pid\":1235,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",161,\"--offset\",258000,\"--uid\",114144],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":643.6100000000094,\"pid\":1236,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",161,\"--offset\",258400,\"--uid\",114143],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":643.2100000000094,\"pid\":1237,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",161,\"--offset\",258800,\"--uid\",114145],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":642.8100000000093,\"pid\":1238,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",162,\"--offset\",259200,\"--uid\",114146],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":642.4100000000092,\"pid\":1239,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",162,\"--offset\",259600,\"--uid\",114148],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":642.0100000000091,\"pid\":1240,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",162,\"--offset\",260000,\"--uid\",114147],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":641.610000000009,\"pid\":1241,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",162,\"--offset\",260400,\"--uid\",114149],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":641.2100000000089,\"pid\":1242,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",163,\"--offset\",260800,\"--uid\",114150],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":640.8100000000088,\"pid\":1243,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",163,\"--offset\",261200,\"--uid\",114152],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":640.4100000000087,\"pid\":1244,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",163,\"--offset\",261600,\"--uid\",114151],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":640.0100000000086,\"pid\":1245,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",163,\"--offset\",262000,\"--uid\",114153],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":639.6100000000085,\"pid\":1246,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",164,\"--offset\",262400,\"--uid\",114154],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":639.2100000000084,\"pid\":1247,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",164,\"--offset\",262800,\"--uid\",114156],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":638.8100000000084,\"pid\":1248,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",164,\"--offset\",263200,\"--uid\",114155],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":638.4100000000083,\"pid\":1249,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",164,\"--offset\",263600,\"--uid\",114157],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":638.0100000000082,\"pid\":1250,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",165,\"--offset\",264000,\"--uid\",114158],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":637.6100000000081,\"pid\":1251,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",165,\"--offset\",264400,\"--uid\",114160],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":637.210000000008,\"pid\":1252,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",165,\"--offset\",264800,\"--uid\",114159],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":636.8100000000079,\"pid\":1253,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",165,\"--offset\",265200,\"--uid\",114161],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":636.4100000000078,\"pid\":1254,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",166,\"--offset\",265600,\"--uid\",114162],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":636.0100000000077,\"pid\":1255,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",166,\"--offset\",266000,\"--uid\",114164],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":635.6100000000076,\"pid\":1256,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",166,\"--offset\",266400,\"--uid\",114163],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":635.2100000000075,\"pid\":1257,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",166,\"--offset\",266800,\"--uid\",114165],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":634.8100000000074,\"pid\":1258,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",167,\"--offset\",267200,\"--uid\",114166],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":634.4100000000074,\"pid\":1259,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",167,\"--offset\",267600,\"--uid\",114168],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":634.0100000000073,\"pid\":1260,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",167,\"--offset\",268000,\"--uid\",114167],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":633.6100000000072,\"pid\":1261,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",167,\"--offset\",268400,\"--uid\",114169],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":633.2100000000071,\"pid\":1262,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",168,\"--offset\",268800,\"--uid\",114170],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":632.810000000007,\"pid\":1263,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",168,\"--offset\",269200,\"--uid\",114172],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":632.4100000000069,\"pid\":1264,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",168,\"--offset\",269600,\"--uid\",114171],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":632.0100000000068,\"pid\":1265,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",168,\"--offset\",270000,\"--uid\",114173],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":631.6100000000067,\"pid\":1266,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",169,\"--offset\",270400,\"--uid\",114174],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":631.2100000000066,\"pid\":1267,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",169,\"--offset\",270800,\"--uid\",114176],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":630.8100000000065,\"pid\":1268,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",169,\"--offset\",271200,\"--uid\",114175],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":630.4100000000064,\"pid\":1269,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",169,\"--offset\",271600,\"--uid\",114177],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":630.0100000000064,\"pid\":1270,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",456.25293725106843,\"--hackLvlEffect\",5946,\"--batchID\",170,\"--offset\",272000,\"--uid\",114178],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":629.6100000000063,\"pid\":1271,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"threads\":44,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",170,\"--offset\",272400,\"--uid\",114180],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":629.2100000000062,\"pid\":1272,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1570.009399203419,\"--hackLvlEffect\",5946,\"--batchID\",170,\"--offset\",272800,\"--uid\",114179],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":628.8100000000061,\"pid\":1273,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":1022,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"megacorp\",\"--hackLvlTiming\",1975.0117490042737,\"--batchID\",170,\"--offset\",273200,\"--uid\",114181],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":628.410000000006,\"pid\":1274,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":98,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///ba63d985-a509-4ee4-870e-4fffc5dea7ce\",\"moduleSequenceNumber\":1575275}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"moduleSequenceNumber\":1575275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///80e925b0-74ed-49d8-8ff8-ce9a4dd492f5\",\"moduleSequenceNumber\":1575274}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":1575274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///41757c9a-b328-49a3-a4c9-baffe1187f7b\",\"moduleSequenceNumber\":1575276}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":1575276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///49840293-d0a9-47fb-8960-325ec0034bf9\",\"moduleSequenceNumber\":1573026}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-9\",\"moduleSequenceNumber\":1573026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":true,\"ip\":\"38.6.6.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114183],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":529,\"ramUsage\":4,\"server\":\"pserv-10\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"moduleSequenceNumber\":1572939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":1572941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":1572943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///340fe820-9874-4637-8c1b-329be3c7fe36\",\"moduleSequenceNumber\":1573027}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-10\",\"moduleSequenceNumber\":1573027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":true,\"ip\":\"96.3.9.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114184],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":530,\"ramUsage\":4,\"server\":\"pserv-11\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"moduleSequenceNumber\":1572947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":1572949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":1572951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///d9ba7150-2232-4fd4-b519-c636dc218b24\",\"moduleSequenceNumber\":1573028}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-11\",\"moduleSequenceNumber\":1573028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":true,\"ip\":\"83.4.3.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114185],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":531,\"ramUsage\":4,\"server\":\"pserv-12\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"moduleSequenceNumber\":1572955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":1572957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":1572959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///adff945a-3a28-455a-8925-58cdd2ed53de\",\"moduleSequenceNumber\":1573029}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-12\",\"moduleSequenceNumber\":1573029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":true,\"ip\":\"36.2.7.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114186],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":532,\"ramUsage\":4,\"server\":\"pserv-13\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"moduleSequenceNumber\":1572963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":1572965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":1572967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///b07b19e2-510d-4f3c-84aa-d2633c25587b\",\"moduleSequenceNumber\":1573030}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-13\",\"moduleSequenceNumber\":1573030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":true,\"ip\":\"92.4.1.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114187],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":533,\"ramUsage\":4,\"server\":\"pserv-14\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"moduleSequenceNumber\":1572971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":1572973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":1572975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///72929e1b-ae8e-44ec-b3ad-662586859974\",\"moduleSequenceNumber\":1573031}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-14\",\"moduleSequenceNumber\":1573031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":true,\"ip\":\"65.2.0.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114188],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":534,\"ramUsage\":4,\"server\":\"pserv-15\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"moduleSequenceNumber\":1572979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":1572981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":1572983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///762b3c88-1edc-4f55-8720-54766f387ece\",\"moduleSequenceNumber\":1573032}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-15\",\"moduleSequenceNumber\":1573032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":true,\"ip\":\"73.7.7.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114189],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":535,\"ramUsage\":4,\"server\":\"pserv-16\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"moduleSequenceNumber\":1572987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":1572989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":1572991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///6597ad97-5547-4650-a8d3-f4d36df04781\",\"moduleSequenceNumber\":1573033}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-16\",\"moduleSequenceNumber\":1573033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":true,\"ip\":\"35.4.0.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114190],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":536,\"ramUsage\":4,\"server\":\"pserv-17\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"moduleSequenceNumber\":1572995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":1572997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":1572999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///03214cdc-f8ae-4bd1-ab72-9e12cd7604e5\",\"moduleSequenceNumber\":1573034}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-17\",\"moduleSequenceNumber\":1573034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":true,\"ip\":\"60.3.2.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114191],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":537,\"ramUsage\":4,\"server\":\"pserv-18\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"moduleSequenceNumber\":1573003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":1573005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":1573007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///b9579e53-e942-4fbe-90f8-8148c5223a10\",\"moduleSequenceNumber\":1573035}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-18\",\"moduleSequenceNumber\":1573035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":true,\"ip\":\"96.3.5.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114192],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":538,\"ramUsage\":4,\"server\":\"pserv-19\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"moduleSequenceNumber\":1573011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":1573013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":1573015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///7ed52647-6f03-490d-a44f-1caefb9e073e\",\"moduleSequenceNumber\":1573036}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-19\",\"moduleSequenceNumber\":1573036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":true,\"ip\":\"46.6.5.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65536,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",114193],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":901.8100000000682,\"pid\":539,\"ramUsage\":4,\"server\":\"pserv-20\",\"threads\":16384,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"moduleSequenceNumber\":1573019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":1573021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":1573023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///af1eb18b-ffe1-4c62-a794-792d63d54533\",\"moduleSequenceNumber\":1573037}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-20\",\"moduleSequenceNumber\":1573037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":99.3712,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":390.9876,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":82.0286,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":52.1163,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0.0071,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":48.0098,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":74.1394,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":71.3508,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":46.2977,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":75.8067,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":85.1591,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":17.8726,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"test\":\"run test.js\",\"crawl\":\"run crawl.js\",\"hack\":\"run hack.js\",\"ll\":\"run ll.js\",\"ka\":\"run ka.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe\",\"trace\":\"run trace.js\",\"ss\":\"run services/server.js\",\"kss\":\"kill /services/server.js\",\"exp\":\"run exp.js\",\"soften\":\"run soften.js\",\"cct\":\"run cct.js\",\"bsa\":\"run buy_server_all.js\",\"share\":\"run share.js\",\"c\":\"run clock.js\",\"mcp\":\"run mcp.js\",\"join\":\"run join.js\",\"exp0\":\"run exp.js --reserve 0\",\"cb\":\"run crawl.js -bs\",\"crime\":\"run crime.js\",\"ascend\":\"run ascend.js\",\"controller\":\"run controller.js\",\"reset\":\"run reset.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"16","AllGangsSave":"","LastExportBonus":"1652110483056","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}