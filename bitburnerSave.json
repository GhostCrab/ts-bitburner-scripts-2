{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":4761,\"hp\":10,\"max_hp\":10,\"strength\":3,\"defense\":4,\"dexterity\":1,\"agility\":2,\"charisma\":45,\"intelligence\":383,\"hacking_chance_mult\":6.545955689645742,\"hacking_speed_mult\":5.88341959182913,\"hacking_money_mult\":31.533460315844806,\"hacking_grow_mult\":7.5189413887187895,\"hacking_exp\":4094954643.162105,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":551.7040772927762,\"intelligence_exp\":84034562.22103709,\"hacking_mult\":18.737977268503982,\"strength_mult\":8.113672692548274,\"defense_mult\":10.347872419481858,\"dexterity_mult\":3.6407505671690976,\"agility_mult\":4.748805087611866,\"charisma_mult\":4.2891931178752305,\"hacking_exp_mult\":24.027344576546827,\"strength_exp_mult\":3.814119641796197,\"defense_exp_mult\":3.814119641796197,\"dexterity_exp_mult\":3.814119641796197,\"agility_exp_mult\":3.814119641796197,\"charisma_exp_mult\":4.110476737963762,\"company_rep_mult\":24.687523288210357,\"faction_rep_mult\":4.110476737963762,\"money\":17856566057765.47,\"city\":\"Volhaven\",\"location\":\"Clarke Incorporated\",\"jobs\":{\"Bachman & Associates\":\"IT Intern\",\"Clarke Incorporated\":\"IT Intern\"},\"companyName\":\"Clarke Incorporated\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Daedalus\",\"ECorp\",\"Bachman & Associates\",\"Clarke Incorporated\",\"Fulcrum Secret Technologies\",\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"}],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":85},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":12,\"n\":12}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":3.2493887256630534,\"crime_success_mult\":3.2493887256630534,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":5.893644003018994,\"hacknet_node_money_mult\":3.015114341340867,\"hacknet_node_purchase_cost_mult\":0.3056566876468242,\"hacknet_node_ram_cost_mult\":0.3056566876468242,\"hacknet_node_core_cost_mult\":0.3056566876468242,\"hacknet_node_level_cost_mult\":0.3056566876468242,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":9,\"entropy\":0,\"lastUpdate\":1653671061691,\"lastSave\":1653671061381,\"totalPlaytime\":3346582600,\"playtimeSinceLastAug\":21139200,\"playtimeSinceLastBitnode\":1443370800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1875000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":69844641815917,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":17856565057765.47,\"work\":2056701.4115470827,\"servers\":-49980475914852.77,\"other\":-2000282400000,\"augmentations\":-9195500000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-31680,\"codingcontract\":72787500000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":160398160737369.84,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":37777410407967.234,\"work\":80936775.27221411,\"servers\":-76769249294649.4,\"other\":-14468809364639.664,\"augmentations\":-31455560075203.63}},\"scriptProdSinceLastAug\":69844641815917,\"exploits\":[\"Bypass\",\"PrototypeTampering\",\"Unclickable\",\"UndocumentedFunctionCall\",\"TimeCompression\",\"RealityAlteration\",\"N00dles\",\"YoureNotMeantToAccessThis\",\"TrueRecursion\",\"INeedARainbow\",\"EditSaveFile\"],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1650324486138},{\"ID\":\"NS2\",\"unlockedOn\":1650324546145},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1650324546160},{\"ID\":\"TOR\",\"unlockedOn\":1650391063083},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1650391183084},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1650391483076},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1650391903083},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1650392023089},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1650393523078},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1650393523090},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1650401983076},{\"ID\":\"NITESEC\",\"unlockedOn\":1650404563078},{\"ID\":\"TRAVEL\",\"unlockedOn\":1650404623079},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1650411943077},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1650491553987},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1650497974019},{\"ID\":\"DONATION\",\"unlockedOn\":1650557917705},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1650558457734},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1650570937733},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1650579229114},{\"ID\":\"SF1.1\",\"unlockedOn\":1650583669108},{\"ID\":\"FAST_BN\",\"unlockedOn\":1650689077088},{\"ID\":\"SF5.1\",\"unlockedOn\":1650689096885},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1650918820305},{\"ID\":\"WORKOUT\",\"unlockedOn\":1650924940304},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1650926358224},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1650929298223},{\"ID\":\"INTELLIGENCE_255\",\"unlockedOn\":1650931195995},{\"ID\":\"SF4.1\",\"unlockedOn\":1650990161290},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1651401489555},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1651403049557},{\"ID\":\"SF12.1\",\"unlockedOn\":1651717107037},{\"ID\":\"BYPASS\",\"unlockedOn\":1651863672680},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1651863672689},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1651863672691},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1651863672692},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1651863672694},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1651863672696},{\"ID\":\"N00DLES\",\"unlockedOn\":1651863672697},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1651863672699},{\"ID\":\"DEVMENU\",\"unlockedOn\":1651863672701},{\"ID\":\"RAINBOW\",\"unlockedOn\":1651863672704},{\"ID\":\"TRUE_RECURSION\",\"unlockedOn\":1651863672706}],\"terminalCommandHistory\":[\"hack\",\"run buy_augs.js\",\"run buy_augs.js -a\",\"run buy_augs.js -an\",\"run buy_augs.js -a\",\"run backdoor.js ecorp\",\"CCT\",\"cct\",\"ka\",\"ps\",\"share\",\"ps\",\"ka\",\"alias\",\"share --\",\"ka\",\"nano share.js\",\"share --reserve 0\",\"ps\",\"run buy_augs.js -g\",\"ka\",\"run buy_augs.js -g\",\"reset\",\"hack --limit 2\",\"ka\",\"exp0\",\"ka\",\"hack\",\"ka\",\"run buy_augs.js\",\"run buy_augs.js -g\",\"reset\",\"nano ascend.js\",\"cb\",\"run buy_augs.js\",\"run buy_augs.js -a\",\"ka\",\"hack\",\"ka\",\"exp0\",\"cb\",\"run backdoor.js b-and-a\",\"run backdoor.js clarkinc\",\"ka\",\"hack\",\"join -c\",\"join\",\"run buy_augs.js -a\",\"run buy_augs.js\",\"run buy_augs.js -g\"],\"identifier\":\"172bb4264c21a4\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"54.3.1.6\",\"isConnectedTo\":true,\"maxRam\":262144,\"messages\":[\"hackers-starting-handbook.lit\",\"truthgazer.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":166473.09999999983,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"clock.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21138.81000004184,\"pid\":2,\"ramUsage\":3.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///a75c717d-5f11-43bb-892e-e832d204355d\",\"moduleSequenceNumber\":57781},{\"filename\":\"clock.js\",\"url\":\"blob:file:///b539aa10-39cb-43a1-9ae6-908b6822a7e5\",\"moduleSequenceNumber\":57816}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138537999.85285622,\"onlineMoneyMade\":12960551566850,\"onlineRunningTime\":2797.409999999647,\"pid\":23779,\"ramUsage\":9.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fed926b3-3bcb-4b50-bfc8-21cdc87fc866\",\"moduleSequenceNumber\":250212},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///fddb8708-bdbe-445f-b099-3c65e9966e2c\",\"moduleSequenceNumber\":250213},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fd18396f-3c5c-4170-97c3-2504c91c79f4\",\"moduleSequenceNumber\":250212},{\"filename\":\"hack.js\",\"url\":\"blob:file:///ca89af5f-3e44-4dfa-82a3-db04de1950b7\",\"moduleSequenceNumber\":250251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--offset\",0,\"--uid\",6197220],\"dataMap\":{},\"filename\":\"/lib/exec/const_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.00999999999826,\"pid\":27478,\"ramUsage\":4,\"server\":\"home\",\"threads\":3902,\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///7965eabd-eb2b-4b73-84d0-8b3004d18e59\",\"moduleSequenceNumber\":250250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",31,\"--offset\",50400,\"--uid\",6197023],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.61000000000112,\"pid\":27643,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",32,\"--offset\",51200,\"--uid\",6197026],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.81000000000117,\"pid\":27645,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",32,\"--offset\",51751.13648347129,\"--uid\",6197024],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.2100000000012,\"pid\":27646,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",32,\"--offset\",52000,\"--uid\",6197027],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"pid\":27647,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",32,\"--offset\",52551.13648347129,\"--uid\",6197025],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.41000000000125,\"pid\":27648,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",33,\"--offset\",52800,\"--uid\",6197030],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.21000000000126,\"pid\":27649,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",33,\"--offset\",53351.13648347129,\"--uid\",6197028],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.61000000000128,\"pid\":27650,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",33,\"--offset\",53600,\"--uid\",6197031],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.41000000000128,\"pid\":27651,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",33,\"--offset\",54151.13648347129,\"--uid\",6197029],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.81000000000127,\"pid\":27652,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",34,\"--offset\",54400,\"--uid\",6197034],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.61000000000126,\"pid\":27653,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",34,\"--offset\",54951.13648347129,\"--uid\",6197032],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.01000000000126,\"pid\":27654,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",34,\"--offset\",55200,\"--uid\",6197035],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.81000000000125,\"pid\":27655,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",34,\"--offset\",55751.13648347129,\"--uid\",6197033],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000124,\"pid\":27656,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",35,\"--offset\",56000,\"--uid\",6197038],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.01000000000124,\"pid\":27657,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",35,\"--offset\",56551.13648347129,\"--uid\",6197036],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":124.41000000000123,\"pid\":27658,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",35,\"--offset\",56800,\"--uid\",6197039],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":124.21000000000123,\"pid\":27659,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",35,\"--offset\",57351.13648347129,\"--uid\",6197037],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":123.61000000000122,\"pid\":27660,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",36,\"--offset\",57600,\"--uid\",6197042],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":123.41000000000122,\"pid\":27661,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",36,\"--offset\",58151.13648347129,\"--uid\",6197040],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000121,\"pid\":27662,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",36,\"--offset\",58400,\"--uid\",6197043],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.61000000000121,\"pid\":27663,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",36,\"--offset\",58951.13648347129,\"--uid\",6197041],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.0100000000012,\"pid\":27664,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",37,\"--offset\",59200,\"--uid\",6197046],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.8100000000012,\"pid\":27665,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",37,\"--offset\",59751.13648347129,\"--uid\",6197044],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.21000000000119,\"pid\":27666,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",37,\"--offset\",60000,\"--uid\",6197047],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.01000000000118,\"pid\":27667,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",37,\"--offset\",60551.13648347129,\"--uid\",6197045],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":120.41000000000118,\"pid\":27668,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",38,\"--offset\",60800,\"--uid\",6197050],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":120.21000000000117,\"pid\":27669,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",38,\"--offset\",61351.13648347129,\"--uid\",6197048],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":119.61000000000116,\"pid\":27670,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",38,\"--offset\",61600,\"--uid\",6197051],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":119.41000000000116,\"pid\":27671,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",38,\"--offset\",62151.13648347129,\"--uid\",6197049],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.81000000000115,\"pid\":27672,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",39,\"--offset\",62400,\"--uid\",6197054],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"pid\":27673,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",39,\"--offset\",62951.13648347129,\"--uid\",6197052],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.01000000000114,\"pid\":27674,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",39,\"--offset\",63200,\"--uid\",6197055],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.81000000000114,\"pid\":27675,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",39,\"--offset\",63751.13648347129,\"--uid\",6197053],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.21000000000113,\"pid\":27676,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",40,\"--offset\",64000,\"--uid\",6197058],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.01000000000113,\"pid\":27677,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",40,\"--offset\",64551.13648347129,\"--uid\",6197056],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":116.41000000000112,\"pid\":27678,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",40,\"--offset\",64800,\"--uid\",6197059],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":116.21000000000112,\"pid\":27679,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",40,\"--offset\",65351.13648347129,\"--uid\",6197057],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":115.61000000000111,\"pid\":27680,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",41,\"--offset\",65600,\"--uid\",6197062],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":115.4100000000011,\"pid\":27681,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",41,\"--offset\",66151.13648347129,\"--uid\",6197060],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.8100000000011,\"pid\":27682,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",41,\"--offset\",66400,\"--uid\",6197063],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.6100000000011,\"pid\":27683,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",41,\"--offset\",66951.13648347129,\"--uid\",6197061],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.01000000000109,\"pid\":27684,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",42,\"--offset\",67200,\"--uid\",6197066],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.81000000000108,\"pid\":27685,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",42,\"--offset\",67751.13648347129,\"--uid\",6197064],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.21000000000107,\"pid\":27686,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",42,\"--offset\",68000,\"--uid\",6197067],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.01000000000107,\"pid\":27687,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",42,\"--offset\",68551.13648347129,\"--uid\",6197065],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.41000000000106,\"pid\":27688,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",43,\"--offset\",68800,\"--uid\",6197070],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.21000000000106,\"pid\":27689,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",43,\"--offset\",69351.13648347129,\"--uid\",6197068],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":111.61000000000105,\"pid\":27690,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",43,\"--offset\",69600,\"--uid\",6197071],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":111.41000000000105,\"pid\":27691,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",43,\"--offset\",70151.13648347129,\"--uid\",6197069],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":27692,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",44,\"--offset\",70400,\"--uid\",6197074],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":27693,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",44,\"--offset\",70951.13648347129,\"--uid\",6197072],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":27694,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",44,\"--offset\",71200,\"--uid\",6197075],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.81000000000103,\"pid\":27695,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",44,\"--offset\",71751.13648347129,\"--uid\",6197073],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.21000000000102,\"pid\":27696,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",45,\"--offset\",72000,\"--uid\",6197078],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.01000000000101,\"pid\":27697,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",45,\"--offset\",72551.13648347129,\"--uid\",6197076],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.410000000001,\"pid\":27698,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",45,\"--offset\",72800,\"--uid\",6197079],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.210000000001,\"pid\":27699,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",45,\"--offset\",73351.13648347129,\"--uid\",6197077],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.610000000001,\"pid\":27700,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",46,\"--offset\",73600,\"--uid\",6197082],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.41000000000099,\"pid\":27701,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",46,\"--offset\",74151.13648347129,\"--uid\",6197080],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.81000000000098,\"pid\":27702,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",46,\"--offset\",74400,\"--uid\",6197083],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.61000000000098,\"pid\":27703,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",46,\"--offset\",74951.13648347129,\"--uid\",6197081],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.01000000000097,\"pid\":27704,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",47,\"--offset\",75200,\"--uid\",6197086],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.81000000000097,\"pid\":27705,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",47,\"--offset\",75751.13648347129,\"--uid\",6197084],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.21000000000096,\"pid\":27706,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",47,\"--offset\",76000,\"--uid\",6197087],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.01000000000096,\"pid\":27707,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",47,\"--offset\",76551.13648347129,\"--uid\",6197085],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.41000000000095,\"pid\":27708,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",48,\"--offset\",76800,\"--uid\",6197090],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.21000000000095,\"pid\":27709,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",48,\"--offset\",77351.13648347129,\"--uid\",6197088],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":103.61000000000094,\"pid\":27710,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",48,\"--offset\",77600,\"--uid\",6197091],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":103.41000000000093,\"pid\":27711,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",48,\"--offset\",78151.13648347129,\"--uid\",6197089],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":102.81000000000093,\"pid\":27712,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",49,\"--offset\",78400,\"--uid\",6197094],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":102.61000000000092,\"pid\":27713,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",49,\"--offset\",78951.13648347129,\"--uid\",6197092],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":102.01000000000091,\"pid\":27714,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",49,\"--offset\",79200,\"--uid\",6197095],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":101.81000000000091,\"pid\":27715,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",49,\"--offset\",79751.13648347129,\"--uid\",6197093],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":101.2100000000009,\"pid\":27716,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",50,\"--offset\",80000,\"--uid\",6197098],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":101.0100000000009,\"pid\":27717,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",50,\"--offset\",80551.13648347129,\"--uid\",6197096],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":100.41000000000089,\"pid\":27718,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",50,\"--offset\",80800,\"--uid\",6197099],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":100.21000000000089,\"pid\":27719,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",50,\"--offset\",81351.13648347129,\"--uid\",6197097],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.61000000000088,\"pid\":27720,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",51,\"--offset\",81600,\"--uid\",6197102],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.41000000000088,\"pid\":27721,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",51,\"--offset\",82151.13648347129,\"--uid\",6197100],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.81000000000087,\"pid\":27722,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",51,\"--offset\",82400,\"--uid\",6197103],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.61000000000087,\"pid\":27723,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",51,\"--offset\",82951.13648347129,\"--uid\",6197101],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.01000000000086,\"pid\":27724,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",52,\"--offset\",83200,\"--uid\",6197106],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.81000000000085,\"pid\":27725,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",52,\"--offset\",83751.13648347129,\"--uid\",6197104],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.21000000000085,\"pid\":27726,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",52,\"--offset\",84000,\"--uid\",6197107],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"pid\":27727,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",52,\"--offset\",84551.13648347129,\"--uid\",6197105],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.41000000000084,\"pid\":27728,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",53,\"--offset\",84800,\"--uid\",6197110],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.21000000000083,\"pid\":27729,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",53,\"--offset\",85351.13648347129,\"--uid\",6197108],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000082,\"pid\":27730,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",53,\"--offset\",85600,\"--uid\",6197111],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.41000000000082,\"pid\":27731,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",53,\"--offset\",86151.13648347129,\"--uid\",6197109],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.81000000000081,\"pid\":27732,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",54,\"--offset\",86400,\"--uid\",6197114],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.61000000000081,\"pid\":27733,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",54,\"--offset\",86951.13648347129,\"--uid\",6197112],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.0100000000008,\"pid\":27734,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",54,\"--offset\",87200,\"--uid\",6197115],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.8100000000008,\"pid\":27735,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",54,\"--offset\",87751.13648347129,\"--uid\",6197113],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.21000000000079,\"pid\":27736,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",55,\"--offset\",88000,\"--uid\",6197118],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.01000000000079,\"pid\":27737,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",55,\"--offset\",88551.13648347129,\"--uid\",6197116],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.41000000000078,\"pid\":27738,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",55,\"--offset\",88800,\"--uid\",6197119],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.21000000000078,\"pid\":27739,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",55,\"--offset\",89351.13648347129,\"--uid\",6197117],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.61000000000077,\"pid\":27740,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",56,\"--offset\",89600,\"--uid\",6197122],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.41000000000076,\"pid\":27741,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",56,\"--offset\",90151.13648347129,\"--uid\",6197120],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000076,\"pid\":27742,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",56,\"--offset\",90400,\"--uid\",6197123],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.61000000000075,\"pid\":27743,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",56,\"--offset\",90951.13648347129,\"--uid\",6197121],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.01000000000074,\"pid\":27744,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",57,\"--offset\",91200,\"--uid\",6197126],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.81000000000074,\"pid\":27745,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",57,\"--offset\",91751.13648347129,\"--uid\",6197124],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.21000000000073,\"pid\":27746,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",57,\"--offset\",92000,\"--uid\",6197127],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.01000000000073,\"pid\":27747,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",57,\"--offset\",92551.13648347129,\"--uid\",6197125],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.41000000000072,\"pid\":27748,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",58,\"--offset\",92800,\"--uid\",6197130],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.21000000000072,\"pid\":27749,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",58,\"--offset\",93351.13648347129,\"--uid\",6197128],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.61000000000071,\"pid\":27750,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",58,\"--offset\",93600,\"--uid\",6197131],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.41000000000071,\"pid\":27751,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",58,\"--offset\",94151.13648347129,\"--uid\",6197129],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.8100000000007,\"pid\":27752,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",59,\"--offset\",94400,\"--uid\",6197134],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.6100000000007,\"pid\":27753,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",59,\"--offset\",94951.13648347129,\"--uid\",6197132],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.01000000000069,\"pid\":27754,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",59,\"--offset\",95200,\"--uid\",6197135],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.81000000000068,\"pid\":27755,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",59,\"--offset\",95751.13648347129,\"--uid\",6197133],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.21000000000068,\"pid\":27756,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",60,\"--offset\",96000,\"--uid\",6197138],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.01000000000067,\"pid\":27757,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",60,\"--offset\",96551.13648347129,\"--uid\",6197136],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.41000000000066,\"pid\":27758,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",60,\"--offset\",96800,\"--uid\",6197139],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.21000000000066,\"pid\":27759,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",60,\"--offset\",97351.13648347129,\"--uid\",6197137],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.61000000000065,\"pid\":27760,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",61,\"--offset\",97600,\"--uid\",6197142],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.41000000000065,\"pid\":27761,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",61,\"--offset\",98151.13648347129,\"--uid\",6197140],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.81000000000064,\"pid\":27762,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",61,\"--offset\",98400,\"--uid\",6197143],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.61000000000064,\"pid\":27763,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",61,\"--offset\",98951.13648347129,\"--uid\",6197141],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.01000000000063,\"pid\":27764,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",62,\"--offset\",99200,\"--uid\",6197146],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.81000000000063,\"pid\":27765,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",62,\"--offset\",99751.13648347129,\"--uid\",6197144],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.21000000000062,\"pid\":27766,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",62,\"--offset\",100000,\"--uid\",6197147],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.01000000000062,\"pid\":27767,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",62,\"--offset\",100551.13648347129,\"--uid\",6197145],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.41000000000061,\"pid\":27768,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",63,\"--offset\",100800,\"--uid\",6197150],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.2100000000006,\"pid\":27769,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",63,\"--offset\",101351.13648347129,\"--uid\",6197148],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.6100000000006,\"pid\":27770,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",63,\"--offset\",101600,\"--uid\",6197151],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.4100000000006,\"pid\":27771,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",63,\"--offset\",102151.13648347129,\"--uid\",6197149],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.81000000000058,\"pid\":27772,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",64,\"--offset\",102400,\"--uid\",6197154],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.61000000000058,\"pid\":27773,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",64,\"--offset\",102951.13648347129,\"--uid\",6197152],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000057,\"pid\":27774,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",64,\"--offset\",103200,\"--uid\",6197155],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000057,\"pid\":27775,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",64,\"--offset\",103751.13648347129,\"--uid\",6197153],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.21000000000056,\"pid\":27776,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",65,\"--offset\",104000,\"--uid\",6197158],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.01000000000056,\"pid\":27777,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",65,\"--offset\",104551.13648347129,\"--uid\",6197156],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.41000000000055,\"pid\":27778,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",65,\"--offset\",104800,\"--uid\",6197159],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.21000000000055,\"pid\":27779,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",65,\"--offset\",105351.13648347129,\"--uid\",6197157],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.61000000000054,\"pid\":27780,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",66,\"--offset\",105600,\"--uid\",6197162],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.41000000000054,\"pid\":27781,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",66,\"--offset\",106151.13648347129,\"--uid\",6197160],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.81000000000053,\"pid\":27782,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",66,\"--offset\",106400,\"--uid\",6197163],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"pid\":27783,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",66,\"--offset\",106951.13648347129,\"--uid\",6197161],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.01000000000052,\"pid\":27784,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",67,\"--offset\",107200,\"--uid\",6197166],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.81000000000051,\"pid\":27785,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",67,\"--offset\",107751.13648347129,\"--uid\",6197164],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.2100000000005,\"pid\":27786,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",67,\"--offset\",108000,\"--uid\",6197167],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.0100000000005,\"pid\":27787,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",67,\"--offset\",108551.13648347129,\"--uid\",6197165],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.4100000000005,\"pid\":27788,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",68,\"--offset\",108800,\"--uid\",6197170],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000049,\"pid\":27789,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",68,\"--offset\",109351.13648347129,\"--uid\",6197168],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.61000000000048,\"pid\":27790,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",68,\"--offset\",109600,\"--uid\",6197171],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.41000000000048,\"pid\":27791,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",68,\"--offset\",110151.13648347129,\"--uid\",6197169],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.81000000000047,\"pid\":27792,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",69,\"--offset\",110400,\"--uid\",6197174],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.61000000000047,\"pid\":27793,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",69,\"--offset\",110951.13648347129,\"--uid\",6197172],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.01000000000046,\"pid\":27794,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",69,\"--offset\",111200,\"--uid\",6197175],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.81000000000046,\"pid\":27795,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",69,\"--offset\",111751.13648347129,\"--uid\",6197173],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000045,\"pid\":27796,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",70,\"--offset\",112000,\"--uid\",6197178],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.01000000000045,\"pid\":27797,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",70,\"--offset\",112551.13648347129,\"--uid\",6197176],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000044,\"pid\":27798,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",70,\"--offset\",112800,\"--uid\",6197179],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.21000000000043,\"pid\":27799,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",70,\"--offset\",113351.13648347129,\"--uid\",6197177],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.61000000000043,\"pid\":27800,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",71,\"--offset\",113600,\"--uid\",6197182],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.41000000000042,\"pid\":27801,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",71,\"--offset\",114151.13648347129,\"--uid\",6197180],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":27802,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",71,\"--offset\",114400,\"--uid\",6197183],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.61000000000041,\"pid\":27803,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",71,\"--offset\",114951.13648347129,\"--uid\",6197181],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.0100000000004,\"pid\":27804,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",72,\"--offset\",115200,\"--uid\",6197186],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.8100000000004,\"pid\":27805,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",72,\"--offset\",115751.13648347129,\"--uid\",6197184],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.21000000000039,\"pid\":27806,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",72,\"--offset\",116000,\"--uid\",6197187],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.01000000000039,\"pid\":27807,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",72,\"--offset\",116551.13648347129,\"--uid\",6197185],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.41000000000038,\"pid\":27808,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",73,\"--offset\",116800,\"--uid\",6197190],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.21000000000038,\"pid\":27809,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",73,\"--offset\",117351.13648347129,\"--uid\",6197188],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.61000000000037,\"pid\":27810,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",73,\"--offset\",117600,\"--uid\",6197191],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.410000000000366,\"pid\":27811,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",73,\"--offset\",118151.13648347129,\"--uid\",6197189],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.81000000000036,\"pid\":27812,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",74,\"--offset\",118400,\"--uid\",6197194],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.610000000000355,\"pid\":27813,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",74,\"--offset\",118951.13648347129,\"--uid\",6197192],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.010000000000346,\"pid\":27814,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",74,\"--offset\",119200,\"--uid\",6197195],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.81000000000034,\"pid\":27815,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",74,\"--offset\",119751.13648347129,\"--uid\",6197193],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.210000000000335,\"pid\":27816,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",75,\"--offset\",120000,\"--uid\",6197198],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.01000000000033,\"pid\":27817,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",75,\"--offset\",120551.13648347129,\"--uid\",6197196],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":27818,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",75,\"--offset\",120800,\"--uid\",6197199],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.21000000000032,\"pid\":27819,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",75,\"--offset\",121351.13648347129,\"--uid\",6197197],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.61000000000031,\"pid\":27820,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",76,\"--offset\",121600,\"--uid\",6197202],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.41000000000031,\"pid\":27821,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",76,\"--offset\",122151.13648347129,\"--uid\",6197200],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.8100000000003,\"pid\":27822,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",76,\"--offset\",122400,\"--uid\",6197203],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.6100000000003,\"pid\":27823,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",76,\"--offset\",122951.13648347129,\"--uid\",6197201],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000029,\"pid\":27824,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",77,\"--offset\",123200,\"--uid\",6197206],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000029,\"pid\":27825,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",77,\"--offset\",123751.13648347129,\"--uid\",6197204],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000028,\"pid\":27826,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",77,\"--offset\",124000,\"--uid\",6197207],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.010000000000275,\"pid\":27827,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",77,\"--offset\",124551.13648347129,\"--uid\",6197205],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000027,\"pid\":27828,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",78,\"--offset\",124800,\"--uid\",6197210],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.210000000000264,\"pid\":27829,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",78,\"--offset\",125351.13648347129,\"--uid\",6197208],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.610000000000255,\"pid\":27830,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",78,\"--offset\",125600,\"--uid\",6197211],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.41000000000025,\"pid\":27831,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",78,\"--offset\",126151.13648347129,\"--uid\",6197209],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.810000000000244,\"pid\":27832,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",79,\"--offset\",126400,\"--uid\",6197214],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.61000000000024,\"pid\":27833,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",79,\"--offset\",126951.13648347129,\"--uid\",6197212],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.01000000000023,\"pid\":27834,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",79,\"--offset\",127200,\"--uid\",6197215],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.81000000000023,\"pid\":27835,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",79,\"--offset\",127751.13648347129,\"--uid\",6197213],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.21000000000022,\"pid\":27836,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",80,\"--offset\",128000,\"--uid\",6197218],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.01000000000022,\"pid\":27837,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",1161.57700158561,\"--hackLvlEffect\",4761,\"--batchID\",80,\"--offset\",128551.13648347129,\"--uid\",6197216],\"dataMap\":{},\"filename\":\"/lib/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.41000000000021,\"pid\":27838,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":547,\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",4761,\"--batchID\",80,\"--offset\",128800,\"--uid\",6197219],\"dataMap\":{},\"filename\":\"/lib/exec/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000021,\"pid\":27839,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"ecorp\",\"--hackLvlTiming\",3827.0464050739524,\"--hackLvlEffect\",4761,\"--batchID\",80,\"--offset\",129351.13648347129,\"--uid\",6197217],\"dataMap\":{},\"filename\":\"/lib/exec/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.6100000000002,\"pid\":27840,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1114,\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///7965eabd-eb2b-4b73-84d0-8b3004d18e59\",\"moduleSequenceNumber\":250250}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":250250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Slow hack using minimal footprint\\r\\nimport { allHosts, HACKJS, GROWJS, WEAKENJS } from \\\"/lib/util\\\";\\r\\nasync function doWeaken(ns, targetHostname, ownedHostnames) {\\r\\n    // check to see if we need to weaken the server\\r\\n    const targetSecurityLevel = Math.max(ns.getServerMinSecurityLevel(targetHostname) * 1.15, ns.getServerMinSecurityLevel(targetHostname) + 3);\\r\\n    if (ns.getServerSecurityLevel(targetHostname) > targetSecurityLevel) {\\r\\n        while (ns.getServerSecurityLevel(targetHostname) > ns.getServerMinSecurityLevel(targetHostname)) {\\r\\n            ns.tprintf(\\\"Weaken %s: %f > %f\\\", targetHostname, ns.getServerSecurityLevel(targetHostname), targetSecurityLevel);\\r\\n            let waitPID = 0;\\r\\n            for (const hostname of ownedHostnames) {\\r\\n                const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n                const threads = Math.floor(availableRam / ns.getScriptRam(WEAKENJS));\\r\\n                if (threads <= 0)\\r\\n                    continue;\\r\\n                waitPID = ns.exec(WEAKENJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel());\\r\\n            }\\r\\n            while (ns.getRunningScript(waitPID) !== null) {\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n            // wait a little bit longer to make sure everything else finished too\\r\\n            await ns.sleep(500);\\r\\n        }\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished weakening %s (%f / %f)\\\", targetHostname, ns.getServerMinSecurityLevel(targetHostname), ns.getServerSecurityLevel(targetHostname));\\r\\n}\\r\\nasync function doGrow(ns, targetHostname, ownedHostnames) {\\r\\n    while (ns.getServerMoneyAvailable(targetHostname) < ns.getServerMaxMoney(targetHostname)) {\\r\\n        ns.tprintf(\\\"Grow %s: %s < %s\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(targetHostname), \\\"$0.000a\\\"));\\r\\n        let waitPID = 0;\\r\\n        for (const hostname of ownedHostnames) {\\r\\n            const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n            const threads = Math.floor(availableRam / ns.getScriptRam(GROWJS));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            waitPID = ns.exec(GROWJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel());\\r\\n        }\\r\\n        while (ns.getRunningScript(waitPID) !== null) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        // wait a little bit longer to make sure everything else finished too\\r\\n        await ns.sleep(500);\\r\\n        await doWeaken(ns, targetHostname, ownedHostnames);\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished growing %s (%s / %s)\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(targetHostname), \\\"$0.000a\\\"));\\r\\n}\\r\\nasync function doHack(ns, targetHostname, ownedHostnames) {\\r\\n    const targetMoneyAvailable = ns.getServerMaxMoney(targetHostname) * 0.8;\\r\\n    while (ns.getServerMoneyAvailable(targetHostname) > targetMoneyAvailable) {\\r\\n        ns.tprintf(\\\"Hack %s %s > %s\\\", targetHostname, ns.nFormat(ns.getServerMoneyAvailable(targetHostname), \\\"$0.000a\\\"), ns.nFormat(targetMoneyAvailable, \\\"$0.000a\\\"));\\r\\n        let waitPID = 0;\\r\\n        for (const hostname of ownedHostnames) {\\r\\n            const availableRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n            const threads = Math.floor(availableRam / ns.getScriptRam(HACKJS));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            waitPID = ns.exec(HACKJS, hostname, threads, \\\"--target\\\", targetHostname, \\\"--hackLvlTiming\\\", ns.getHackingLevel(), \\\"--hackLvlEffect\\\", ns.getHackingLevel());\\r\\n        }\\r\\n        while (ns.getRunningScript(waitPID) !== null) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        // wait a little bit longer to make sure everything else finished too\\r\\n        await ns.sleep(500);\\r\\n    }\\r\\n    ns.tprintf(\\\"Finished hacking %s\\\", targetHostname);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    const targetHostname = flags[\\\"target\\\"];\\r\\n    if (!ns.serverExists(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Server does not exist\\\", targetHostname);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.hasRootAccess(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetHostname);\\r\\n        return;\\r\\n    }\\r\\n    if (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(targetHostname)) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetHostname, ns.getHackingLevel(), ns.getServerRequiredHackingLevel(targetHostname));\\r\\n        return;\\r\\n    }\\r\\n    // collect all available ram\\r\\n    const allHostnames = allHosts(ns);\\r\\n    const ownedHostnames = allHostnames.filter((a) => ns.hasRootAccess(a));\\r\\n    // trasfer hacking scripts to the hosts\\r\\n    for (const hostname of ownedHostnames.filter((a) => a !== \\\"home\\\")) {\\r\\n        await ns.scp(HACKJS, hostname);\\r\\n        await ns.scp(GROWJS, hostname);\\r\\n        await ns.scp(WEAKENJS, hostname);\\r\\n    }\\r\\n    while (true) {\\r\\n        await doWeaken(ns, targetHostname, ownedHostnames);\\r\\n        await doGrow(ns, targetHostname, ownedHostnames);\\r\\n        await doHack(ns, targetHostname, ownedHostnames);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja18xLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrXzEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBSWpELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFL0QsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFNLEVBQUUsY0FBc0IsRUFBRSxjQUF3QjtJQUM1RSwrQ0FBK0M7SUFDL0MsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUNoQyxFQUFFLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxFQUNuRCxFQUFFLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUNuRCxDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEdBQUcsbUJBQW1CLEVBQUU7UUFDakUsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQzdGLEVBQUUsQ0FBQyxPQUFPLENBQ04sb0JBQW9CLEVBQ3BCLGNBQWMsRUFDZCxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLEVBQ3pDLG1CQUFtQixDQUN0QixDQUFDO1lBQ0YsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLEtBQUssTUFBTSxRQUFRLElBQUksY0FBYyxFQUFFO2dCQUNuQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbEYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlB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\",\"filename\":\"/archive/hack_1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"home\",\"moduleSequenceNumber\":250205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b5080651-ca6c-4648-a7ac-bbd548a03547\",\"moduleSequenceNumber\":251224}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":251224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/grow.js\",\"url\":\"blob:file:///16259b7f-f80f-4697-86b2-459257796bad\",\"moduleSequenceNumber\":250846}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":250846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nexport async function main(ns) {\\r\\n    for (let i = 1; i < 40; i++) {\\r\\n        const ram = Math.pow(2, i);\\r\\n        const cost = ns.getPurchasedServerCost(ram);\\r\\n        ns.tprintf(\\\"%s %s\\\", ns.nFormat(ram * 1e9, \\\"0b\\\"), ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsNkRBQTZEO0FBQzdELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN6QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDM0MsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7S0FDbkY7QUFDTCxDQUFDIn0=\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///012f97db-a8eb-4387-93cb-478c24598764\",\"moduleSequenceNumber\":672485}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":250208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///bd3adad6-26c9-4244-a635-6c524d315453\",\"moduleSequenceNumber\":250845}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":250845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/hack.js\",\"url\":\"blob:file:///c0c1eb0f-1027-422d-8db9-7a23d7f6db4d\",\"moduleSequenceNumber\":250847}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":250847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var SERVICE_PORTS;\\r\\n(function (SERVICE_PORTS) {\\r\\n    SERVICE_PORTS[SERVICE_PORTS[\\\"SERVER\\\"] = 7] = \\\"SERVER\\\";\\r\\n})(SERVICE_PORTS || (SERVICE_PORTS = {}));\\r\\nexport function getServerService(ns, portNum = SERVICE_PORTS.SERVER) {\\r\\n    const portHandle = ns.getPortHandle(portNum);\\r\\n    if (!portHandle.empty()) {\\r\\n        return portHandle.peek();\\r\\n    }\\r\\n    throw new Error(\\\"Server Service must be initialized before getServerService() may be called\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZV9oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VfaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQU4sSUFBWSxhQUVYO0FBRkQsV0FBWSxhQUFhO0lBQ3JCLHFEQUFVLENBQUE7QUFDZCxDQUFDLEVBRlcsYUFBYSxLQUFiLGFBQWEsUUFFeEI7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsRUFBTSxFQUFFLE9BQU8sR0FBRyxhQUFhLENBQUMsTUFBTTtJQUNuRSxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDckIsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDNUI7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRFQUE0RSxDQUFDLENBQUM7QUFDbEcsQ0FBQyJ9\",\"filename\":\"/lib/service_helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":250211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HACKJS = \\\"/lib/exec/hack.js\\\";\\r\\nexport const GROWJS = \\\"/lib/exec/grow.js\\\";\\r\\nexport const WEAKENJS = \\\"/lib/exec/weaken.js\\\";\\r\\nexport const CONSTSHAREJS = \\\"/lib/exec/const_share.js\\\";\\r\\nexport const CONSTWEAKENJS = \\\"/lib/exec/const_weaken.js\\\";\\r\\nexport function llog(ns, str, ...args) {\\r\\n    ns.printf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args);\\r\\n}\\r\\nexport async function permlog(ns, str, ...args) {\\r\\n    const outstr = ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args);\\r\\n    await ns.write(\\\"log.txt\\\", outstr + \\\"\\\\n\\\", \\\"a\\\");\\r\\n}\\r\\nexport function softenServer(ns, hostname) {\\r\\n    try {\\r\\n        ns.brutessh(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.ftpcrack(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.httpworm(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.relaysmtp(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.sqlinject(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        //\\r\\n    }\\r\\n    try {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n    catch (e) {\\r\\n        return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    const newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n    const children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts;\\r\\n}\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\nexport function doProgramBuys(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    if (!player.tor && player.money > 200e3)\\r\\n        ns.singularity.purchaseTor();\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3)\\r\\n        ns.singularity.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3)\\r\\n        ns.singularity.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6)\\r\\n        ns.singularity.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6)\\r\\n        ns.singularity.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6)\\r\\n        ns.singularity.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    const date = new Date(new Date().getTime() + offset);\\r\\n    if (showms) {\\r\\n        const ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    }\\r\\n    else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\nexport function canBackdoor(ns, hostname) {\\r\\n    const server = ns.getServer(hostname);\\r\\n    if (server.backdoorInstalled)\\r\\n        return true;\\r\\n    if (server.requiredHackingSkill > ns.getHackingLevel()) {\\r\\n        return false;\\r\\n    }\\r\\n    if (!server.hasAdminRights && !softenServer(ns, hostname)) {\\r\\n        return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport async function doBackdoor(ns, hostname) {\\r\\n    const hosts = mapHosts(ns);\\r\\n    const trail = hosts[hostname];\\r\\n    const server = ns.getServer(hostname);\\r\\n    if (server.backdoorInstalled)\\r\\n        return true;\\r\\n    if (server.requiredHackingSkill > ns.getHackingLevel()) {\\r\\n        llog(ns, \\\"Unable to backdoor server %s - Hacking level %d < %d\\\", hostname, ns.getHackingLevel(), server.requiredHackingSkill);\\r\\n        return false;\\r\\n    }\\r\\n    if (!server.hasAdminRights && !softenServer(ns, hostname)) {\\r\\n        llog(ns, \\\"Unable to backdoor server %s - Unable to obtain admin rights\\\", hostname, ns.getHackingLevel(), server.requiredHackingSkill);\\r\\n        return false;\\r\\n    }\\r\\n    for (const hostHopName of trail) {\\r\\n        ns.singularity.connect(hostHopName);\\r\\n    }\\r\\n    await ns.singularity.installBackdoor();\\r\\n    ns.singularity.connect(\\\"home\\\");\\r\\n    return true;\\r\\n}\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\"];\\r\\n    //const targetHosts = [\\\"megacorp\\\",\\\"fulcrumassets\\\",\\\"kuai-gong\\\",\\\"fulcrumtech\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"omnitek\\\",\\\"clarkinc\\\"]\\r\\n    for (const hostname of targetHosts) {\\r\\n        await doBackdoor(ns, hostname);\\r\\n    }\\r\\n    // for (const hostname of allHosts(ns)) {\\r\\n    //     if (hostname === \\\"w0r1d_d43m0n\\\") continue;\\r\\n    //     await doBackdoor(ns, hostname);\\r\\n    // }\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nexport function findProp(propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n}\\r\\nexport function getAugmentationPriceMultiplier(ns) {\\r\\n    const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n    const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n    return 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRywwQkFBMEIsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsMkJBQTJCLENBQUM7QUFFekQsTUFBTSxVQUFVLElBQUksQ0FBQyxFQUFNLEVBQUUsR0FBVyxFQUFFLEdBQUcsSUFBeUI7SUFDbEUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxPQUFPLENBQUMsRUFBTSxFQUFFLEdBQVcsRUFBRSxHQUFHLElBQXlCO0lBQzNFLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDekYsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJO1FBQ0EsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN6QjtJ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\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":17.75,\"server\":\"home\",\"moduleSequenceNumber\":250212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Inspiration taken from https://github.com/jjclark1982/bitburner-scripts/blob/main/service/servers.js */\\r\\nimport { allHosts } from \\\"/lib/util\\\";\\r\\nlet uid = 0;\\r\\nvar CodingContractRewardType;\\r\\n(function (CodingContractRewardType) {\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"FactionReputation\\\"] = 0] = \\\"FactionReputation\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"FactionReputationAll\\\"] = 1] = \\\"FactionReputationAll\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"CompanyReputation\\\"] = 2] = \\\"CompanyReputation\\\";\\r\\n    CodingContractRewardType[CodingContractRewardType[\\\"Money\\\"] = 3] = \\\"Money\\\";\\r\\n})(CodingContractRewardType || (CodingContractRewardType = {}));\\r\\nexport function getScriptExecutionArg(args, arg) {\\r\\n    const argIndex = args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1)\\r\\n        return args[argIndex + 1];\\r\\n    return;\\r\\n}\\r\\nfunction timingSearch(server, timingFunction, ms, start, end, precision) {\\r\\n    const mid = (start + end) / 2;\\r\\n    const midMs = timingFunction(server.hostname, mid);\\r\\n    if (precision && midMs - precision < ms && midMs + precision > ms)\\r\\n        return mid;\\r\\n    else if (Math.round(ms) === Math.round(midMs))\\r\\n        return mid;\\r\\n    if (midMs > ms)\\r\\n        return timingSearch(server, timingFunction, ms, mid, end, precision);\\r\\n    return timingSearch(server, timingFunction, ms, start, mid, precision);\\r\\n}\\r\\nexport class ServerService {\\r\\n    ns;\\r\\n    allHostsCache = [];\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n    loadServer(hostname) {\\r\\n        return new Server(this.ns, hostname);\\r\\n    }\\r\\n    getAllServers(homeReserve) {\\r\\n        const allServers = {};\\r\\n        for (const hostname of this.getAllHosts()) {\\r\\n            allServers[hostname] = this.loadServer(hostname);\\r\\n        }\\r\\n        if (homeReserve && homeReserve > 0)\\r\\n            allServers[\\\"home\\\"].reservedRam = homeReserve;\\r\\n        return allServers;\\r\\n    }\\r\\n    getScriptableServers(homeReserve) {\\r\\n        return Object.values(this.getAllServers(homeReserve)).filter((server) => server.canRunScripts());\\r\\n    }\\r\\n    getHackableServers(hacking) {\\r\\n        return Object.values(this.getAllServers()).filter((server) => server.canBeHacked(hacking));\\r\\n    }\\r\\n    getAllHosts(force = false) {\\r\\n        if (!this.allHostsCache.length || force) {\\r\\n            this.allHostsCache = allHosts(this.ns);\\r\\n        }\\r\\n        return this.allHostsCache;\\r\\n    }\\r\\n}\\r\\nexport class Server {\\r\\n    // base server memebers\\r\\n    contracts = [];\\r\\n    cpuCores = 1;\\r\\n    ftpPortOpen = false;\\r\\n    hasAdminRights = false;\\r\\n    hostname = \\\"\\\";\\r\\n    httpPortOpen = false;\\r\\n    ip = \\\"\\\";\\r\\n    isConnectedTo = false;\\r\\n    maxRam = 0;\\r\\n    messages = [];\\r\\n    organizationName = \\\"\\\";\\r\\n    programs = [];\\r\\n    ramUsed = 0;\\r\\n    runningScripts = [];\\r\\n    scripts = [];\\r\\n    serversOnNetwork = [];\\r\\n    smtpPortOpen = false;\\r\\n    sqlPortOpen = false;\\r\\n    sshPortOpen = false;\\r\\n    textFiles = [];\\r\\n    purchasedByPlayer = false;\\r\\n    // server members\\r\\n    backdoorInstalled = false;\\r\\n    baseDifficulty = 1;\\r\\n    hackDifficulty = 1;\\r\\n    minDifficulty = 1;\\r\\n    moneyAvailable = 0;\\r\\n    moneyMax = 0;\\r\\n    numOpenPortsRequired = 5;\\r\\n    openPortCount = 0;\\r\\n    requiredHackingSkill = 1;\\r\\n    serverGrowth = 1;\\r\\n    suppression = 0;\\r\\n    activeSuppressionThreads = [];\\r\\n    suppressionIntervalID = null;\\r\\n    suppressionLastUpdateTime = 0;\\r\\n    // hacknet server members\\r\\n    cache = 1;\\r\\n    cores = 1;\\r\\n    hashCapacity = 0;\\r\\n    hashRate = 0;\\r\\n    level = 1;\\r\\n    onlineTimeSeconds = 0;\\r\\n    totalHashesGenerated = 0;\\r\\n    // my server members\\r\\n    ns;\\r\\n    reservedRam = 0;\\r\\n    reservedScripts = [];\\r\\n    constructor(ns, data) {\\r\\n        this.ns = ns;\\r\\n        if (typeof data === \\\"string\\\") {\\r\\n            this.hostname = data;\\r\\n            data = undefined;\\r\\n        }\\r\\n        this.reload(data);\\r\\n    }\\r\\n    reload(data) {\\r\\n        data ||= this.ns.getServer(this.hostname);\\r\\n        Object.assign(this, data);\\r\\n        return this;\\r\\n    }\\r\\n    canRunScripts() {\\r\\n        return this.hasAdminRights && this.maxRam > 0;\\r\\n    }\\r\\n    canBeHacked(hacking) {\\r\\n        return this.hasAdminRights && this.moneyMax > 0 && this.requiredHackingSkill <= hacking;\\r\\n    }\\r\\n    reservedScriptRam() {\\r\\n        return this.reservedScripts.reduce((tally, script) => tally + script.ram, 0);\\r\\n    }\\r\\n    reserveScript(filename, ram, threads, args = []) {\\r\\n        const totalRam = ram * threads;\\r\\n        const offset = Number(getScriptExecutionArg(args, \\\"--offset\\\"));\\r\\n        const batchID = Number(getScriptExecutionArg(args, \\\"--batchID\\\"));\\r\\n        if (this.availableRam() >= totalRam) {\\r\\n            this.reservedScripts.push({\\r\\n                filename: filename,\\r\\n                hostname: this.hostname,\\r\\n                ram: totalRam,\\r\\n                threads: threads,\\r\\n                args: args.concat(\\\"--uid\\\", uid++),\\r\\n                offset: offset,\\r\\n                batchID: batchID\\r\\n            });\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    popReservedScripts() {\\r\\n        const tmp = [...this.reservedScripts];\\r\\n        this.reservedScripts = [];\\r\\n        return tmp;\\r\\n    }\\r\\n    clearReservedScripts() {\\r\\n        this.reservedScripts = [];\\r\\n    }\\r\\n    availableRam() {\\r\\n        return Math.max(0, this.maxRam - this.ramUsed - this.reservedRam - this.reservedScriptRam());\\r\\n    }\\r\\n    threadsAvailable(threadSize = 1.75) {\\r\\n        return Math.floor(this.availableRam() / threadSize) || 0;\\r\\n    }\\r\\n    hackTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackTime(this, player, hackOverride);\\r\\n        return this.ns.getHackTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    hackAnalyze(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackPercent(this, player, hackOverride);\\r\\n        return this.ns.hackAnalyze(this.hostname, hackOverride);\\r\\n    }\\r\\n    hackLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.hackLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getHackTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getHackTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getHackTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    hackAmountSecurity(threads = 1) {\\r\\n        //return this.ns.hackAnalyzeSecurity(threads);\\r\\n        return 0.002 * threads;\\r\\n    }\\r\\n    growthAmount(player, growMult, cores) {\\r\\n        growMult ||= this.moneyMax / this.moneyAvailable;\\r\\n        growMult = Math.max(1, growMult);\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.numCycleForGrowth(this, growMult, player, cores);\\r\\n        return this.ns.growthAnalyze(this.hostname, growMult, cores);\\r\\n    }\\r\\n    growPercent(threads, player, cores) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growPercent(this, threads, player, cores);\\r\\n        return 0;\\r\\n    }\\r\\n    growthAmountSecurity(threads = 1) {\\r\\n        //return this.ns.growthAnalyzeSecurity(threads);\\r\\n        return 0.004 * threads;\\r\\n    }\\r\\n    growTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growTime(this, player, hackOverride);\\r\\n        return this.ns.getGrowTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    growLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.growLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getGrowTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getGrowTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getGrowTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    weakenTime(hackOverride, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.weakenTime(this, player, hackOverride);\\r\\n        return this.ns.getWeakenTime(this.hostname, hackOverride);\\r\\n    }\\r\\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n    weakenAmount(threads = 1, cores) {\\r\\n        return this.ns.weakenAnalyze(threads, cores);\\r\\n        //return 0.05 * threads;\\r\\n    }\\r\\n    weakenLevelForTime(ms, player) {\\r\\n        if (player && this.ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"))\\r\\n            return this.ns.formulas.hacking.weakenLevelForTime(this, player, ms);\\r\\n        const hacking = player ? player.hacking : this.ns.getHackingLevel();\\r\\n        if (this.ns.getWeakenTime(this.hostname, Number.MIN_VALUE) < ms ||\\r\\n            this.ns.getWeakenTime(this.hostname, hacking) > ms) {\\r\\n            return 0;\\r\\n        }\\r\\n        return timingSearch(this, this.ns.getWeakenTime, ms, Number.MIN_VALUE, hacking);\\r\\n    }\\r\\n    simGrowBatch(growThreads, weakenThreads, player) {\\r\\n        this.moneyAvailable = Math.min(this.growPercent(growThreads, player) * this.moneyAvailable, this.moneyMax);\\r\\n        this.hackDifficulty += this.growthAmountSecurity(growThreads);\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenThreads), this.minDifficulty);\\r\\n    }\\r\\n    hackAmount(hackThreads, hackOverride, player) {\\r\\n        return Math.min(this.hackAnalyze(hackOverride, player) * hackThreads, 1) * this.moneyAvailable;\\r\\n    }\\r\\n    simHackBatch(hackThreads, hackOverride, weakenHackThreads, growThreads, weakenGrowThreads, player) {\\r\\n        const hackAmount = this.hackAmount(hackThreads, hackOverride, player);\\r\\n        this.moneyAvailable = Math.max(this.moneyAvailable - hackAmount, Math.round(this.moneyMax * 0.01));\\r\\n        this.hackDifficulty += this.hackAmountSecurity(hackThreads);\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenHackThreads), this.minDifficulty);\\r\\n        this.simGrowBatch(growThreads, weakenGrowThreads, player);\\r\\n        return hackAmount;\\r\\n    }\\r\\n    simHack(hackThreads, hackOverride, player) {\\r\\n        const hackAmount = this.hackAmount(hackThreads, hackOverride, player);\\r\\n        this.moneyAvailable = Math.max(this.moneyAvailable - hackAmount, Math.round(this.moneyMax * 0.01));\\r\\n        this.hackDifficulty += this.hackAmountSecurity(hackThreads);\\r\\n    }\\r\\n    simGrow(growThreads, hackOverride, player) {\\r\\n        this.moneyAvailable = Math.min(this.growPercent(growThreads, player) * this.moneyAvailable, this.moneyMax);\\r\\n        this.hackDifficulty += this.growthAmountSecurity(growThreads);\\r\\n    }\\r\\n    simWeaken(weakenThreads) {\\r\\n        this.hackDifficulty = Math.max(this.hackDifficulty - this.weakenAmount(weakenThreads), this.minDifficulty);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic2VydmljZXMvc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBHQUEwRztBQUcxRyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztBQUVaLElBQUssd0JBS0o7QUFMRCxXQUFLLHdCQUF3QjtJQUN6QixpR0FBaUIsQ0FBQTtJQUNqQix1R0FBb0IsQ0FBQTtJQUNwQixpR0FBaUIsQ0FBQTtJQUNqQix5RUFBSyxDQUFBO0FBQ1QsQ0FBQyxFQUxJLHdCQUF3QixLQUF4Qix3QkFBd0IsUUFLNUI7QUFnRkQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLElBQWdCLEVBQUUsR0FBVztJQUMvRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDbEQsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE9BQU87QUFDWCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQ2pCLE1BQWMsRUFDZCxjQUFpRCxFQUNqRCxFQUFVLEVBQ1YsS0FBYSxFQUNiLEdBQVcsRUFDWCxTQUFrQjtJQUVsQixNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFbkQsSUFBSSxTQUFTLElBQUksS0FBSyxHQUFHLFNBQVMsR0FBRyxFQUFFLElBQUksS0FBSyxHQUFHLFNBQVMsR0FBRyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUM7U0FD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\",\"filename\":\"/services/server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fd718c04-5524-440b-8757-34536d397273\",\"moduleSequenceNumber\":231933},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///cf8848e3-ada2-4c45-aea9-937297270a06\",\"moduleSequenceNumber\":275606}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":250213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"lib/util\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"continuous\\\", false],\\r\\n    [\\\"c\\\", false],\\r\\n];\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    try {\\r\\n        const reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n        if (reward === \\\"\\\") {\\r\\n            ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n            ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"Caught Exception: %s\\\", e);\\r\\n    }\\r\\n}\\r\\nclass CCT {\\r\\n    name;\\r\\n    host;\\r\\n    type;\\r\\n    desc;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    data;\\r\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n    solve;\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n        switch (this.type) {\\r\\n            case \\\"Find Largest Prime Factor\\\":\\r\\n                this.solve = _.bind(CCT.solveFindLargestPrimeFactor, null, _, this);\\r\\n                break;\\r\\n            case \\\"Subarray with Maximum Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveSubarraywithMaximumSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Total Ways to Sum\\\":\\r\\n                this.solve = _.bind(CCT.solveTotalWaystoSum, null, _, this);\\r\\n                break;\\r\\n            case \\\"Total Ways to Sum II\\\":\\r\\n                this.solve = _.bind(CCT.solveTotalWaystoSumII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Spiralize Matrix\\\":\\r\\n                this.solve = _.bind(CCT.solveSpiralizeMatrix, null, _, this);\\r\\n                break;\\r\\n            case \\\"Array Jumping Game\\\":\\r\\n                this.solve = _.bind(CCT.solveArrayJumpingGame, null, _, this);\\r\\n                break;\\r\\n            case \\\"Array Jumping Game II\\\":\\r\\n                this.solve = _.bind(CCT.solveArrayJumpingGameII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Merge Overlapping Intervals\\\":\\r\\n                this.solve = _.bind(CCT.solveMergeOverlappingIntervals, null, _, this);\\r\\n                break;\\r\\n            case \\\"Generate IP Addresses\\\":\\r\\n                this.solve = _.bind(CCT.solveGenerateIPAddresses, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader I\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader II\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader III\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Algorithmic Stock Trader IV\\\":\\r\\n                this.solve = _.bind(CCT.solveAlgorithmicStockTraderIV, null, _, this);\\r\\n                break;\\r\\n            case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n                this.solve = _.bind(CCT.solveMinimumPathSuminaTriangle, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid I\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridI, null, _, this);\\r\\n                break;\\r\\n            case \\\"Unique Paths in a Grid II\\\":\\r\\n                this.solve = _.bind(CCT.solveUniquePathsinaGridII, null, _, this);\\r\\n                break;\\r\\n            case \\\"Shortest Path in a Grid\\\":\\r\\n                this.solve = _.bind(CCT.solveShortestPathinaGrid, null, _, this);\\r\\n                break;\\r\\n            case \\\"Sanitize Parentheses in Expression\\\":\\r\\n                this.solve = _.bind(CCT.solveSanitizeParenthesesinExpression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Find All Valid Math Expressions\\\":\\r\\n                this.solve = _.bind(CCT.solveFindAllValidMathExpressions, null, _, this);\\r\\n                break;\\r\\n            case \\\"HammingCodes: Integer to Encoded Binary\\\":\\r\\n                this.solve = _.bind(CCT.solveHammingCodesIntegertoEncodedBinary, null, _, this);\\r\\n                break;\\r\\n            case \\\"HammingCodes: Encoded Binary to Integer\\\":\\r\\n                this.solve = _.bind(CCT.solveHammingCodesEncodedBinarytoInteger, null, _, this);\\r\\n                break;\\r\\n            case \\\"Proper 2-Coloring of a Graph\\\":\\r\\n                this.solve = _.bind(CCT.solveProper2ColoringofaGraph, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression I: RLE Compression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIRLECompression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression II: LZ Decompression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIILZDecompression, null, _, this);\\r\\n                break;\\r\\n            case \\\"Compression III: LZ Compression\\\":\\r\\n                this.solve = _.bind(CCT.solveCompressionIIILZCompression, null, _, this);\\r\\n                break;\\r\\n        }\\r\\n        //this.print(ns);\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        const ways = [1];\\r\\n        ways.length = cct.data + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 1; i < cct.data; ++i) {\\r\\n            for (let j = i; j <= cct.data; ++j) {\\r\\n                ways[j] += ways[j - i];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[cct.data]);\\r\\n    }\\r\\n    static solveTotalWaystoSumII(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const n = data[0];\\r\\n        const s = data[1];\\r\\n        const ways = [1];\\r\\n        ways.length = n + 1;\\r\\n        ways.fill(0, 1);\\r\\n        for (let i = 0; i < s.length; i++) {\\r\\n            for (let j = s[i]; j <= n; j++) {\\r\\n                ways[j] += ways[j - s[i]];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, ways[n]);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        const nums = cct.data.slice();\\r\\n        for (let i = 1; i < nums.length; i++) {\\r\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1]);\\r\\n        }\\r\\n        answerCCT(ns, cct, Math.max(...nums));\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        const spiral = [];\\r\\n        const m = cct.data.length;\\r\\n        const n = cct.data[0].length;\\r\\n        let u = 0;\\r\\n        let d = m - 1;\\r\\n        let l = 0;\\r\\n        let r = n - 1;\\r\\n        let k = 0;\\r\\n        while (true) {\\r\\n            // Up\\r\\n            for (let col = l; col <= r; col++) {\\r\\n                spiral[k] = cct.data[u][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++u > d) {\\r\\n                break;\\r\\n            }\\r\\n            // Right\\r\\n            for (let row = u; row <= d; row++) {\\r\\n                spiral[k] = cct.data[row][r];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--r < l) {\\r\\n                break;\\r\\n            }\\r\\n            // Down\\r\\n            for (let col = r; col >= l; col--) {\\r\\n                spiral[k] = cct.data[d][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--d < u) {\\r\\n                break;\\r\\n            }\\r\\n            // Left\\r\\n            for (let row = d; row >= u; row--) {\\r\\n                spiral[k] = cct.data[row][l];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++l > r) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, spiral);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        let i = 0;\\r\\n        for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n            reach = Math.max(i + cct.data[i], reach);\\r\\n        }\\r\\n        answerCCT(ns, cct, i === n ? 1 : 0);\\r\\n    }\\r\\n    static solveArrayJumpingGameII(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const n = data.length;\\r\\n        let reach = 0;\\r\\n        let jumps = 0;\\r\\n        let lastJump = -1;\\r\\n        while (reach < n - 1) {\\r\\n            let jumpedFrom = -1;\\r\\n            for (let i = reach; i > lastJump; i--) {\\r\\n                if (i + data[i] > reach) {\\r\\n                    reach = i + data[i];\\r\\n                    jumpedFrom = i;\\r\\n                }\\r\\n            }\\r\\n            if (jumpedFrom === -1) {\\r\\n                jumps = 0;\\r\\n                break;\\r\\n            }\\r\\n            lastJump = jumpedFrom;\\r\\n            jumps++;\\r\\n        }\\r\\n        answerCCT(ns, cct, jumps);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        function convert2DArrayToString(arr) {\\r\\n            const components = [];\\r\\n            arr.forEach((e) => {\\r\\n                let s = e.toString();\\r\\n                s = [\\\"[\\\", s, \\\"]\\\"].join(\\\"\\\");\\r\\n                components.push(s);\\r\\n            });\\r\\n            return components.join(\\\",\\\").replace(/\\\\s/g, \\\"\\\");\\r\\n        }\\r\\n        const intervals = cct.data.slice();\\r\\n        intervals.sort((a, b) => {\\r\\n            return a[0] - b[0];\\r\\n        });\\r\\n        const result = [];\\r\\n        let start = intervals[0][0];\\r\\n        let end = intervals[0][1];\\r\\n        for (const interval of intervals) {\\r\\n            if (interval[0] <= end) {\\r\\n                end = Math.max(end, interval[1]);\\r\\n            }\\r\\n            else {\\r\\n                result.push([start, end]);\\r\\n                start = interval[0];\\r\\n                end = interval[1];\\r\\n            }\\r\\n        }\\r\\n        result.push([start, end]);\\r\\n        answerCCT(ns, cct, [convert2DArrayToString(result)]);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\")\\r\\n                return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\")\\r\\n                return false;\\r\\n            if (str.length > 3)\\r\\n                return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n        const results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9)\\r\\n                continue;\\r\\n            const a = cct.data.substr(0, i);\\r\\n            if (!validate(a))\\r\\n                continue;\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6)\\r\\n                    continue;\\r\\n                const b = cct.data.substr(i, j);\\r\\n                if (!validate(b))\\r\\n                    continue;\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3)\\r\\n                        continue;\\r\\n                    const c = cct.data.substr(i + j, k);\\r\\n                    const d = cct.data.substr(i + j + k);\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        let maxCur = 0;\\r\\n        let maxSoFar = 0;\\r\\n        for (let i = 1; i < cct.data.length; ++i) {\\r\\n            maxCur = Math.max(0, (maxCur += cct.data[i] - cct.data[i - 1]));\\r\\n            maxSoFar = Math.max(maxCur, maxSoFar);\\r\\n        }\\r\\n        answerCCT(ns, cct, maxSoFar);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        let profit = 0;\\r\\n        for (let p = 1; p < cct.data.length; ++p) {\\r\\n            profit += Math.max(cct.data[p] - cct.data[p - 1], 0);\\r\\n        }\\r\\n        answerCCT(ns, cct, profit);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        let hold1 = Number.MIN_SAFE_INTEGER;\\r\\n        let hold2 = Number.MIN_SAFE_INTEGER;\\r\\n        let release1 = 0;\\r\\n        let release2 = 0;\\r\\n        for (const price of cct.data) {\\r\\n            release2 = Math.max(release2, hold2 + price);\\r\\n            hold2 = Math.max(hold2, release1 - price);\\r\\n            release1 = Math.max(release1, hold1 + price);\\r\\n            hold1 = Math.max(hold1, price * -1);\\r\\n        }\\r\\n        answerCCT(ns, cct, release2);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        const k = cct.data[0];\\r\\n        const prices = cct.data[1];\\r\\n        const len = prices.length;\\r\\n        if (len < 2) {\\r\\n            answerCCT(ns, cct, 0);\\r\\n            return;\\r\\n        }\\r\\n        if (k > len / 2) {\\r\\n            let res = 0;\\r\\n            for (let i = 1; i < len; ++i) {\\r\\n                res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n            }\\r\\n            answerCCT(ns, cct, res);\\r\\n            return;\\r\\n        }\\r\\n        const hold = [];\\r\\n        const rele = [];\\r\\n        hold.length = k + 1;\\r\\n        rele.length = k + 1;\\r\\n        for (let i = 0; i <= k; ++i) {\\r\\n            hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n            rele[i] = 0;\\r\\n        }\\r\\n        let cur;\\r\\n        for (let i = 0; i < len; ++i) {\\r\\n            cur = prices[i];\\r\\n            for (let j = k; j > 0; --j) {\\r\\n                rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, rele[k]);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        const dp = cct.data[n - 1].slice();\\r\\n        for (let i = n - 2; i > -1; --i) {\\r\\n            for (let j = 0; j < cct.data[i].length; ++j) {\\r\\n                dp[j] = Math.min(dp[j], dp[j + 1]) + cct.data[i][j];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, dp[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        const n = cct.data[0]; // Number of rows\\r\\n        const m = cct.data[1]; // Number of columns\\r\\n        const currentRow = [];\\r\\n        currentRow.length = n;\\r\\n        for (let i = 0; i < n; i++) {\\r\\n            currentRow[i] = 1;\\r\\n        }\\r\\n        for (let row = 1; row < m; row++) {\\r\\n            for (let i = 1; i < n; i++) {\\r\\n                currentRow[i] += currentRow[i - 1];\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, currentRow[n - 1]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        const obstacleGrid = [];\\r\\n        obstacleGrid.length = cct.data.length;\\r\\n        for (let i = 0; i < obstacleGrid.length; ++i) {\\r\\n            obstacleGrid[i] = cct.data[i].slice();\\r\\n        }\\r\\n        for (let i = 0; i < obstacleGrid.length; i++) {\\r\\n            for (let j = 0; j < obstacleGrid[0].length; j++) {\\r\\n                if (obstacleGrid[i][j] == 1) {\\r\\n                    obstacleGrid[i][j] = 0;\\r\\n                }\\r\\n                else if (i == 0 && j == 0) {\\r\\n                    obstacleGrid[0][0] = 1;\\r\\n                }\\r\\n                else {\\r\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        answerCCT(ns, cct, obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]);\\r\\n    }\\r\\n    static solveShortestPathinaGrid(ns, cct) {\\r\\n        const data = cct.data;\\r\\n        const width = data[0].length;\\r\\n        const height = data.length;\\r\\n        const dstY = height - 1;\\r\\n        const dstX = width - 1;\\r\\n        const paths = new Array(height);\\r\\n        for (let y = 0; y < height; y++) {\\r\\n            paths[y] = new Array(width);\\r\\n        }\\r\\n        function validPosition(y, x) {\\r\\n            return y >= 0 && y < height && x >= 0 && x < width && data[y][x] == 0;\\r\\n        }\\r\\n        // List in-bounds and passable neighbors\\r\\n        function* neighbors(y, x) {\\r\\n            if (validPosition(y - 1, x))\\r\\n                yield [y - 1, x]; // Up\\r\\n            if (validPosition(y + 1, x))\\r\\n                yield [y + 1, x]; // Down\\r\\n            if (validPosition(y, x - 1))\\r\\n                yield [y, x - 1]; // Left\\r\\n            if (validPosition(y, x + 1))\\r\\n                yield [y, x + 1]; // Right\\r\\n        }\\r\\n        // Prepare starting point\\r\\n        paths[0][0] = [-1, -1];\\r\\n        const queue = [[0, 0]];\\r\\n        while (queue.length > 0) {\\r\\n            const cur = queue.shift();\\r\\n            if (!cur)\\r\\n                break;\\r\\n            for (const n of neighbors(cur[0], cur[1])) {\\r\\n                const y = n[0];\\r\\n                const x = n[1];\\r\\n                if (!paths[y][x]) {\\r\\n                    paths[y][x] = cur;\\r\\n                    queue.push(n);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        function translate(cy, cx, ny, nx) {\\r\\n            if (ny === -1 && nx === -1)\\r\\n                return \\\"X\\\";\\r\\n            if (cy === ny) {\\r\\n                if (cx > nx)\\r\\n                    return \\\"L\\\";\\r\\n                return \\\"R\\\";\\r\\n            }\\r\\n            if (cy > ny) {\\r\\n                return \\\"U\\\";\\r\\n            }\\r\\n            return \\\"D\\\";\\r\\n        }\\r\\n        // for (let y = 0; y < height; y++) {\\r\\n        //     let xstr = \\\"\\\";\\r\\n        //     for (let x = 0; x < width; x++) {\\r\\n        //         const n = paths[y][x];\\r\\n        //         const nstr = n ? `[${translate(y, x, n[0], n[1])}]` : \\\"[ ]\\\";\\r\\n        //         xstr = ns.sprintf(\\\"%s%s\\\", xstr, validPosition(y, x) ? nstr : \\\"[-]\\\");\\r\\n        //     }\\r\\n        //     ns.tprintf(xstr);\\r\\n        // }\\r\\n        // reverse the path\\r\\n        let path = \\\"\\\";\\r\\n        let cur = [dstY, dstX];\\r\\n        while (validPosition(cur[0], cur[1])) {\\r\\n            const cy = cur[0];\\r\\n            const cx = cur[1];\\r\\n            const n = paths[cy][cx];\\r\\n            if (!n)\\r\\n                break;\\r\\n            const ny = n[0];\\r\\n            const nx = n[1];\\r\\n            switch (translate(cy, cx, ny, nx)) {\\r\\n                case \\\"L\\\":\\r\\n                    path = \\\"R\\\" + path;\\r\\n                    break;\\r\\n                case \\\"R\\\":\\r\\n                    path = \\\"L\\\" + path;\\r\\n                    break;\\r\\n                case \\\"U\\\":\\r\\n                    path = \\\"D\\\" + path;\\r\\n                    break;\\r\\n                case \\\"D\\\":\\r\\n                    path = \\\"U\\\" + path;\\r\\n                    break;\\r\\n            }\\r\\n            cur = n;\\r\\n        }\\r\\n        answerCCT(ns, cct, [path]);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        let left = 0;\\r\\n        let right = 0;\\r\\n        const res = [];\\r\\n        for (let i = 0; i < cct.data.length; ++i) {\\r\\n            if (cct.data[i] === \\\"(\\\") {\\r\\n                ++left;\\r\\n            }\\r\\n            else if (cct.data[i] === \\\")\\\") {\\r\\n                left > 0 ? --left : ++right;\\r\\n            }\\r\\n        }\\r\\n        function dfs(pair, index, left, right, s, solution, res) {\\r\\n            if (s.length === index) {\\r\\n                if (left === 0 && right === 0 && pair === 0) {\\r\\n                    for (let i = 0; i < res.length; i++) {\\r\\n                        if (res[i] === solution) {\\r\\n                            return;\\r\\n                        }\\r\\n                    }\\r\\n                    res.push(solution);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            if (s[index] === \\\"(\\\") {\\r\\n                if (left > 0) {\\r\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n                }\\r\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else if (s[index] === \\\")\\\") {\\r\\n                if (right > 0)\\r\\n                    dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n                if (pair > 0)\\r\\n                    dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n            else {\\r\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n        }\\r\\n        dfs(0, 0, left, right, cct.data, \\\"\\\", res);\\r\\n        answerCCT(ns, cct, res);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        const num = cct.data[0];\\r\\n        const target = cct.data[1];\\r\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n            if (pos === num.length) {\\r\\n                if (target === evaluated) {\\r\\n                    res.push(path);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            for (let i = pos; i < num.length; ++i) {\\r\\n                if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                    break;\\r\\n                }\\r\\n                const cur = parseInt(num.substring(pos, i + 1));\\r\\n                if (pos === 0) {\\r\\n                    helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n                }\\r\\n                else {\\r\\n                    helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                    helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                    helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const result = [];\\r\\n        helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveHammingCodesIntegertoEncodedBinary(ns, cct) {\\r\\n        answerCCT(ns, cct, [HammingEncode(cct.data)]);\\r\\n    }\\r\\n    static solveHammingCodesEncodedBinarytoInteger(ns, cct) {\\r\\n        answerCCT(ns, cct, HammingDecode(cct.data));\\r\\n    }\\r\\n    static solveProper2ColoringofaGraph(ns, cct) {\\r\\n        // const data = cct.data;\\r\\n        // function neighbourhood(vertex: number): number[] {\\r\\n        //     const adjLeft = data[1].filter(([a, _]) => a == vertex).map(([_, b]) => b);\\r\\n        //     const adjRight = data[1].filter(([_, b]) => b == vertex).map(([a, _]) => a);\\r\\n        //     return adjLeft.concat(adjRight);\\r\\n        // }\\r\\n        // //Verify that there is no solution by attempting to create a proper 2-coloring.\\r\\n        // const coloring: (number | undefined)[] = Array(data[0]).fill(undefined);\\r\\n        // while (coloring.some((val) => val === undefined)) {\\r\\n        //     //Color a vertex in the graph\\r\\n        //     const initialVertex: number = coloring.findIndex((val) => val === undefined);\\r\\n        //     coloring[initialVertex] = 0;\\r\\n        //     const frontier: number[] = [initialVertex];\\r\\n        //     //Propogate the coloring throughout the component containing v greedily\\r\\n        //     while (frontier.length > 0) {\\r\\n        //         const v: number = frontier.pop() || 0;\\r\\n        //         const neighbors: number[] = neighbourhood(v);\\r\\n        //         //For each vertex u adjacent to v\\r\\n        //         for (const id in neighbors) {\\r\\n        //             const u: number = neighbors[id];\\r\\n        //             //Set the color of u to the opposite of v's color if it is new,\\r\\n        //             //then add u to the frontier to continue the algorithm.\\r\\n        //             if (coloring[u] === undefined) {\\r\\n        //                 if (coloring[v] === 0) coloring[u] = 1;\\r\\n        //                 else coloring[u] = 0;\\r\\n        //                 frontier.push(u);\\r\\n        //             }\\r\\n        //             //Assert u,v do not have the same color\\r\\n        //             else if (coloring[u] === coloring[v]) {\\r\\n        //                 //If u,v do have the same color, no proper 2-coloring exists, meaning\\r\\n        //                 //the player was correct to say there is no proper 2-coloring of the graph.\\r\\n        //                 answerCCT(ns, cct, []);\\r\\n        //                 return;\\r\\n        //             }\\r\\n        //         }\\r\\n        //     }\\r\\n        // }\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIRLECompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIILZDecompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveCompressionIIILZCompression(ns, cct) {\\r\\n        answerCCT(ns, cct, 0);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        let fac = 2;\\r\\n        let n = cct.data;\\r\\n        while (n > (fac - 1) * (fac - 1)) {\\r\\n            while (n % fac === 0) {\\r\\n                n = Math.round(n / fac);\\r\\n            }\\r\\n            ++fac;\\r\\n        }\\r\\n        answerCCT(ns, cct, n === 1 ? fac - 1 : n);\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    options.continuous = options.continuous || options.c;\\r\\n    const hosts = allHosts(ns);\\r\\n    while (true) {\\r\\n        const ccts = [];\\r\\n        for (const hostname of hosts) {\\r\\n            const ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n            if (ls.length === 0)\\r\\n                continue;\\r\\n            ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n        }\\r\\n        for (const cct of ccts) {\\r\\n            cct.solve(ns);\\r\\n        }\\r\\n        if (!options.continuous)\\r\\n            break;\\r\\n        await ns.sleep(60 * 1000);\\r\\n    }\\r\\n}\\r\\nfunction HammingDecode(_data) {\\r\\n    //check for altered bit and decode\\r\\n    const _build = _data.split(\\\"\\\"); // ye, an array for working, again\\r\\n    const _testArray = []; //for the \\\"truthtable\\\". if any is false, the data has an altered bit, will check for and fix it\\r\\n    const _sumParity = Math.ceil(Math.log2(_data.length)); // sum of parity for later use\\r\\n    const count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\r\\n    // the count.... again ;)\\r\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // store first index, for checking in next step and fix the _build properly later on\\r\\n    _testArray.push(_overallParity == (count(_build, \\\"1\\\") % 2).toString() ? true : false); // first check with the overall parity bit\\r\\n    for (let i = 0; i < _sumParity; i++) {\\r\\n        // for the rest of the remaining parity bits we also \\\"check\\\"\\r\\n        const _tempIndex = Math.pow(2, i) - 1; // get the parityBits Index\\r\\n        const _tempStep = _tempIndex + 1; // set the stepsize\\r\\n        const _tempData = [..._build]; // get a \\\"copy\\\" of the build-data for working\\r\\n        const _tempArray = []; // init empty array for \\\"testing\\\"\\r\\n        while (_tempData[_tempIndex] != undefined) {\\r\\n            // extract from the copied data until the \\\"starting\\\" index is undefined\\r\\n            const _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)]; // extract 2*stepsize\\r\\n            _tempArray.push(..._temp.splice(0, _tempStep)); // and cut again for keeping first half\\r\\n        }\\r\\n        const _tempParity = _tempArray.shift(); // and again save the first index separated for checking with the rest of the data\\r\\n        _testArray.push(_tempParity == (count(_tempArray, \\\"1\\\") % 2).toString() ? true : false);\\r\\n        // is the _tempParity the calculated data? push answer into the 'truthtable'\\r\\n    }\\r\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index and start with 0\\r\\n    for (let i = 1; i < _sumParity + 1; i++) {\\r\\n        // simple binary adding for every boolean in the _testArray, starting from 2nd index of it\\r\\n        _fixIndex += _testArray[i] ? 0 : Math.pow(2, i) / 2;\\r\\n    }\\r\\n    _build.unshift(_overallParity); // now we need the \\\"overall\\\" parity back in it's place\\r\\n    // try fix the actual encoded binary string if there is an error\\r\\n    if (_fixIndex > 0 && _testArray[0] == false) {\\r\\n        // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\r\\n        _build[_fixIndex] = _build[_fixIndex] == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == false) {\\r\\n        // otherwise, if the the overall_parity is the only wrong, fix that one\\r\\n        _overallParity = _overallParity == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == true && _testArray.some((truth) => truth == false)) {\\r\\n        return 0; // uhm, there's some strange going on... 2 bits are altered? How? This should not happen 👀\\r\\n    }\\r\\n    // oof.. halfway through... we fixed an possible altered bit, now \\\"extract\\\" the parity-bits from the _build\\r\\n    for (let i = _sumParity; i >= 0; i--) {\\r\\n        // start from the last parity down the 2nd index one\\r\\n        _build.splice(Math.pow(2, i), 1);\\r\\n    }\\r\\n    _build.splice(0, 1); // remove the overall parity bit and we have our binary value\\r\\n    return parseInt(_build.join(\\\"\\\"), 2); // parse the integer with redux 2 and we're done!\\r\\n}\\r\\nexport function HammingEncode(value) {\\r\\n    // encoding following Hammings rule\\r\\n    function HammingSumOfParity(_lengthOfDBits) {\\r\\n        // will calculate the needed amount of parityBits 'without' the \\\"overall\\\"-Parity (that math took me 4 Days to get it working)\\r\\n        return _lengthOfDBits < 3 || _lengthOfDBits == 0 // oh and of course using ternary operators, it's a pretty neat function\\r\\n            ? _lengthOfDBits == 0\\r\\n                ? 0\\r\\n                : _lengthOfDBits + 1\\r\\n            : // the following math will only work, if the length is greater equal 3, otherwise it's \\\"kind of\\\" broken :D\\r\\n                Math.ceil(Math.log2(_lengthOfDBits * 2)) <=\\r\\n                    Math.ceil(Math.log2(1 + _lengthOfDBits + Math.ceil(Math.log2(_lengthOfDBits))))\\r\\n                    ? Math.ceil(Math.log2(_lengthOfDBits) + 1)\\r\\n                    : Math.ceil(Math.log2(_lengthOfDBits));\\r\\n    }\\r\\n    const _data = value.toString(2).split(\\\"\\\"); // first, change into binary string, then create array with 1 bit per index\\r\\n    const _sumParity = HammingSumOfParity(_data.length); // get the sum of needed parity bits (for later use in encoding)\\r\\n    const count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\r\\n    // function count for specific entries in the array, for later use\\r\\n    const _build = [\\\"x\\\", \\\"x\\\", ..._data.splice(0, 1)]; // init the \\\"pre-build\\\"\\r\\n    for (let i = 2; i < _sumParity; i++) {\\r\\n        // add new paritybits and the corresponding data bits (pre-building array)\\r\\n        _build.push(\\\"x\\\", ..._data.splice(0, Math.pow(2, i) - 1));\\r\\n    }\\r\\n    // now the \\\"calculation\\\"... get the paritybits ('x') working\\r\\n    for (const index of _build.reduce(function (a, e, i) {\\r\\n        if (e == \\\"x\\\")\\r\\n            a.push(i);\\r\\n        return a;\\r\\n    }, [])) {\\r\\n        // that reduce will result in an array of index numbers where the \\\"x\\\" is placed\\r\\n        const _tempcount = index + 1; // set the \\\"stepsize\\\" for the parityBit\\r\\n        const _temparray = []; // temporary array to store the extracted bits\\r\\n        const _tempdata = [..._build]; // only work with a copy of the _build\\r\\n        while (_tempdata[index] !== undefined) {\\r\\n            // as long as there are bits on the starting index, do \\\"cut\\\"\\r\\n            const _temp = _tempdata.splice(index, _tempcount * 2); // cut stepsize*2 bits, then...\\r\\n            _temparray.push(..._temp.splice(0, _tempcount)); // ... cut the result again and keep the first half\\r\\n        }\\r\\n        _temparray.splice(0, 1); // remove first bit, which is the parity one\\r\\n        _build[index] = (count(_temparray, \\\"1\\\") % 2).toString(); // count with remainder of 2 and\\\"toString\\\" to store the parityBit\\r\\n    } // parity done, now the \\\"overall\\\"-parity is set\\r\\n    _build.unshift((count(_build, \\\"1\\\") % 2).toString()); // has to be done as last element\\r\\n    return _build.join(\\\"\\\"); // return the _build as string\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFcEMsOERBQThEO0FBQzlELElBQUksT0FBWSxDQUFDO0FBQ2pCLE1BQU0sVUFBVSxHQUFxRDtJQUNqRSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUM7SUFDckIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQ2YsQ0FBQztBQUVGLFNBQVMsU0FBUyxDQUFDLEVBQU0sRUFBRSxHQUFRLEVBQUUsTUFBeUI7SUFDMUQsSUFBSTtRQUNBLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU3RixJQUFJLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDZixFQUFFLENBQUMsT0FBTyxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEYsRUFBRSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ2hGO2FBQU07WUFDSCxFQUFFLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN6RTtLQUNKO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxDQUFD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QUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxRQUFRO1lBQ1IsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxPQUFPO1lBQ1AsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7WUFFRCxPQUFPO1lBQ1AsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVCxNQUFNO2FBQ1Q7U0FDSjtRQUVELFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBTSxF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\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///238571a3-8c00-44d3-ab2d-b1a1d8537521\",\"moduleSequenceNumber\":250212},{\"filename\":\"cct.js\",\"url\":\"blob:file:///5d3e94ee-abaa-48e5-8522-60a9f7fa7a5f\",\"moduleSequenceNumber\":257982}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":257982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, doProgramBuys, softenServer, stFormat } from \\\"/lib/util\\\";\\r\\nconst SPECIAL_HOSTS = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"all\\\", false],\\r\\n    [\\\"ch\\\", 5],\\r\\n    [\\\"suppress\\\", false],\\r\\n    [\\\"soften\\\", false],\\r\\n    [\\\"s\\\", false],\\r\\n    [\\\"a\\\", false],\\r\\n    [\\\"b\\\", false],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--ch\\\"].includes(lastFlag))\\r\\n        return [\\\"10\\\"];\\r\\n    return [\\\"-s\\\", \\\"-a\\\", \\\"--all\\\", \\\"--ch\\\", \\\"--suppress\\\", \\\"--soften\\\", \\\"-b\\\"];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (options.ch < 0) {\\r\\n        ns.tprintf(\\\"ERROR: check flag must be > 0\\\");\\r\\n        return;\\r\\n    }\\r\\n    options.soften = options.soften || options.s;\\r\\n    options.all = options.all || options.a;\\r\\n    if (options.b)\\r\\n        doProgramBuys(ns);\\r\\n    const hosts = allHosts(ns).sort((a, b) => ns.getServerRequiredHackingLevel(b) - ns.getServerRequiredHackingLevel(a));\\r\\n    if (options.soften) {\\r\\n        for (const hostname of hosts) {\\r\\n            softenServer(ns, hostname);\\r\\n        }\\r\\n    }\\r\\n    let hostnameMaxLen = 0;\\r\\n    hosts.map((a) => (hostnameMaxLen = Math.max(a.length, hostnameMaxLen)));\\r\\n    if (options.suppress)\\r\\n        return;\\r\\n    let serverListCount = hosts.length;\\r\\n    if (!options.all) {\\r\\n        serverListCount = Math.min(serverListCount, options.ch +\\r\\n            hosts.reduce((tally, hostname) => tally + (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? 1 : 0), 0));\\r\\n    }\\r\\n    const lookHosts = serverListCount < hosts.length ? hosts.slice(-serverListCount) : hosts;\\r\\n    for (const hostname of lookHosts) {\\r\\n        const displayHostname = SPECIAL_HOSTS.includes(hostname) ? \\\"*\\\" + hostname : hostname;\\r\\n        const root = ns.hasRootAccess(hostname);\\r\\n        const requiredSkill = ns.getServerRequiredHackingLevel(hostname);\\r\\n        const canHack = ns.getHackingLevel() >= requiredSkill;\\r\\n        const ram = ns.getServerMaxRam(hostname);\\r\\n        const time = ns.getWeakenTime(hostname);\\r\\n        ns.tprintf(`%${hostnameMaxLen}s %4d %s %s %5s %8s %6.2f/%6.2f %9s/%9s`, displayHostname, requiredSkill, root ? \\\"[R]\\\" : \\\"[ ]\\\", canHack ? \\\"[H]\\\" : \\\"[ ]\\\", ram > 0 ? ns.nFormat(ram * 1e9, \\\"0b\\\") : \\\"-----\\\", stFormat(ns, time), ns.getServerSecurityLevel(hostname), ns.getServerMinSecurityLevel(hostname), ns.nFormat(ns.getServerMoneyAvailable(hostname), \\\"$0.000a\\\"), ns.nFormat(ns.getServerMaxMoney(hostname), \\\"$0.000a\\\"));\\r\\n    }\\r\\n    const availableRam = hosts.reduce((tally, hostname) => tally + (ns.hasRootAccess(hostname) ? ns.getServerMaxRam(hostname) : 0), 0);\\r\\n    ns.tprintf(\\\"Total RAM available: %s\\\", ns.nFormat(availableRam * 1e9, \\\"0b\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jhd2wuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmF3bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTVFLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXpGLElBQUksT0FBTyxDQUFDO0FBQ1osTUFBTSxVQUFVLEdBQXFEO0lBQ2pFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztJQUNkLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNULENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztJQUNuQixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7SUFDakIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQ2YsQ0FBQztBQUVGLGlIQUFpSDtBQUNqSCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFjO0lBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZ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\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///3f1373d1-6bf4-438a-b77f-3cb0c3aea65b\",\"moduleSequenceNumber\":250212},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///eb9eb1c8-1031-4a5e-bc1e-fe777f4a7cfe\",\"moduleSequenceNumber\":353104}],\"dependents\":[],\"ramUsage\":7.4,\"server\":\"home\",\"moduleSequenceNumber\":353104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"reserve\\\", Number.MAX_SAFE_INTEGER],\\r\\n    [\\\"timer\\\", 0],\\r\\n];\\r\\nlet serverService;\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(\\\"/lib/exec/const_weaken.js\\\", \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    const pids = [];\\r\\n    for (const server of scriptableServers) {\\r\\n        const availableRam = server.availableRam();\\r\\n        const availableThreads = Math.floor(availableRam / ns.getScriptRam(\\\"/lib/exec/const_weaken.js\\\"));\\r\\n        if (availableThreads <= 0)\\r\\n            continue;\\r\\n        pids.push(ns.exec(\\\"/lib/exec/const_weaken.js\\\", server.hostname, availableThreads, \\\"--target\\\", \\\"joesguns\\\"));\\r\\n    }\\r\\n    if (options.timer) {\\r\\n        await ns.sleep(options.timer * 1000);\\r\\n        for (const pid of pids) {\\r\\n            ns.kill(pid);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiZXhwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxJQUFJLE9BQU8sQ0FBQztBQUNaLE1BQU0sVUFBVSxHQUFxRDtJQUNqRSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUM7SUFDcEMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0NBQ2YsQ0FBQztBQUVGLElBQUksYUFBNEIsQ0FBQztBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLElBQUk7UUFDQSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtRQUMvQyxFQUFFLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxPQUFPO0tBQ1Y7SUFFRCxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUUsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDekMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDdEU7SUFFRCxNQUFNLElBQUksR0FBYSxFQUFFLENBQUE7SUFDekIsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0MsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQztRQUVqRyxJQUFJLGdCQUFnQixJQUFJLENBQUM7WUFBRSxTQUFTO1FBRXBDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0tBQzlHO0lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ2YsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFckMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDcEIsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNoQjtLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"exp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f68dc9b7-8d2c-497c-af9a-9cacc65240d3\",\"moduleSequenceNumber\":250212},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///e1a5b8f3-2108-40ce-be0e-02e0571b4e82\",\"moduleSequenceNumber\":250213},{\"filename\":\"exp.js\",\"url\":\"blob:file:///beefe040-dcde-40a4-939b-2cde0ec9778b\",\"moduleSequenceNumber\":251175}],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":251175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HACKJS, GROWJS, WEAKENJS, llog, stFormat, CONSTSHAREJS } from \\\"/lib/util\\\";\\r\\nimport { ServerService, Server } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst BATCHSPACER = TSPACER * 4;\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SHARE_RAM = 4;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n    [\\\"goal\\\", Number.MAX_SAFE_INTEGER],\\r\\n    [\\\"rounds\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\", \\\"--goal\\\", \\\"--rounds\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    //////\\r\\n    const shortWeakenTime = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    timeLimit = Math.min(timeLimit, shortWeakenTime * 2);\\r\\n    // If we cant fit a single batch within the time limit, fail the allocation.\\r\\n    if (shortWeakenTime + BATCHSPACER > timeLimit)\\r\\n        return {\\r\\n            totalMoney: 0,\\r\\n            totalPercent: 0,\\r\\n            batchCount: 1000000,\\r\\n            hasPrimary: false,\\r\\n            batchLimit: 0,\\r\\n        };\\r\\n    const maxTimeLimitCycles = Math.floor((timeLimit - shortWeakenTime) / BATCHSPACER);\\r\\n    const maxWeakenLengthCycles = Math.floor(shortWeakenTime / BATCHSPACER);\\r\\n    const maxHackTimeCycles = Math.floor(hackTimeLong / BATCHSPACER);\\r\\n    const batchCountMax = Math.max(Math.min(maxTimeLimitCycles, maxWeakenLengthCycles, maxHackTimeCycles), 1);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"tl %d; wl %d; ht %d\\\", maxTimeLimitCycles, maxWeakenLengthCycles, maxHackTimeCycles);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    const result = {\\r\\n        totalMoney: 0,\\r\\n        totalPercent: 0,\\r\\n        batchCount: 0,\\r\\n        hasPrimary: false,\\r\\n        batchLimit: batchCountMax,\\r\\n    };\\r\\n    if (hackTimeLong < 5000)\\r\\n        return {\\r\\n            totalMoney: 0,\\r\\n            totalPercent: 0,\\r\\n            batchCount: 1000000,\\r\\n            hasPrimary: false,\\r\\n            batchLimit: 0,\\r\\n        };\\r\\n    let batchID = 0;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        // allocate primary thread\\r\\n        const bigBlock = servers\\r\\n            .map((a) => a.availableRam())\\r\\n            .filter((a) => a > 0)\\r\\n            .sort((a, b) => b - a)[0];\\r\\n        // We've run out of available ram, break out and execute reserved scripts\\r\\n        if (bigBlock === undefined || bigBlock < GROW_RAM)\\r\\n            break;\\r\\n        if (moneyDiff > 0 || securityDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            result.hasPrimary = true;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                weakenGrowThreads = threadCount;\\r\\n            }\\r\\n            else {\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            batchID++;\\r\\n            result.totalMoney += hackAmount;\\r\\n            result.totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    // fill remaining ram with share threads\\r\\n    for (const server of servers) {\\r\\n        const threads = server.threadsAvailable(SHARE_RAM);\\r\\n        if (threads <= 0)\\r\\n            continue;\\r\\n        server.reserveScript(CONSTSHAREJS, SHARE_RAM, threads, [\\\"--offset\\\", 0]);\\r\\n    }\\r\\n    result.batchCount = batchID;\\r\\n    return result;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    if (options.limit !== Number.MAX_SAFE_INTEGER)\\r\\n        options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    let targetServer;\\r\\n    let servers = [];\\r\\n    const simPlayer = ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\") ? ns.getPlayer() : undefined;\\r\\n    do {\\r\\n        await doSoften(ns);\\r\\n        servers = serverService\\r\\n            .getScriptableServers(options.reserve)\\r\\n            .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n        targetServer = await getBestTarget(ns, servers);\\r\\n        if (!targetServer)\\r\\n            return;\\r\\n        targetServer.reload();\\r\\n        const bestHackLimit = calcHackLimit(ns, targetServer, servers, [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1], options.limit, simPlayer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const totalPercent = allocateBatchResult.totalPercent;\\r\\n        const batchLimit = allocateBatchResult.batchLimit;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        targetServer.reload();\\r\\n        const hackTimeTarget = batchCount * BATCHSPACER;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * BATCHSPACER + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * BATCHSPACER + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * BATCHSPACER + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * BATCHSPACER + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.sprintf(\\\"%s (%s/s)\\\", ns.nFormat(totalMoney, \\\"$0.0a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.0a\\\")),\\r\\n            ns.sprintf(\\\"%d/%d/%.2f\\\", batchCount, batchLimit, bestHackLimit),\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n        // kill all launched share threads\\r\\n        for (const server of servers) {\\r\\n            const processes = ns.ps(server.hostname).filter((a) => a.filename === CONSTSHAREJS);\\r\\n            for (const process of processes) {\\r\\n                ns.kill(process.pid);\\r\\n            }\\r\\n        }\\r\\n    } while (ns.getPlayer().money < options.goal && --options.rounds > 0);\\r\\n}\\r\\nfunction getIncome(ns, targetServer, servers, timespan) {\\r\\n    const simPlayer = ns.getPlayer();\\r\\n    let timeleft = timespan;\\r\\n    let totalMoneyGained = 0;\\r\\n    while (timeleft > 0) {\\r\\n        const bestHackLimit = calcHackLimit(ns, targetServer, servers, [0.5, 0.75, 1], timeleft, simPlayer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, false, timeleft, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const usedPrimary = allocateBatchResult.hasPrimary;\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * BATCHSPACER;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        if (usedPrimary) {\\r\\n            timeleft -= cycleTime;\\r\\n            totalMoneyGained += totalMoney;\\r\\n        }\\r\\n        else {\\r\\n            const cyclesLeft = Math.ceil(timeleft / cycleTime);\\r\\n            timeleft -= cycleTime * cyclesLeft;\\r\\n            totalMoneyGained += totalMoney * cyclesLeft;\\r\\n        }\\r\\n    }\\r\\n    const totalTime = timespan - timeleft;\\r\\n    const hackChance = ns.formulas.hacking.hackChance(targetServer, simPlayer);\\r\\n    return (totalMoneyGained / (totalTime / 1000)) * hackChance; // $/s\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"soften.js\\\", \\\"home\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\nfunction calcHackLimit(ns, targetServer, servers, hackLimits, timeLimit, simPlayer) {\\r\\n    let bestHackLimit = 0;\\r\\n    let bestHackLimitValue = 0;\\r\\n    for (const hackLimit of hackLimits) {\\r\\n        const estimateServer = new Server(ns, targetServer);\\r\\n        const allocateBatchResult = allocateBatches(ns, estimateServer, servers, hackLimit, false, timeLimit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchCount;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const weakenLevelCalc = estimateServer.weakenLevelForTime(batchCount * BATCHSPACER, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n        const weakenTime = estimateServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * BATCHSPACER;\\r\\n        const value = totalMoney / (cycleTime / 1000);\\r\\n        if (value > bestHackLimitValue) {\\r\\n            bestHackLimit = hackLimit;\\r\\n            bestHackLimitValue = value;\\r\\n        }\\r\\n        servers.map((a) => a.clearReservedScripts());\\r\\n    }\\r\\n    return bestHackLimit;\\r\\n}\\r\\nasync function getBestTarget(ns, servers) {\\r\\n    let targetServer;\\r\\n    if (options.target === \\\"\\\") {\\r\\n        const targets = serverService.getHackableServers(ns.getHackingLevel());\\r\\n        let targetIncomes = [];\\r\\n        for (const target of targets) {\\r\\n            targetIncomes.push([target, getIncome(ns, target, servers, options.limit)]);\\r\\n            await ns.sleep(10);\\r\\n        }\\r\\n        // the hub 29.6m/s\\r\\n        targetIncomes = targetIncomes.sort((a, b) => b[1] - a[1]);\\r\\n        // targetIncomes.forEach((a) => ns.tprintf(\\\"%20s: %s/s\\\", a[0].hostname, ns.nFormat(a[1], \\\"$0.000a\\\")));\\r\\n        targetServer = targetIncomes[0][0];\\r\\n    }\\r\\n    else {\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n        if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n            ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n    return targetServer;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUE2QixNQUFNLGtCQUFrQixDQUFDO0FBRXBGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUNwQixNQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWhDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQzdCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUNyQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQztBQUVwQixNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFdkIsU0FBUyx3QkFBd0IsQ0FBQyxJQUFxQixFQUFFLEdBQVcsRUFBRSxHQUFhO0lBQy9FLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdkQsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07UUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdEYsT0FBTztBQUNYLENBQUM7QUFTRCxTQUFTLG1CQUFtQixDQUFDLEVBQU0sRUFBRSxPQUFpQixFQUFFLE9BQWdCO0lBQ3BFLHNHQUFzRztJ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\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fed926b3-3bcb-4b50-bfc8-21cdc87fc866\",\"moduleSequenceNumber\":250212},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///fddb8708-bdbe-445f-b099-3c65e9966e2c\",\"moduleSequenceNumber\":250213},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///fd18396f-3c5c-4170-97c3-2504c91c79f4\",\"moduleSequenceNumber\":250212},{\"filename\":\"hack.js\",\"url\":\"blob:file:///ca89af5f-3e44-4dfa-82a3-db04de1950b7\",\"moduleSequenceNumber\":250251}],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"home\",\"moduleSequenceNumber\":250251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, HACKJS, GROWJS, WEAKENJS, CONSTSHAREJS, CONSTWEAKENJS } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    const killScriptList = [\\r\\n        HACKJS,\\r\\n        GROWJS,\\r\\n        WEAKENJS,\\r\\n        CONSTSHAREJS,\\r\\n        CONSTWEAKENJS,\\r\\n        \\\"hack.js\\\",\\r\\n        \\\"/lib/stanek/charge.js\\\",\\r\\n        \\\"/archive/hack_2.js\\\",\\r\\n        \\\"controller.js\\\",\\r\\n        \\\"mcp.js\\\",\\r\\n    ];\\r\\n    const allHostnames = allHosts(ns);\\r\\n    for (const hostname of allHostnames) {\\r\\n        const processes = ns.ps(hostname).filter((a) => killScriptList.includes(a.filename));\\r\\n        for (const process of processes) {\\r\\n            ns.kill(process.pid);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJrYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFNUYsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLGNBQWMsR0FBRztRQUNuQixNQUFNO1FBQ04sTUFBTTtRQUNOLFFBQVE7UUFDUixZQUFZO1FBQ1osYUFBYTtRQUNiLFNBQVM7UUFDVCx1QkFBdUI7UUFDdkIsb0JBQW9CO1FBQ3BCLGVBQWU7UUFDZixRQUFRO0tBQ1gsQ0FBQztJQUVGLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFlBQVksRUFBRTtRQUNqQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUVyRixLQUFLLE1BQU0sT0FBTyxJQUFJLFNBQVMsRUFBRTtZQUM3QixFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QjtLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///ce8ba1a1-40be-4437-9042-370dc21e4467\",\"moduleSequenceNumber\":250212},{\"filename\":\"ka.js\",\"url\":\"blob:file:///c9a8f932-50eb-4f41-b1dd-3b0f28c2bb0c\",\"moduleSequenceNumber\":354159}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":354159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const files = ns.ls(ns.getHostname());\\r\\n    const libs = files.filter((a) => a.indexOf(\\\"/lib\\\") !== -1);\\r\\n    const scripts = files.filter((a) => a.indexOf(\\\"/lib\\\") === -1 && a.indexOf(\\\".js\\\") !== -1);\\r\\n    const execs = files.filter((a) => a.indexOf(\\\".exe\\\") !== -1);\\r\\n    const others = files.filter((a) => !libs.includes(a) && !scripts.includes(a) && !execs.includes(a));\\r\\n    let maxFilenameLength = 0;\\r\\n    libs.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length - 5)));\\r\\n    scripts.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    execs.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    others.map((a) => (maxFilenameLength = Math.max(maxFilenameLength, a.length)));\\r\\n    ns.tprintf(\\\"Scripts:\\\");\\r\\n    for (const file of scripts) {\\r\\n        const ram = ns.getScriptRam(file);\\r\\n        ns.tprintf(`  %${maxFilenameLength}s %8s`, file, ns.nFormat(ram * 1e9, \\\"0.00b\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"Library Scripts:\\\");\\r\\n    for (const file of libs) {\\r\\n        const ram = ns.getScriptRam(file);\\r\\n        const subName = file.substring(5);\\r\\n        ns.tprintf(`  %${maxFilenameLength}s %8s`, subName, ns.nFormat(ram * 1e9, \\\"0.00b\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"Executables:\\\");\\r\\n    for (const file of execs) {\\r\\n        ns.tprintf(`  %${maxFilenameLength}s`, file);\\r\\n    }\\r\\n    ns.tprintf(\\\"Other:\\\");\\r\\n    for (const file of others) {\\r\\n        ns.tprintf(`  %${maxFilenameLength}s`, file);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFFdEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBHLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvRSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZCLEtBQUssTUFBTSxJQUFJLElBQUksT0FBTyxFQUFFO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLGlCQUFpQixPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ3BGO0lBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9CLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0saUJBQWlCLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDdkY7SUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3RCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQixLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sRUFBRTtRQUN2QixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNoRDtBQUNMLENBQUMifQ==\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///5cdde271-ef80-48ac-8b45-c2f42628337e\",\"moduleSequenceNumber\":781174}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":250219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, HACKJS, GROWJS, WEAKENJS, softenServer, doProgramBuys, CONSTSHAREJS } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    doProgramBuys(ns);\\r\\n    const hosts = allHosts(ns);\\r\\n    for (const hostname of hosts) {\\r\\n        softenServer(ns, hostname);\\r\\n        if (hostname !== \\\"home\\\") {\\r\\n            for (const script of [HACKJS, GROWJS, WEAKENJS, CONSTSHAREJS])\\r\\n                await ns.scp(script, hostname);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdGVuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic29mdGVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFMUcsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTNCLEtBQUssTUFBTSxRQUFRLElBQUksS0FBSyxFQUFFO1FBQzFCLFlBQVksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0IsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO1lBQ3JCLEtBQUssTUFBTSxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUM7Z0JBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNqRztLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///4dea22fc-b5f5-4c64-bd36-16cd9e7a496e\",\"moduleSequenceNumber\":250212},{\"filename\":\"soften.js\",\"url\":\"blob:file:///6adf9599-cef2-49ea-8b0b-b5df2030ccec\",\"moduleSequenceNumber\":250252}],\"dependents\":[],\"ramUsage\":7.3,\"server\":\"home\",\"moduleSequenceNumber\":250252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { mapHosts } from \\\"/lib/util\\\";\\r\\nconst SPECIAL_HOSTS = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\nexport async function main(ns) {\\r\\n    const hostPaths = mapHosts(ns);\\r\\n    for (const hostname of SPECIAL_HOSTS) {\\r\\n        const path = hostPaths[hostname];\\r\\n        if (!path)\\r\\n            continue;\\r\\n        let pathStr = \\\"\\\";\\r\\n        for (const curPath of path) {\\r\\n            if (pathStr === \\\"\\\")\\r\\n                pathStr = curPath;\\r\\n            else\\r\\n                pathStr = pathStr + \\\" -> \\\" + curPath;\\r\\n        }\\r\\n        ns.tprint(pathStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2UuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJ0cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXpGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRS9CLEtBQUssTUFBTSxRQUFRLElBQUksYUFBYSxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSTtZQUFFLFNBQVM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3hCLElBQUksT0FBTyxLQUFLLEVBQUU7Z0JBQUUsT0FBTyxHQUFHLE9BQU8sQ0FBQzs7Z0JBQ2pDLE9BQU8sR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztTQUM3QztRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdEI7QUFDTCxDQUFDIn0=\",\"filename\":\"trace.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///327a49b7-8e98-40a8-b1eb-a7a0bff74c04\",\"moduleSequenceNumber\":121807},{\"filename\":\"trace.js\",\"url\":\"blob:file:///eab06304-2750-4425-b2da-2462141ce83a\",\"moduleSequenceNumber\":121839}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":250221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"allow\\\", 1],\\r\\n    [\\\"reserve\\\", 0],\\r\\n    [\\\"quiet\\\", false],\\r\\n    [\\\"execute\\\", false],\\r\\n    [\\\"a\\\", 1],\\r\\n    [\\\"q\\\", false],\\r\\n    [\\\"e\\\", false],\\r\\n    [\\\"r\\\", 0],\\r\\n];\\r\\n// returns the actual number of servers to buy that would be better than the ones we already have\\r\\nfunction compareToActualServers(ns, ram, numServers) {\\r\\n    // find the number of servers we own that have ram sizes > ram\\r\\n    // ns.tprintf(\\\"comparing %s %s\\\", ram, numServers);\\r\\n    const betterServerCount = ns.getPurchasedServers().filter((x) => ns.getServerMaxRam(x) >= ram).length;\\r\\n    const freeSpots = ns.getPurchasedServerLimit() - betterServerCount;\\r\\n    return Math.min(numServers, freeSpots);\\r\\n}\\r\\nfunction getCurrentRamSize(ns) {\\r\\n    return ns.getPurchasedServers().reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0);\\r\\n}\\r\\nfunction getFinalRamSize(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        pservers.shift();\\r\\n    }\\r\\n    return pservers.reduce((tally, serverName) => tally + ns.getServerMaxRam(serverName), 0) + ram * numServers;\\r\\n}\\r\\nfunction buyServers(ns, ram, numServers) {\\r\\n    const pservers = ns.getPurchasedServers().sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\r\\n    const numToDelete = Math.max(pservers.length + numServers - ns.getPurchasedServerLimit(), 0);\\r\\n    const deleteServers = [];\\r\\n    for (let i = 0; i < numToDelete; i++) {\\r\\n        const pserver = pservers.shift();\\r\\n        if (pserver)\\r\\n            deleteServers.push(pserver);\\r\\n    }\\r\\n    for (const server of deleteServers) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Deleting %s with %d RAM\\\", server, ns.getServerMaxRam(server));\\r\\n        ns.killall(server);\\r\\n        ns.deleteServer(server);\\r\\n    }\\r\\n    let serverIndex = 0;\\r\\n    function getNextServerName() {\\r\\n        while (true) {\\r\\n            const serverName = \\\"pserv-\\\" + serverIndex;\\r\\n            if (!ns.getPurchasedServers().includes(serverName))\\r\\n                return serverName;\\r\\n            else\\r\\n                serverIndex++;\\r\\n        }\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n    const cost = ns.getPurchasedServerCost(ram);\\r\\n    for (let i = 0; i < numServers; i++) {\\r\\n        const serverName = getNextServerName();\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Buying %s with %d RAM for %s\\\", serverName, ram, ns.nFormat(cost, \\\"($0.000a)\\\"));\\r\\n        ns.purchaseServer(serverName, ram);\\r\\n    }\\r\\n    return cost * numServers;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    options = ns.flags(argsSchema);\\r\\n    options.allow = options.allow !== 1 ? options.allow : options.a;\\r\\n    options.quiet = options.quiet || options.q;\\r\\n    options.execute = options.execute || options.e;\\r\\n    options.reserve = options.reserve ? options.reserve : options.o ? options.o : 0;\\r\\n    let maxPow = 8; // Minimum ram is 256\\r\\n    let sizes = [];\\r\\n    const cash = (ns.getPlayer().money - options.reserve) * options.allow;\\r\\n    if (cash < 0)\\r\\n        return;\\r\\n    const currentSize = getCurrentRamSize(ns);\\r\\n    while (true) {\\r\\n        const curRam = Math.pow(2, maxPow);\\r\\n        const cost = ns.getPurchasedServerCost(curRam);\\r\\n        if (cost <= cash) {\\r\\n            const numServers = compareToActualServers(ns, curRam, Math.min(Math.floor(cash / cost), ns.getPurchasedServerLimit()));\\r\\n            if (numServers > 0)\\r\\n                sizes.push([curRam, numServers, getFinalRamSize(ns, curRam, numServers)]);\\r\\n            maxPow++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (sizes.length === 0) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Not enough cash to buy an upgrade\\\");\\r\\n        return;\\r\\n    }\\r\\n    sizes = sizes.sort((a, b) => b[2] - a[2]);\\r\\n    const [ram, numServers, finalSize] = sizes[0];\\r\\n    for (const [ram, numServers, finalSize] of sizes) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"%s %s %s\\\", ram, numServers, finalSize);\\r\\n    }\\r\\n    if (!options.execute) {\\r\\n        if (!options.quiet)\\r\\n            ns.tprintf(\\\"Check: Buying %d %s servers, increasing the size from %d to %d for %s\\\", numServers, ns.nFormat(ram * 1e9, \\\"0b\\\"), currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n        return;\\r\\n    }\\r\\n    buyServers(ns, ram, numServers);\\r\\n    if (!options.quiet)\\r\\n        ns.tprintf(\\\"Increased available server ram from %d to %d for %s\\\", currentSize, finalSize, ns.nFormat(numServers * ns.getPurchasedServerCost(ram), \\\"($0.000a)\\\"));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X3NlcnZlcl9hbGwuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJidXlfc2VydmVyX2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSw4REFBOEQ7QUFDOUQsSUFBSSxPQUFZLENBQUM7QUFDakIsTUFBTSxVQUFVLEdBQXFEO0lBQ2pFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNaLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNkLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztJQUNoQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7SUFDbEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ1IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0NBQ1gsQ0FBQztBQUVGLGlHQUFpRztBQUNqRyxTQUFTLHNCQUFzQixDQUFDLEVBQU0sRUFBRSxHQUFXLEVBQUUsVUFBa0I7SUFDbkUsOERBQThEO0lBQzlELGtEQUFrRDtJQUNsRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEcsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsaUJBQWlCLENBQUM7SUFDbkUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxFQUFNO0lBQzdCLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLFVB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\",\"filename\":\"buy_server_all.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"buy_server_all.js\",\"url\":\"blob:file:///ef3347e2-c327-4952-9245-225a00be0a03\",\"moduleSequenceNumber\":251601}],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":251601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"reserve\\\", Number.MAX_SAFE_INTEGER],\\r\\n    [\\\"timer\\\", 0],\\r\\n];\\r\\nlet serverService;\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(\\\"/lib/exec/const_share.js\\\", \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    const pids = [];\\r\\n    for (const server of scriptableServers) {\\r\\n        const availableRam = server.availableRam();\\r\\n        const availableThreads = Math.floor(availableRam / ns.getScriptRam(\\\"/lib/exec/const_share.js\\\"));\\r\\n        if (availableThreads <= 0)\\r\\n            continue;\\r\\n        pids.push(ns.exec(\\\"/lib/exec/const_share.js\\\", server.hostname, availableThreads));\\r\\n    }\\r\\n    if (options.timer) {\\r\\n        await ns.sleep(options.timer * 1000);\\r\\n        for (const pid of pids) {\\r\\n            ns.kill(pid);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsSUFBSSxPQUFPLENBQUM7QUFDWixNQUFNLFVBQVUsR0FBcUQ7SUFDakUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDO0lBQ3BDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztDQUNmLENBQUM7QUFFRixJQUFJLGFBQTRCLENBQUM7QUFFakMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixJQUFJO1FBQ0EsT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0IsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3pDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixPQUFPO0tBQ1Y7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUU7UUFDL0MsRUFBRSxDQUFDLE9BQU8sQ0FBQyw0Q0FBNEMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsT0FBTztLQUNWO0lBRUQsTUFBTSxpQkFBaUIsR0FBRyxhQUFhLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTlFLEtBQUssTUFBTSxNQUFNLElBQUksaUJBQWlCLEVBQUU7UUFDcEMsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLE1BQU07WUFBRSxTQUFTO1FBQ3pDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JFO0lBRUQsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFBO0lBQ3pCLEtBQUssTUFBTSxNQUFNLElBQUksaUJBQWlCLEVBQUU7UUFDcEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzNDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUM7UUFFaEcsSUFBSSxnQkFBZ0IsSUFBSSxDQUFDO1lBQUUsU0FBUztRQUVwQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7S0FDckY7SUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDZixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztRQUVyQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUNwQixFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hCO0tBQ0o7QUFDTCxDQUFDIn0=\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///7dd2d300-3f8e-4284-af48-111d742c407e\",\"moduleSequenceNumber\":250212},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///ba37b1be-d82b-41f2-9a57-6faf8772d324\",\"moduleSequenceNumber\":250213},{\"filename\":\"share.js\",\"url\":\"blob:file:///6ca33841-d213-4d7e-81b8-fe465ea55a3e\",\"moduleSequenceNumber\":250249}],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":250249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stdFormat } from \\\"/lib/util\\\";\\r\\nlet lastEl;\\r\\nconst roots = [];\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    if (ms <= 0)\\r\\n        return \\\"--\\\";\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\nfunction insertAfter(newNode, existingNode) {\\r\\n    if (!existingNode.parentNode)\\r\\n        throw \\\"insertAfter init failed\\\";\\r\\n    if (existingNode.nextSibling)\\r\\n        return existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\\r\\n    else\\r\\n        return existingNode.parentNode.appendChild(newNode);\\r\\n}\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const newRootEl = hookRootEl?.cloneNode(true);\\r\\n    if (!hookRootEl || !newRootEl)\\r\\n        throw \\\"addBottomLine init failed\\\";\\r\\n    const child1 = newRootEl?.children[0]?.children[0];\\r\\n    if (child1) {\\r\\n        child1.innerText = \\\"\\\";\\r\\n    }\\r\\n    const child2 = newRootEl?.children[0]?.children[0];\\r\\n    if (child2) {\\r\\n        child2.innerText = \\\"\\\";\\r\\n        child2.removeAttribute(\\\"id\\\");\\r\\n    }\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addBottomLine init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newRootEl;\\r\\n}\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl = newRootEl?.children[0]?.firstChild;\\r\\n    if (!hookRootEl || !newRootEl || !newEl)\\r\\n        throw \\\"addSingle init failed\\\";\\r\\n    if (newRootEl?.childNodes[1])\\r\\n        newRootEl.removeChild(newRootEl.childNodes[1]);\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addSingle init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newEl;\\r\\n}\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl1 = newRootEl?.children[0]?.children[0];\\r\\n    const newEl2 = newRootEl?.children[1]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!hookRootEl || !newRootEl || !newEl1 || !newEl2)\\r\\n        throw \\\"addDouble init failed\\\";\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addDouble init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackProgressEl = overviewEl?.children[3];\\r\\n    const newRootEl = hackProgressEl?.cloneNode(true);\\r\\n    const newSub1 = newRootEl?.children[0]?.children[0];\\r\\n    const newSub2 = newRootEl?.children[0]?.children[0]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!newRootEl || !newSub1 || !newSub2)\\r\\n        throw \\\"addProgress init failed\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = newRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addProgress init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) {\\r\\n            root.parentNode?.removeChild(root);\\r\\n        }\\r\\n    });\\r\\n    try {\\r\\n        const [clockEl, karmaEl] = addDouble();\\r\\n        const targetEl = addSingle();\\r\\n        const incomeEl = addSingle();\\r\\n        const [stateEl, countdownEl] = addDouble();\\r\\n        const [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n        addBottomLine();\\r\\n        // target faction\\r\\n        // target rep (rep/s) || target money\\r\\n        // current rep | rep countdown time\\r\\n        // rep progress\\r\\n        const [factionTarget, factionTargetMoney] = addDouble();\\r\\n        const [factionTargetRep, factionTargetEndTime] = addDouble();\\r\\n        const [factionRepTotal, factionCountdown] = addDouble();\\r\\n        const [factionProgress1, factionProgress2] = addProgress();\\r\\n        addBottomLine();\\r\\n        karmaEl.classList.toggle(\\\"makeStyles-hack-17\\\", false);\\r\\n        karmaEl.classList.add(\\\"makeStyles-hp-15\\\");\\r\\n        const port1 = ns.getPortHandle(1);\\r\\n        const factionPort = ns.getPortHandle(2);\\r\\n        let startTime = 0;\\r\\n        let endTime = 1000;\\r\\n        let fullTime = 1000;\\r\\n        while (true) {\\r\\n            if (!port1.empty()) {\\r\\n                const data = JSON.parse(port1.peek().toString());\\r\\n                startTime = new Date(data[0]).getTime();\\r\\n                endTime = new Date(startTime + data[1]).getTime();\\r\\n                fullTime = endTime - startTime;\\r\\n                const date = new Date();\\r\\n                const curTime = date.getTime();\\r\\n                // Update Clock\\r\\n                // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n                // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                // Update Karma\\r\\n                karmaEl.innerText = `k: ${ns.heart.break().toFixed(0)}`;\\r\\n                // Update Target & Income\\r\\n                targetEl.innerText = data[2];\\r\\n                incomeEl.innerText = data[3];\\r\\n                // Update State & Countdown\\r\\n                stateEl.innerText = data[4];\\r\\n                countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n                // Update Progress\\r\\n                const tvalue = curTime - startTime;\\r\\n                const nvalue = (tvalue / fullTime) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (startTime === 0 || wholeValue > 100) {\\r\\n                    port1.clear();\\r\\n                    transform = 100;\\r\\n                    wholeValue = 0;\\r\\n                }\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                const date = new Date();\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                karmaEl.innerText = ns.heart.break().toFixed(0).toString();\\r\\n                targetEl.innerText = \\\"NO TARGET\\\";\\r\\n                incomeEl.innerText = \\\"\\\";\\r\\n                stateEl.innerText = \\\"\\\";\\r\\n                countdownEl.innerText = \\\"\\\";\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n            }\\r\\n            if (!factionPort.empty()) {\\r\\n                const data = JSON.parse(factionPort.peek().toString());\\r\\n                // Update Faction Name\\r\\n                const factionName = data[0];\\r\\n                factionTarget.innerText = factionName;\\r\\n                // Update Faction Rep Target\\r\\n                // target rep (rep/s)\\r\\n                const repTarget = Number(data[1]);\\r\\n                const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                factionTargetRep.innerText = ns.sprintf(\\\"%s (%s/s)    \\\", ns.nFormat(repTarget, \\\"0.00a\\\"), ns.nFormat(repGainPerMs * 1000, \\\"0.00a\\\"));\\r\\n                // update Money Target\\r\\n                factionTargetMoney.innerText = ns.nFormat(data[2], \\\"$0.00a\\\");\\r\\n                // Update Current Faction Rep\\r\\n                const currentRep = ns.singularity.getFactionRep(factionName) +\\r\\n                    (ns.getPlayer().currentWorkFactionName === factionName ? ns.getPlayer().workRepGained : 0);\\r\\n                factionRepTotal.innerText = ns.nFormat(currentRep, \\\"0.00a\\\");\\r\\n                // Update Rep Countdown Timer\\r\\n                if (repGainPerMs > 0) {\\r\\n                    factionTargetEndTime.innerText = stdFormat(ns, (repTarget - currentRep) / repGainPerMs);\\r\\n                    factionCountdown.innerText = stFormat(ns, (repTarget - currentRep) / repGainPerMs, false);\\r\\n                }\\r\\n                else {\\r\\n                    factionTargetEndTime.innerText = \\\"--\\\";\\r\\n                    factionCountdown.innerText = \\\"--\\\";\\r\\n                }\\r\\n                // Update Progress\\r\\n                const tvalue = currentRep;\\r\\n                const nvalue = (tvalue / repTarget) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (wholeValue > 100) {\\r\\n                    transform = 0;\\r\\n                    wholeValue = 100;\\r\\n                }\\r\\n                factionProgress1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                factionProgress2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                factionTarget.innerText = \\\"\\\";\\r\\n                factionTargetRep.innerText = \\\"\\\";\\r\\n                factionTargetMoney.innerText = \\\"\\\";\\r\\n                factionRepTotal.innerText = \\\"\\\";\\r\\n                factionCountdown.innerText = \\\"\\\";\\r\\n                factionTargetEndTime.innerText = \\\"\\\";\\r\\n                factionProgress1.setAttribute(\\\"aria-valuenow\\\", \\\"100\\\");\\r\\n                factionProgress2.setAttribute(\\\"style\\\", \\\"transform: translateX(-0%);\\\");\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjbG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXRDLElBQUksTUFBbUIsQ0FBQztBQUN4QixNQUFNLEtBQUssR0FBa0IsRUFBRSxDQUFDO0FBRWhDLFNBQVMsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLElBQUksRUFBRSxRQUFRLEdBQUcsS0FBSztJQUNqRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFekIsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxRQUFRLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUMzQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUM7SUFFOUIsSUFBSSxNQUFNLEVBQUU7UUFDUixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksUUFBUTtZQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0Is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\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f01e6335-dcc1-4808-9817-24ee37805f35\",\"moduleSequenceNumber\":250212},{\"filename\":\"clock.js\",\"url\":\"blob:file:///bc0bfb6c-ef3d-48ea-b335-78848ea5ec1a\",\"moduleSequenceNumber\":250248}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":250248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    function favorToRep(f) {\\r\\n        const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log(r / 25000 + 1) / Math.log(1.02);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n    for (const faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.singularity.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(ns.getFavorToDonate());\\r\\n        const currentRep = ns.singularity.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n        const fTotal = repToFavor(currentRep + storedRep);\\r\\n        const fGain = fTotal - favor;\\r\\n        if (favor > 150)\\r\\n            continue;\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 150) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJmYXZvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELFNBQVMsVUFBVSxDQUFDLENBQVM7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7SUFDM0UsQ0FBQztJQUVELEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMzQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUNwRCxNQUFNLFVBQVUsR0FDWixFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7WUFDckMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNqRCxNQUFNLFFBQVEsR0FBRyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBRXhDLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFDbEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUU3QixJQUFJLEtBQUssR0FBRyxHQUFHO1lBQUUsU0FBUztRQUUxQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxLQUFLLEdBQUcsS0FBSyxHQUFHLEdBQUcsRUFBRTtZQUNyQixVQUFVLEdBQUcsWUFBWSxDQUFDO1NBQzdCO1FBRUQsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLElBQUksUUFBUSxHQUFHLFNBQVMsRUFBRTtZQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUN2RjtRQUVELEVBQUUsQ0FBQyxPQUFPLENBQUMsOEJBQThCLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDekc7QUFDTCxDQUFDIn0=\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///5abd1cb3-4e0b-4d00-8605-9c926a8f2364\",\"moduleSequenceNumber\":73163}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":250225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Augmentation } from \\\"/lib/augmentation/augmentation\\\";\\r\\nimport { doBuyAndSoftenAll, getAugmentationPriceMultiplier } from \\\"/lib/util\\\";\\r\\nvar ControllerState;\\r\\n(function (ControllerState) {\\r\\n    ControllerState[ControllerState[\\\"init\\\"] = -1] = \\\"init\\\";\\r\\n    ControllerState[ControllerState[\\\"rep\\\"] = 0] = \\\"rep\\\";\\r\\n    ControllerState[ControllerState[\\\"hack\\\"] = 1] = \\\"hack\\\";\\r\\n    ControllerState[ControllerState[\\\"exp\\\"] = 2] = \\\"exp\\\";\\r\\n    ControllerState[ControllerState[\\\"join\\\"] = 3] = \\\"join\\\";\\r\\n    ControllerState[ControllerState[\\\"cct\\\"] = 4] = \\\"cct\\\";\\r\\n    ControllerState[ControllerState[\\\"buying\\\"] = 5] = \\\"buying\\\";\\r\\n})(ControllerState || (ControllerState = {}));\\r\\nconst CS = ControllerState;\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nconst augTargets = [\\r\\n    {\\r\\n        faction: \\\"Tian Di Hui\\\",\\r\\n        aug: \\\"Social Negotiation Assistant (S.N.A)\\\",\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"CyberSec\\\",\\r\\n        aug: \\\"Cranial Signal Processors - Gen I\\\",\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"NiteSec\\\",\\r\\n        aug: \\\"CRTX42-AA Gene Modification\\\",\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"The Black Hand\\\",\\r\\n        aug: \\\"The Black Hand\\\",\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"Chongqing\\\",\\r\\n        aug: \\\"Neuregen Gene Modification\\\",\\r\\n        allbuy: true,\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"BitRunners\\\",\\r\\n        aug: \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"Daedalus\\\",\\r\\n        aug: \\\"The Red Pill\\\",\\r\\n    },\\r\\n];\\r\\nconst backupTargets = [\\r\\n    {\\r\\n        faction: \\\"Sector-12\\\",\\r\\n        aug: \\\"CashRoot Starter Kit\\\",\\r\\n        allbuy: true,\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"Ishima\\\",\\r\\n        aug: \\\"INFRARET Enhancement\\\",\\r\\n        allbuy: true,\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"Volhaven\\\",\\r\\n        aug: \\\"Combat Rib II\\\",\\r\\n        allbuy: true,\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"New Tokyo\\\",\\r\\n        aug: \\\"NutriGen Implant\\\",\\r\\n        allbuy: true,\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"Tian Di Hui\\\",\\r\\n        aug: \\\"Neuroreceptor Management Implant\\\",\\r\\n        allbuy: true,\\r\\n    },\\r\\n    {\\r\\n        faction: \\\"Aevum\\\",\\r\\n        aug: \\\"PCMatrix\\\",\\r\\n        allbuy: true,\\r\\n    },\\r\\n];\\r\\nfunction favorToRep(f) {\\r\\n    const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n    return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"brutessh\\\");\\r\\n    ns.disableLog(\\\"ftpcrack\\\");\\r\\n    ns.disableLog(\\\"httpworm\\\");\\r\\n    ns.disableLog(\\\"relaysmtp\\\");\\r\\n    ns.disableLog(\\\"sqlinject\\\");\\r\\n    ns.disableLog(\\\"nuke\\\");\\r\\n    //ns.tail();\\r\\n    if (ns.getRunningScript(\\\"clock.js\\\", \\\"home\\\") === null)\\r\\n        ns.exec(\\\"clock.js\\\", \\\"home\\\");\\r\\n    let state = CS.init;\\r\\n    let waitPID = 0;\\r\\n    let doExp = true;\\r\\n    const [targetAug, installNonHackAugs] = getTargetAug(ns);\\r\\n    let targetCash = getTargetCash(ns, targetAug);\\r\\n    const favor = ns.singularity.getFactionFavor(targetAug.faction);\\r\\n    const storedRep = Math.max(0, favorToRep(favor));\\r\\n    const donateRep = favorToRep(ns.getFavorToDonate());\\r\\n    const donateRep15Percent = donateRep * 0.15;\\r\\n    let repPerSec = ns.getPlayer().workRepGainRate * 5;\\r\\n    // update targetAug.rep to something managable\\r\\n    if (favor < ns.getFavorToDonate() && targetAug.rep > favorToRep(ns.getFavorToDonate())) {\\r\\n        if (storedRep < donateRep15Percent) {\\r\\n            targetAug.rep = donateRep15Percent - storedRep;\\r\\n            targetCash = 0;\\r\\n        }\\r\\n        else if (storedRep < donateRep) {\\r\\n            targetAug.rep = donateRep - storedRep;\\r\\n            targetCash = 0;\\r\\n        }\\r\\n    }\\r\\n    // update targetCash if we will need to donate to get the target aug\\r\\n    if (favor >= ns.getFavorToDonate()) {\\r\\n        targetCash += 1e6 * (targetAug.rep / ns.getPlayer().faction_rep_mult);\\r\\n    }\\r\\n    const port = ns.getPortHandle(2);\\r\\n    port.clear();\\r\\n    port.write(JSON.stringify([targetAug.faction, targetAug.rep, targetCash]));\\r\\n    const stateInterval = setInterval(() => {\\r\\n        const runningScript = ns.getRunningScript(waitPID);\\r\\n        if (runningScript && state === CS.rep) {\\r\\n            repPerSec = ns.getPlayer().workRepGainRate * 5;\\r\\n        }\\r\\n        // detect state transition\\r\\n        if (runningScript === null) {\\r\\n            waitPID = 0;\\r\\n            switch (state) {\\r\\n                case CS.init:\\r\\n                case CS.buying:\\r\\n                    state = CS.rep;\\r\\n                    break;\\r\\n                case CS.rep:\\r\\n                    state = CS.hack;\\r\\n                    break;\\r\\n                case CS.hack:\\r\\n                    if (doExp) {\\r\\n                        state = CS.exp;\\r\\n                        doExp = false;\\r\\n                    }\\r\\n                    else {\\r\\n                        state = CS.join;\\r\\n                    }\\r\\n                    break;\\r\\n                case CS.exp:\\r\\n                    state = CS.join;\\r\\n                    break;\\r\\n                case CS.join:\\r\\n                    state = CS.cct;\\r\\n                    break;\\r\\n                case CS.cct:\\r\\n                    state = CS.buying;\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        // if no processes are running, try to run one depending on the current state\\r\\n        if (waitPID === 0) {\\r\\n            const incomePerSec = ns.getScriptIncome(ns.getScriptName(), \\\"home\\\", ...ns.args);\\r\\n            const secondsToTargetCash = incomePerSec > 0 ? (targetCash - ns.getPlayer().money) / incomePerSec : 0;\\r\\n            switch (state) {\\r\\n                case CS.rep:\\r\\n                    waitPID = ns.exec(\\\"share.js\\\", \\\"home\\\", 1, \\\"--reserve\\\", 0, \\\"--timer\\\", 2.5);\\r\\n                    break;\\r\\n                case CS.hack: {\\r\\n                    const currentRep = ns.singularity.getFactionRep(targetAug.faction) +\\r\\n                        (ns.getPlayer().currentWorkFactionName === targetAug.faction\\r\\n                            ? ns.getPlayer().workRepGained\\r\\n                            : 0);\\r\\n                    const secondsToTargetRep = repPerSec > 0 ? (targetAug.rep - currentRep) / repPerSec : 0;\\r\\n                    const maxTargetTime = Math.max(secondsToTargetCash, secondsToTargetRep, 10 * 60);\\r\\n                    if (targetCash - ns.getPlayer().money <= 0) {\\r\\n                        waitPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", maxTargetTime / 60, \\\"--rounds\\\", 1);\\r\\n                    }\\r\\n                    else {\\r\\n                        waitPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", maxTargetTime / 60, \\\"--rounds\\\", 1, \\\"--goal\\\", targetCash - ns.getPlayer().money);\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n                case CS.exp:\\r\\n                    doBuyAndSoftenAll(ns);\\r\\n                    waitPID = ns.exec(\\\"exp.js\\\", \\\"home\\\", 1, \\\"--reserve\\\", HOME_RESERVE_RAM, \\\"--timer\\\", 60);\\r\\n                    break;\\r\\n                case CS.join:\\r\\n                    waitPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1, \\\"-c\\\");\\r\\n                    break;\\r\\n                case CS.cct:\\r\\n                    if (ns.getPlayer().factions.length > 0)\\r\\n                        waitPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n                    break;\\r\\n                case CS.buying:\\r\\n                    if (secondsToTargetCash > 20 * 60) {\\r\\n                        if (ns.getPlayer().money > ns.singularity.getUpgradeHomeRamCost())\\r\\n                            ns.singularity.upgradeHomeRam();\\r\\n                        waitPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"-qe\\\");\\r\\n                    }\\r\\n                    else {\\r\\n                        if (ns.getPlayer().money - targetCash > ns.singularity.getUpgradeHomeRamCost())\\r\\n                            ns.singularity.upgradeHomeRam();\\r\\n                        waitPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--reserve\\\", targetCash, \\\"-qe\\\");\\r\\n                    }\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n    while (true) {\\r\\n        const currentRep = ns.singularity.getFactionRep(targetAug.faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === targetAug.faction ? ns.getPlayer().workRepGained : 0);\\r\\n        // If we have the red pill and we can hack the world daemon, ascend\\r\\n        if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\") &&\\r\\n            ns.singularity.getOwnedAugmentations().includes(\\\"The Red Pill\\\"))\\r\\n            ns.exec(\\\"ascend.js\\\", \\\"home\\\");\\r\\n        // If we havent joined the target faction yet, try to join it and get to work\\r\\n        if (ns.singularity.checkFactionInvitations().includes(targetAug.faction)) {\\r\\n            ns.singularity.joinFaction(targetAug.faction);\\r\\n            ns.singularity.workForFaction(targetAug.faction, \\\"Hacking Contracts\\\", true);\\r\\n        }\\r\\n        // Check to see if we can install augs and reset\\r\\n        if ((favor >= ns.getFavorToDonate() || currentRep >= targetAug.rep) && ns.getPlayer().money >= targetCash) {\\r\\n            clearInterval(stateInterval);\\r\\n            ns.singularity.stopAction();\\r\\n            if (favor >= ns.getFavorToDonate() && currentRep < targetAug.rep) {\\r\\n                const donateAmt = 1e6 * ((targetAug.rep - currentRep) / ns.getPlayer().faction_rep_mult);\\r\\n                ns.singularity.donateToFaction(targetAug.faction, donateAmt);\\r\\n            }\\r\\n            const baFlags = installNonHackAugs ? \\\"-gn\\\" : \\\"-g\\\";\\r\\n            const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, baFlags);\\r\\n            while (ns.getRunningScript(mcpPID) !== null)\\r\\n                await ns.asleep(10);\\r\\n            ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n        }\\r\\n        await ns.asleep(1000);\\r\\n    }\\r\\n}\\r\\nfunction getTargetAug(ns) {\\r\\n    // check to see what faction should be targeted\\r\\n    // 1) tian di hui 6.25k - Social Negotiation Assistant (S.N.A)\\r\\n    // 2) cybersec to 10k - Cranial Signal Processors - Gen I\\r\\n    // 3) Nitesec 45k - CRTX42-AA Gene Modification\\r\\n    // 4) The Black Hand 100k\\r\\n    // 5) Bitrunners repToDonate() * 0.15\\r\\n    // 6) Bitrunners repToDonate()\\r\\n    // 7) Bitrunners Donate\\r\\n    // 8) Daedalus repToDonate() * 0.15\\r\\n    // 9) Daedalus repToDonate()\\r\\n    // 10) Daedalus Donate\\r\\n    // 11) World Daemon\\r\\n    let targetAug;\\r\\n    let installNonHackAugs = false;\\r\\n    for (const augTarget of augTargets) {\\r\\n        targetAug = new Augmentation(ns, augTarget.aug, augTarget.faction);\\r\\n        installNonHackAugs = !!augTarget.allbuy;\\r\\n        if (!targetAug.owned)\\r\\n            break;\\r\\n    }\\r\\n    // if we're out of augs to purchase (end of line is TRP), buy 10 NFGs from BitRunners at a time\\r\\n    if (!targetAug || targetAug.owned) {\\r\\n        const multmult = getAugmentationPriceMultiplier(ns);\\r\\n        targetAug = new Augmentation(ns, \\\"NeuroFlux Governor\\\", \\\"BitRunners\\\");\\r\\n        for (let i = 0; i < 10; i++) {\\r\\n            targetAug.rep *= 1.14;\\r\\n            targetAug.price = targetAug.price * 1.14 * multmult;\\r\\n        }\\r\\n        return [targetAug, true];\\r\\n    }\\r\\n    // override target aug if we're targeting Daedalus but we dont have enough augments banked\\r\\n    if (targetAug.faction === \\\"Daedalus\\\" &&\\r\\n        ns.singularity.getOwnedAugmentations().length < ns.getBitNodeMultipliers().DaedalusAugsRequirement) {\\r\\n        for (const augTarget of backupTargets) {\\r\\n            targetAug = new Augmentation(ns, augTarget.aug, augTarget.faction);\\r\\n            installNonHackAugs = !!augTarget.allbuy;\\r\\n            if (!targetAug.owned)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return [targetAug, installNonHackAugs];\\r\\n}\\r\\nfunction getTargetCash(ns, targetAug) {\\r\\n    if (targetAug.name === \\\"NeuroFlux Governor\\\")\\r\\n        return targetAug.price;\\r\\n    let targetCash = 0;\\r\\n    const multmult = getAugmentationPriceMultiplier(ns);\\r\\n    const augs = ns.singularity\\r\\n        .getAugmentationsFromFaction(targetAug.faction)\\r\\n        .map((name) => {\\r\\n        return new Augmentation(ns, name, targetAug.faction);\\r\\n    })\\r\\n        .filter((a) => a.rep <= targetAug.rep && !a.owned && !a.installed)\\r\\n        .sort((a, b) => a.rep - b.rep);\\r\\n    let multpow = 0;\\r\\n    for (const aug of augs) {\\r\\n        targetCash += aug.price * Math.pow(multmult, multpow);\\r\\n        multpow++;\\r\\n    }\\r\\n    return targetCash;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWNwLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibWNwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFOUUsSUFBSyxlQVFKO0FBUkQsV0FBSyxlQUFlO0lBQ2hCLHNEQUFTLENBQUE7SUFDVCxtREFBRyxDQUFBO0lBQ0gscURBQUksQ0FBQTtJQUNKLG1EQUFHLENBQUE7SUFDSCxxREFBSSxDQUFBO0lBQ0osbURBQUcsQ0FBQTtJQUNILHlEQUFNLENBQUE7QUFDVixDQUFDLEVBUkksZUFBZSxLQUFmLGVBQWUsUUFRbkI7QUFFRCxNQUFNLEVBQUUsR0FBRyxlQUFlLENBQUM7QUFFM0IsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFRN0IsTUFBTSxVQUFVLEdBQWdCO0lBQzVCO1FBQ0ksT0FBTyxFQUFFLGFBQWE7UUFDdEIsR0FBRyxFQUFFLHNDQUFzQztLQUM5QztJQUNEO1FBQ0ksT0FBTyxFQUFFLFVBQVU7UUFDbkIsR0FBRyxFQUFFLG1DQUFtQztLQUMzQztJQUNEO1FBQ0ksT0FBTyxFQUFFLFNBQVM7UUFDbEIsR0FBRyxFQUFFLDZCQUE2QjtLQUNyQztJQUNEO1FBQ0ksT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixHQUFHLEVBQUUsZ0JBQWdCO0tBQ3hCO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsV0FBVztRQUNwQixHQUFHLEVBQUUsNEJBQTRCO1FBQ2pDLE1BQU0sRUFBRSxJQUFJO0tBQ2Y7SUFDRDtRQUNJLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLEdBQUcsRUFBRSwyQ0FBMkM7S0FDbkQ7SUFDRDtRQUNJLE9BQU8sRUFBRSxVQUFVO1FBQ25CLEdBQUcsRUFBRSxjQUFjO0tBQ3RCO0NBQ0osQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFnQjtJQUMvQjtRQUNJLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLEdBQUcsRUFBRSxzQkFBc0I7UUFDM0IsTUFBTSxFQUFFLElBQUk7S0FDZjtJQUNEO1FBQ0ksT0FBTyxFQUFFLFFBQVE7UUFDakIsR0FBRyxFQUFFLHNCQUFzQjtRQUMzQixNQUFNLEVBQUUsSUFBSTtLQUNmO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsVUFBVTtRQUNuQixHQUFHLEVBQUUsZUFBZTtRQUNwQixNQUFNLEVBQUUsSUFBSTtLQUNmO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsV0FBVztRQUNwQixHQUFHLEVBQUUsa0JBQWtCO1FBQ3ZCLE1BQU0sRUFBRSxJQUFJO0tBQ2Y7SUFDRDtRQUNJLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLEdBQUcsRUFBRSxrQ0FBa0M7UUFDdkMsTUFBTSxFQUFFLElBQUk7S0FDZjtJQUNEO1FBQ0ksT0FBTyxFQUFFLE9BQU87UUFDaEIsR0FBRyxFQUFFLFVBQVU7UUFDZixNQUFNLEVBQUUsSUFBSTtLQUNmO0NBQ0osQ0FBQztBQUVGLFNBQVMsVUFBVSxDQUFDLENBQVM7SUFDekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQywrQkFBK0I7QUFDM0UsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQixFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXRCLFlBQVk7SUFFWixJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEtBQUssSUFBSTtRQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRWxGLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDcEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztJQUNqQixNQUFNLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELElBQUksVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztJQUM1QyxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztJQUVuRCw4Q0FBOEM7SUFDOUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixFQUFFLElBQUksU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBRTtRQUNwRixJQUFJLFNBQVMsR0FBRyxrQkFBa0IsRUFBRTtZQUNoQyxTQUFTLENBQUMsR0FBRyxHQUFHLGtCQUFrQixHQUFHLFNBQVMsQ0FBQztZQUMvQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO2FBQU0sSUFBSSxTQUFTLEdBQUcsU0FBUyxFQUFFO1lBQzlCLFNBQVMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUN0QyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO0tBQ0o7SUFFRCxvRUFBb0U7SUFDcEUsSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7UUFDaEMsVUFBVSxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUM7S0FDekU7SUFFRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtRQUNuQyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkQsSUFBSSxhQUFhLElBQUksS0FBSyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUU7WUFDbkMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsMEJBQTBCO1FBQzFCLElBQUksYUFBYSxLQUFLLElBQUksRUFBRTtZQUN4QixPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ1osUUFBUSxLQUFLLEVBQUU7Z0JBQ1gsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDO2dCQUNiLEtBQUssRUFBRSxDQUFDLE1BQU07b0JBQ1YsS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7b0JBQ2YsTUFBTTtnQkFDVixLQUFLLEVBQUUsQ0FBQyxHQUFHO29CQUNQLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO29CQUNoQixNQUFNO2dCQUNWLEtBQUssRUFBRSxDQUFDLElBQUk7b0JBQ1IsSUFBSSxLQUFLLEVBQUU7d0JBQ1AsS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7d0JBQ2YsS0FBSyxHQUFHLEtBQUssQ0FBQztxQkFDakI7eUJBQU07d0JBQ0gsS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7cUJBQ25CO29CQUNELE1BQU07Z0JBQ1YsS0FBSyxFQUFFLENBQUMsR0FBRztvQkFDUCxLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztvQkFDaEIsTUFBTTtnQkFDVixLQUFLLEVBQUUsQ0FBQyxJQUFJO29CQUNSLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO29CQUNmLE1BQU07Z0JBQ1YsS0FBSyxFQUFFLENBQUMsR0FBRztvQkFDUCxLQUFLLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQztvQkFDbEIsTUFBTTthQUNiO1NBQ0o7UUFFRCw2RUFBNkU7UUFDN0UsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQ2YsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hGLE1BQU0sbUJBQW1CLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXRHLFFBQVEsS0FBSyxFQUFFO2dCQUNYLEtBQUssRUFBRSxDQUFDLEdBQUc7b0JBQ1AsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3pFLE1BQU07Z0JBQ1YsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ1YsTUFBTSxVQUFVLEdBQ1osRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQzt3QkFDL0MsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLEtBQUssU0FBUyxDQUFDLE9BQU87NEJBQ3hELENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYTs0QkFDOUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUViLE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4RixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLGtCQUFrQixFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFFakYsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssSUFBSSxDQUFDLEVBQUU7d0JBQ3hDLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLEdBQUcsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDekY7eUJBQU07d0JBQ0gsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQ2IsU0FBUyxFQUNULE1BQU0sRUFDTixDQUFDLEVBQ0QsU0FBUyxFQUNULGFBQWEsR0FBRyxFQUFFLEVBQ2xCLFVBQVUsRUFDVixDQUFDLEVBQ0QsUUFBUSxFQUNSLFVBQVUsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUNwQyxDQUFDO3FCQUNMO29CQUNELE1BQU07aUJBQ1Q7Z0JBQ0QsS0FBSyxFQUFFLENBQUMsR0FBRztvQkFDUCxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDdEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDckYsTUFBTTtnQkFDVixLQUFLLEVBQUUsQ0FBQyxJQUFJO29CQUNSLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUM5QyxNQUFNO2dCQUNWLEtBQUssRUFBRSxDQUFDLEdBQUc7b0JBQ1AsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDO3dCQUFFLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQy9FLE1BQU07Z0JBQ1YsS0FBSyxFQUFFLENBQUMsTUFBTTtvQkFDVixJQUFJLG1CQUFtQixHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7d0JBQy9CLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFOzRCQUM3RCxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDO3dCQUVwQyxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3FCQUM1RDt5QkFBTTt3QkFDSCxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEdBQUcsVUFBVSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUU7NEJBQzFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUM7d0JBRXBDLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztxQkFDckY7b0JBRUQsTUFBTTthQUNiO1NBQ0o7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxFQUFFO1FBQ1QsTUFBTSxVQUFVLEdBQ1osRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztZQUMvQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVyRyxtRUFBbUU7UUFDbkUsSUFDSSxFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDLGNBQWMsQ0FBQztZQUN4RSxFQUFFLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztZQUUvRCxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVqQyw2RUFBNkU7UUFDN0UsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLHVCQUF1QixFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN0RSxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMvRTtRQUVELGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLFVBQVUsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssSUFBSSxVQUFVLEVBQUU7WUFDdkcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRTdCLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7WUFFNUIsSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDLGdCQUFnQixFQUFFLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQzlELE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDekYsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQzthQUNoRTtZQUVELE1BQU0sT0FBTyxHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNsRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzFELE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUk7Z0JBQUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWpFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNsQztRQUVELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QjtBQUNMLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxFQUFNO0lBQ3hCLCtDQUErQztJQUMvQyw4REFBOEQ7SUFDOUQseURBQXlEO0lBQ3pELCtDQUErQztJQUMvQyx5QkFBeUI7SUFDekIscUNBQXFDO0lBQ3JDLDhCQUE4QjtJQUM5Qix1QkFBdUI7SUFDdkIsbUNBQW1DO0lBQ25DLDRCQUE0QjtJQUM1QixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBRW5CLElBQUksU0FBbUMsQ0FBQztJQUN4QyxJQUFJLGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUMvQixLQUFLLE1BQU0sU0FBUyxJQUFJLFVBQVUsRUFBRTtRQUNoQyxTQUFTLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25FLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSztZQUFFLE1BQU07S0FDL0I7SUFFRCwrRkFBK0Y7SUFDL0YsSUFBSSxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQy9CLE1BQU0sUUFBUSxHQUFHLDhCQUE4QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDckUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QixTQUFTLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQztZQUN0QixTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLFFBQVEsQ0FBQztTQUN2RDtRQUNELE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUI7SUFFRCwwRkFBMEY7SUFDMUYsSUFDSSxTQUFTLENBQUMsT0FBTyxLQUFLLFVBQVU7UUFDaEMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQyx1QkFBdUIsRUFDcEc7UUFDRSxLQUFLLE1BQU0sU0FBUyxJQUFJLGFBQWEsRUFBRTtZQUNuQyxTQUFTLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25FLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSztnQkFBRSxNQUFNO1NBQy9CO0tBQ0o7SUFFRCxPQUFPLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEVBQU0sRUFBRSxTQUF1QjtJQUNsRCxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssb0JBQW9CO1FBQUUsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBRXBFLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNuQixNQUFNLFFBQVEsR0FBRyw4QkFBOEIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVztTQUN0QiwyQkFBMkIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1NBQzlDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ1YsT0FBTyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ2pFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNoQixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUNwQixVQUFVLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RCxPQUFPLEVBQUUsQ0FBQztLQUNiO0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDdEIsQ0FBQyJ9\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///052ffe2d-236d-4bfa-a9b3-8c3b9ef9321d\",\"moduleSequenceNumber\":250212},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///338ec2d7-a214-414c-ac65-71e30a5924ee\",\"moduleSequenceNumber\":250212},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///2c59fd42-8db1-494e-bab5-416a51c526e2\",\"moduleSequenceNumber\":250227},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///729e963c-9a7c-44ee-89f9-faab1236feff\",\"moduleSequenceNumber\":250247}],\"dependents\":[],\"ramUsage\":64.25,\"server\":\"home\",\"moduleSequenceNumber\":250247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\n// AUG NOTES:\\r\\n// CyberSec - Cranial Signal Processors - $70m [10k]\\r\\n// NiteSec - CRTX42-AA Gene Modification - $225m [45k]\\r\\n// The Black Hand - The Black Hand - $550m [100k]\\r\\nexport class Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.singularity.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.singularity.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.singularity.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.singularity.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.singularity.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.singularity.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.singularity.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    printAugStats(ns) {\\r\\n        for (const [key, val] of Object.entries(this.stats)) {\\r\\n            ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n        }\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful(all = false) {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        if (all)\\r\\n            return true;\\r\\n        // if (this.stats.crime_money_mult) return true;\\r\\n        // if (this.stats.crime_success_mult) return true;                    \\r\\n        if (this.stats.company_rep_mult)\\r\\n            return true;\\r\\n        if (this.stats.faction_rep_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_money_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_money_mult) return true;\\r\\n        // if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2F1Z21lbnRhdGlvbi9hdWdtZW50YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVwQyxhQUFhO0FBQ2Isb0RBQW9EO0FBQ3BELHNEQUFzRDtBQUN0RCxpREFBaUQ7QUFFakQsTUFBTSxPQUFPLFlBQVk7SUFDckIsSUFBSSxDQUFTO0lBQ2IsT0FBTyxDQUFTO0lBQ2hCLEtBQUssQ0FBUztJQUNkLEdBQUcsQ0FBUztJQUNaLEtBQUssQ0FBb0I7SUFDekIsS0FBSyxDQUFVO0lBQ2YsU0FBUyxDQUFVO0lBQ25CLFlBQVksQ0FBVTtJQUN0QixHQUFHLENBQVM7SUFDWixHQUFHLENBQVM7SUFFWixZQUFZLEVBQU0sRUFBRSxJQUFZLEVBQUUsT0FBZTtRQUM3QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUM3RCxNQUFNLFVBQVUsR0FDWixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RixFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMs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\",\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.1,\"server\":\"home\",\"moduleSequenceNumber\":250227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat } from \\\"lib/util\\\";\\r\\n// AUG NOTES:\\r\\n// CyberSec - Cranial Signal Processors - $70m [10k]\\r\\n// NiteSec - CRTX42-AA Gene Modification - $225m [45k]\\r\\n// The Black Hand - The Black Hand - $550m [100k]\\r\\nexport class Augmentation {\\r\\n    name;\\r\\n    faction;\\r\\n    price;\\r\\n    rep;\\r\\n    stats;\\r\\n    owned;\\r\\n    installed;\\r\\n    purchaseable;\\r\\n    dep;\\r\\n    str;\\r\\n    constructor(ns, name, faction) {\\r\\n        const ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        const installedAugs = ns.getOwnedAugmentations();\\r\\n        const factionRep = (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep === undefined || ownedAugs.includes(dep) || installedAugs.includes(dep))\\r\\n            dep = \\\"\\\";\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n                ? \\\"OWNED\\\"\\r\\n                : this.purchaseable\\r\\n                    ? \\\"PURCHASEABLE\\\"\\r\\n                    : \\\"\\\";\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            const repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\\"%s: %s - %s [%s] %s\\\", this.faction, this.name, ns.nFormat(this.price, \\\"$0.000a\\\"), ns.nFormat(this.rep, \\\"0.000a\\\"), installedStr);\\r\\n    }\\r\\n    printAugStats(ns) {\\r\\n        for (const [key, val] of Object.entries(this.stats)) {\\r\\n            ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n        }\\r\\n    }\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n    isHackUseful() {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\")\\r\\n            return false;\\r\\n        return true;\\r\\n        // if (this.stats.crime_money_mult) return true;\\r\\n        // if (this.stats.crime_success_mult) return true;                    \\r\\n        // if (this.stats.company_rep_mult) return true;\\r\\n        // if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_exp_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_grow_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult)\\r\\n            return true;\\r\\n        if (this.stats.hacking_speed_mult)\\r\\n            return true;\\r\\n        // if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_money_mult) return true;\\r\\n        // if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        // if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\")\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXVnbWVudGF0aW9uL2F1Z21lbnRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDLGFBQWE7QUFDYixvREFBb0Q7QUFDcEQsc0RBQXNEO0FBQ3RELGlEQUFpRDtBQUVqRCxNQUFNLE9BQU8sWUFBWTtJQUNyQixJQUFJLENBQVM7SUFDYixPQUFPLENBQVM7SUFDaEIsS0FBSyxDQUFTO0lBQ2QsR0FBRyxDQUFTO0lBQ1osS0FBSyxDQUFvQjtJQUN6QixLQUFLLENBQVU7SUFDZixTQUFTLENBQVU7SUFDbkIsWUFBWSxDQUFVO0lBQ3RCLEdBQUcsQ0FBUztJQUNaLEdBQUcsQ0FBUztJQUVaLFlBQVksRUFBTSxFQUFFLElBQVksRUFBRSxPQUFlO1FBQzdDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNqRCxNQUFNLFVBQVUsR0FDWixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RixFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsR0FB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\",\"filename\":\"/augmentation/augmentation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.1,\"server\":\"home\",\"moduleSequenceNumber\":250228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { canBackdoor, doBackdoor } from \\\"lib/util\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nconst findProp = function (propName) {\\r\\n    for (const div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\r\\n        const propKey = Object.keys(div)[1];\\r\\n        if (!propKey)\\r\\n            continue;\\r\\n        const props = div[propKey];\\r\\n        if (props.children?.props && props.children.props[propName])\\r\\n            return props.children.props[propName];\\r\\n        if (props.children instanceof Array)\\r\\n            for (const child of props.children)\\r\\n                if (child?.props && child.props[propName])\\r\\n                    return child.props[propName];\\r\\n    }\\r\\n};\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet playerProp;\\r\\nfunction refreshInvitations() {\\r\\n    const factions = playerProp.checkForFactionInvitations();\\r\\n    for (const faction of factions) {\\r\\n        if (!faction.alreadyInvited) {\\r\\n            playerProp.receiveInvite(faction.name);\\r\\n            faction.alreadyInvited = true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"c\\\", false],\\r\\n    [\\\"t\\\", \\\"\\\"],\\r\\n    [\\\"target\\\", \\\"\\\"],\\r\\n];\\r\\nclass Faction {\\r\\n    name;\\r\\n    invited;\\r\\n    joined;\\r\\n    requirements;\\r\\n    constructor(ns, name, requirements) {\\r\\n        this.name = name;\\r\\n        this.invited = ns.singularity.checkFactionInvitations().includes(this.name);\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        this.requirements = requirements;\\r\\n    }\\r\\n    async getInvite(ns) {\\r\\n        refreshInvitations();\\r\\n        this.invited = ns.singularity.checkFactionInvitations().includes(this.name);\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        if (this.invited || this.joined)\\r\\n            return true;\\r\\n        if (!this.checkRequirements(ns))\\r\\n            return false;\\r\\n        // location check\\r\\n        if (this.requirements.locations) {\\r\\n            if (Array.isArray(this.requirements.locations)) {\\r\\n                if (!this.requirements.locations.includes(ns.getPlayer().location)) {\\r\\n                    ns.singularity.travelToCity(this.requirements.locations[0]);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                if (this.requirements.locations !== ns.getPlayer().location) {\\r\\n                    ns.singularity.travelToCity(this.requirements.locations);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // do backdoor\\r\\n        if (this.requirements.backdoor)\\r\\n            await doBackdoor(ns, this.requirements.backdoor);\\r\\n        refreshInvitations();\\r\\n        this.invited = ns.singularity.checkFactionInvitations().includes(this.name);\\r\\n        return this.invited;\\r\\n    }\\r\\n    async join(ns) {\\r\\n        this.joined = ns.getPlayer().factions.includes(this.name);\\r\\n        if (this.joined)\\r\\n            return true;\\r\\n        if (!(await this.getInvite(ns)))\\r\\n            return false;\\r\\n        return ns.singularity.joinFaction(this.name);\\r\\n    }\\r\\n    checkRequirements(ns, enforceLocation = false) {\\r\\n        let passed = true;\\r\\n        // location check\\r\\n        if (enforceLocation && this.requirements.locations) {\\r\\n            if (Array.isArray(this.requirements.locations)) {\\r\\n                passed &&= this.requirements.locations.includes(ns.getPlayer().location);\\r\\n            }\\r\\n            else {\\r\\n                passed &&= this.requirements.locations === ns.getPlayer().location;\\r\\n            }\\r\\n        }\\r\\n        if (this.requirements.daedalus && this.requirements.money && this.requirements.hacking) {\\r\\n            passed &&=\\r\\n                ns.getPlayer().money >= this.requirements.money || ns.getPlayer().hacking >= this.requirements.hacking;\\r\\n        }\\r\\n        else {\\r\\n            // money check\\r\\n            if (this.requirements.money) {\\r\\n                passed &&= ns.getPlayer().money >= this.requirements.money;\\r\\n            }\\r\\n            // hacking check\\r\\n            if (this.requirements.hacking) {\\r\\n                passed &&= ns.getPlayer().hacking >= this.requirements.hacking;\\r\\n            }\\r\\n        }\\r\\n        // karma check\\r\\n        if (this.requirements.karma) {\\r\\n            passed &&= ns.heart.break() <= this.requirements.karma;\\r\\n        }\\r\\n        // combat check\\r\\n        if (this.requirements.combat) {\\r\\n            passed &&= ns.getPlayer().strength >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().defense >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().dexterity >= this.requirements.combat;\\r\\n            passed &&= ns.getPlayer().agility >= this.requirements.combat;\\r\\n        }\\r\\n        // murder check\\r\\n        if (this.requirements.murder) {\\r\\n            passed &&= ns.getPlayer().numPeopleKilled >= this.requirements.murder;\\r\\n        }\\r\\n        // law check\\r\\n        if (this.requirements.law) {\\r\\n            //\\r\\n        }\\r\\n        // augmentations check\\r\\n        if (this.requirements.augmentations) {\\r\\n            passed &&= ns.singularity.getOwnedAugmentations().length >= this.requirements.augmentations;\\r\\n        }\\r\\n        // corporation check\\r\\n        if (this.requirements.corp && this.requirements.corporationRep) {\\r\\n            passed &&= ns.singularity.getCompanyRep(this.requirements.corp) >= this.requirements.corporationRep;\\r\\n        }\\r\\n        // businessLeader check\\r\\n        if (this.requirements.businessLeader) {\\r\\n            //\\r\\n        }\\r\\n        // hacknet check\\r\\n        if (this.requirements.hnServer) {\\r\\n            passed = false;\\r\\n        }\\r\\n        // backdoor check\\r\\n        if (this.requirements.backdoor) {\\r\\n            passed &&= canBackdoor(ns, this.requirements.backdoor);\\r\\n        }\\r\\n        return passed;\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    options.target = options.target !== \\\"\\\" ? options.target : options.t;\\r\\n    playerProp = findProp(\\\"player\\\");\\r\\n    if (!playerProp)\\r\\n        return;\\r\\n    // faction checklist so we dont try to get invites for factions we are already invited to / joined\\r\\n    const factions = {\\r\\n        CyberSec: new Faction(ns, \\\"CyberSec\\\", {\\r\\n            backdoor: \\\"CSEC\\\",\\r\\n        }),\\r\\n        NiteSec: new Faction(ns, \\\"NiteSec\\\", {\\r\\n            backdoor: \\\"avmnite-02h\\\",\\r\\n        }),\\r\\n        \\\"The Black Hand\\\": new Faction(ns, \\\"The Black Hand\\\", {\\r\\n            backdoor: \\\"I.I.I.I\\\",\\r\\n        }),\\r\\n        BitRunners: new Faction(ns, \\\"BitRunners\\\", {\\r\\n            backdoor: \\\"run4theh111z\\\",\\r\\n        }),\\r\\n        \\\"Tian Di Hui\\\": new Faction(ns, \\\"Tian Di Hui\\\", {\\r\\n            money: 1e6,\\r\\n            hacking: 50,\\r\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\r\\n        }),\\r\\n        Netburners: new Faction(ns, \\\"Netburners\\\", {\\r\\n            hacking: 80,\\r\\n            hnServer: true,\\r\\n        }),\\r\\n        \\\"Sector-12\\\": new Faction(ns, \\\"Sector-12\\\", {\\r\\n            money: 15e6,\\r\\n            locations: \\\"Sector-12\\\",\\r\\n        }),\\r\\n        Chongqing: new Faction(ns, \\\"Chongqing\\\", {\\r\\n            money: 20e6,\\r\\n            locations: \\\"Chongqing\\\",\\r\\n        }),\\r\\n        \\\"New Tokyo\\\": new Faction(ns, \\\"New Tokyo\\\", {\\r\\n            money: 20e6,\\r\\n            locations: \\\"New Tokyo\\\",\\r\\n        }),\\r\\n        Ishima: new Faction(ns, \\\"Ishima\\\", {\\r\\n            money: 30e6,\\r\\n            locations: \\\"Ishima\\\",\\r\\n        }),\\r\\n        Aevum: new Faction(ns, \\\"Aevum\\\", {\\r\\n            money: 40e6,\\r\\n            locations: \\\"Aevum\\\",\\r\\n        }),\\r\\n        Volhaven: new Faction(ns, \\\"Volhaven\\\", {\\r\\n            money: 50e6,\\r\\n            locations: \\\"Volhaven\\\",\\r\\n        }),\\r\\n        ECorp: new Faction(ns, \\\"ECorp\\\", {\\r\\n            corp: \\\"ECorp\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        MegaCorp: new Faction(ns, \\\"MegaCorp\\\", {\\r\\n            corp: \\\"MegaCorp\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"KuaiGong International\\\": new Faction(ns, \\\"KuaiGong International\\\", {\\r\\n            corp: \\\"KuaiGong International\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Four Sigma\\\": new Faction(ns, \\\"Four Sigma\\\", {\\r\\n            corp: \\\"Four Sigma\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        NWO: new Faction(ns, \\\"NWO\\\", {\\r\\n            corp: \\\"NWO\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Blade Industries\\\": new Faction(ns, \\\"Blade Industries\\\", {\\r\\n            corp: \\\"Blade Industries\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"OmniTek Incorporated\\\": new Faction(ns, \\\"OmniTek Incorporated\\\", {\\r\\n            corp: \\\"OmniTek Incorporated\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Bachman & Associates\\\": new Faction(ns, \\\"Bachman & Associates\\\", {\\r\\n            corp: \\\"Bachman & Associates\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Clarke Incorporated\\\": new Faction(ns, \\\"Clarke Incorporated\\\", {\\r\\n            corp: \\\"Clarke Incorporated\\\",\\r\\n            corporationRep: 200000,\\r\\n        }),\\r\\n        \\\"Fulcrum Secret Technologies\\\": new Faction(ns, \\\"Fulcrum Secret Technologies\\\", {\\r\\n            corp: \\\"Fulcrum Technologies\\\",\\r\\n            corporationRep: 250000,\\r\\n            backdoor: \\\"fulcrumassets\\\",\\r\\n        }),\\r\\n        \\\"Slum Snakes\\\": new Faction(ns, \\\"Slum Snakes\\\", {\\r\\n            karma: -9,\\r\\n            money: 1e6,\\r\\n            combat: 30,\\r\\n        }),\\r\\n        Tetrads: new Faction(ns, \\\"Tetrads\\\", {\\r\\n            karma: -18,\\r\\n            combat: 75,\\r\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\r\\n        }),\\r\\n        Silhouette: new Faction(ns, \\\"Silhouette\\\", {\\r\\n            karma: -22,\\r\\n            money: 15e6,\\r\\n            businessLeader: true,\\r\\n        }),\\r\\n        \\\"Speakers for the Dead\\\": new Faction(ns, \\\"Speakers for the Dead\\\", {\\r\\n            karma: -45,\\r\\n            hacking: 100,\\r\\n            combat: 300,\\r\\n            murder: 30,\\r\\n            law: true,\\r\\n        }),\\r\\n        \\\"The Dark Army\\\": new Faction(ns, \\\"The Dark Army\\\", {\\r\\n            karma: -45,\\r\\n            hacking: 300,\\r\\n            combat: 300,\\r\\n            murder: 5,\\r\\n            law: true,\\r\\n            locations: \\\"Chongqing\\\",\\r\\n        }),\\r\\n        \\\"The Syndicate\\\": new Faction(ns, \\\"The Syndicate\\\", {\\r\\n            karma: -90,\\r\\n            hacking: 200,\\r\\n            combat: 200,\\r\\n            money: 10e6,\\r\\n            law: true,\\r\\n            locations: [\\\"Aevum\\\", \\\"Sector-12\\\"],\\r\\n        }),\\r\\n        \\\"The Covenant\\\": new Faction(ns, \\\"The Covenant\\\", {\\r\\n            hacking: 850,\\r\\n            combat: 850,\\r\\n            money: 75e9,\\r\\n            augmentations: 20,\\r\\n        }),\\r\\n        Daedalus: new Faction(ns, \\\"Daedalus\\\", {\\r\\n            hacking: 2500,\\r\\n            combat: 1500,\\r\\n            money: 100e9,\\r\\n            augmentations: ns.getBitNodeMultipliers().DaedalusAugsRequirement,\\r\\n            daedalus: true,\\r\\n        }),\\r\\n        Illuminati: new Faction(ns, \\\"Illuminati\\\", {\\r\\n            hacking: 1500,\\r\\n            combat: 1200,\\r\\n            money: 150e9,\\r\\n            augmentations: 30,\\r\\n        }),\\r\\n    };\\r\\n    if (options.target) {\\r\\n        if (factions[options.target]) {\\r\\n            await factions[options.target].getInvite(ns);\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        for (const faction of Object.values(factions)) {\\r\\n            await faction.getInvite(ns);\\r\\n        }\\r\\n    }\\r\\n    // for (const faction of factions) {\\r\\n    // }\\r\\n    // city priority:\\r\\n    //   Chongqing [Neuregen Gene Modification]\\r\\n    //   Sector-12 [CashRoot Starter Kit]\\r\\n    //   Aevum [PCMatrix]\\r\\n    //   New Tokyo --\\r\\n    //   Ishima --\\r\\n    //   Volhaven --\\r\\n    if (options.c)\\r\\n        return;\\r\\n    if (ns.singularity.checkFactionInvitations().includes(\\\"Chongqing\\\") &&\\r\\n        !ns.singularity.getOwnedAugmentations(true).includes(\\\"Neuregen Gene Modification\\\")) {\\r\\n        await factions[\\\"Chongqing\\\"].join(ns);\\r\\n    }\\r\\n    if (ns.singularity.checkFactionInvitations().includes(\\\"Sector-12\\\") &&\\r\\n        !ns.singularity.getOwnedAugmentations(true).includes(\\\"CashRoot Starter Kit\\\")) {\\r\\n        await factions[\\\"Sector-12\\\"].join(ns);\\r\\n    }\\r\\n    if (ns.singularity.checkFactionInvitations().includes(\\\"Aevum\\\") && !ns.singularity.getOwnedAugmentations(true).includes(\\\"PCMatrix\\\")) {\\r\\n        await factions[\\\"Aevum\\\"].join(ns);\\r\\n    }\\r\\n    for (const faction of Object.values(factions)) {\\r\\n        await faction.join(ns);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImpvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbkQsOERBQThEO0FBQzlELE1BQU0sUUFBUSxHQUFHLFVBQVUsUUFBZ0I7SUFDdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTztZQUFFLFNBQVM7UUFDdkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRyxJQUFJLEtBQUssQ0FBQyxRQUFRLFlBQVksS0FBSztZQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO2dCQUFFLElBQUksS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkg7QUFDTCxDQUFDLENBQUM7QUFFRiw4REFBOEQ7QUFDOUQsSUFBSSxVQUFlLENBQUM7QUFFcEIsU0FBUyxrQkFBa0I7SUFDdkIsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLDBCQUEwQixFQUFFLENBQUM7SUFFekQsS0FBSyxNQUFNLE9B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\",\"filename\":\"join.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///5385f932-9c4f-4cb4-8c7f-9d1785f1b5eb\",\"moduleSequenceNumber\":250212},{\"filename\":\"join.js\",\"url\":\"blob:file:///66955210-48b6-4350-aac5-a2224d75d133\",\"moduleSequenceNumber\":251600}],\"dependents\":[],\"ramUsage\":26.65,\"server\":\"home\",\"moduleSequenceNumber\":251600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    for (const faction of ns.singularity.checkFactionInvitations()) {\\r\\n        ns.singularity.joinFaction(faction);\\r\\n    }\\r\\n    ns.singularity.softReset(ns.getScriptName());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQzVELEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZDO0lBR0QsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQyJ9\",\"filename\":\"int.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"int.js\",\"url\":\"blob:file:///c6fad107-bc81-4634-870b-5299a468dac0\",\"moduleSequenceNumber\":38579760}],\"dependents\":[],\"ramUsage\":12.6,\"server\":\"home\",\"moduleSequenceNumber\":250230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.softReset\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Fast hack using < 8GB footprint; Define simPlayer for a better experience (if you have Formulas.exe) but it puts it over 8GB.\\r\\nimport { HACKJS, GROWJS, WEAKENJS, llog, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst HOME_RESERVE_RAM = 16;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"n00dles\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    if ([\\\"--reserve\\\"].includes(lastFlag))\\r\\n        return [\\\"16\\\", \\\"32\\\", \\\"64\\\", \\\"128\\\"];\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    const weakenTimeShort = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    if (timeLimit > 10 * 60 * 60 * 1000)\\r\\n        timeLimit = weakenTimeShort * 2;\\r\\n    const batchCountLimit = Math.max(Math.floor((timeLimit - weakenTimeShort) / batchSpacer), 1);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    const batchCountMax = Math.min(Math.max(Math.floor(hackTimeLong / batchSpacer), 1), batchCountLimit);\\r\\n    // update batchCountMax to prevent time stretching when security isnt minimized\\r\\n    // if (targetServer.hackDifficulty - targetServer.minDifficulty > 0) {\\r\\n    //     const newBatchCountLimit = Math.max(Math.floor(weakenTimeShort / batchSpacer), 1);\\r\\n    //     llog(ns, \\\"Reducing batch count limit from %f to %f\\\", batchCountMax, batchCountLimit);\\r\\n    //     batchCountMax = Math.min(batchCountMax, batchCountLimit);\\r\\n    // }\\r\\n    // if (doLog)\\r\\n    //     llog(ns, \\\"timeLimit: %f; weakenTimeShort %f; batchCountLimit: %f\\\", timeLimit, weakenTimeShort, batchCountLimit);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    let totalMoney = 0;\\r\\n    let totalPercent = 0;\\r\\n    let batchID = 0;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        if (moneyDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Big Block %d\\\", bigBlock);\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                // Full weaken loop indicates we are done allocating batches\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            // if (doLog)\\r\\n            //     llog(\\r\\n            //         ns,\\r\\n            //         \\\"Reserving Batch %d H-%d HW-%d G-%d GW-%d; Big Block %d; Total %s (%.2f%%)\\\",\\r\\n            //         batchID,\\r\\n            //         hackThreads,\\r\\n            //         weakenHackThreads,\\r\\n            //         growThreads,\\r\\n            //         weakenGrowThreads,\\r\\n            //         bigBlock,\\r\\n            //         ns.nFormat(hackAmount, \\\"$0.000a\\\"),\\r\\n            //         (hackAmount / targetServer.moneyMax) * 100\\r\\n            //     );\\r\\n            reserveBatch(ns, targetServer, batchID++, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            totalMoney += hackAmount;\\r\\n            totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    return [batchID, totalMoney, totalPercent];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.disableLog(\\\"getHackingLevel\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    ns.tail();\\r\\n    let targetServer;\\r\\n    await doSoften(ns);\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    // if (!targetServer.canRunScripts()) {\\r\\n    //     ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetServer.hostname);\\r\\n    //     return;\\r\\n    // }\\r\\n    if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    const servers = serverService\\r\\n        .getScriptableServers(options.reserve)\\r\\n        .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n    const simPlayer = undefined; // ns.getPlayer();\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    while (true) {\\r\\n        let bestHackLimit = 0;\\r\\n        let bestHackLimitValue = 0;\\r\\n        for (const hackLimit of [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1]) {\\r\\n            targetServer.reload();\\r\\n            const [batchCount, totalMoney] = allocateBatches(ns, targetServer, servers, hackLimit, false, options.limit, simPlayer);\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Check %.3f - %d, %s, %s/s\\\",\\r\\n            //     hackLimit,\\r\\n            //     batchCount,\\r\\n            //     ns.nFormat(totalMoney, \\\"$0.000a\\\"),\\r\\n            //     ns.nFormat(value, \\\"$0.000a\\\")\\r\\n            // );\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer.reload();\\r\\n        const [batchCount, totalMoney, totalPercent] = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        // const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n        // const batchCountMax = Math.max(Math.floor(hackTimeLong / batchSpacer), 1);\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // ns.tprintf(\\\"Batches: %d\\\", batchCount);\\r\\n        // ns.tprintf(\\\"Target Time: %s\\\", stFormat(ns, hackTimeTarget, true));\\r\\n        // ns.tprintf(\\\"Hack Level          : %8.4f/%8.4f %s\\\", hackLevelCalc, hackLevel, stFormat(ns, hackTime, true));\\r\\n        // ns.tprintf(\\\"Grow Level          : %8.4f/%8.4f %s\\\", growLevelCalc, growLevel, stFormat(ns, growTime, true));\\r\\n        // ns.tprintf(\\\"Weaken Level        : %8.4f/%8.4f %s\\\", weakenLevelCalc, weakenLevel, stFormat(ns, weakenTime, true));\\r\\n        // ns.tprintf(\\\"Hack Timeline       : %6d %6d %6d\\\", hackOffset + startOffset, hackTime, hackOffset + startOffset + hackTime);\\r\\n        // ns.tprintf(\\\"Weaken Hack Timeline: %6d %6d %6d\\\", weakenHackOffset + startOffset, weakenTime, weakenHackOffset + startOffset + weakenTime);\\r\\n        // ns.tprintf(\\\"Grow Timeline       : %6d %6d %6d\\\", growOffset + startOffset, growTime, growOffset + startOffset + growTime);\\r\\n        // ns.tprintf(\\\"Weaken Grow Timeline: %6d %6d %6d\\\", weakenGrowOffset + startOffset, weakenTime, weakenGrowOffset + startOffset + weakenTime);\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n    }\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Executing %s:%s -t%d offset: %s\\\",\\r\\n            //     exec.hostname,\\r\\n            //     exec.filename,\\r\\n            //     exec.threads,\\r\\n            //     stFormat(ns, exec.offset, true)\\r\\n            // );\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"crawl.js\\\", \\\"home\\\", 1, \\\"-bs\\\", \\\"--suppress\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja18yLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrXzIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNklBQTZJO0FBRzdJLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQXFDLE1BQU0sa0JBQWtCLENBQUM7QUFFcEYsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBRXBCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQzVCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUNyQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBRXhCLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUV2QixTQUFTLHdCQUF3QixDQUFDLElBQXFCLEVBQUUsR0FBVyxFQUFFLEdBQWE7SUFDL0UsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUN2RCxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN0RixPQUFPO0FBQ1gsQ0FBQztBQVNELFNBQVMsbUJBQW1CLENBQUMsRUFBTSxFQUFFLE9BQWlCLEVBQUUsT0FBZ0I7SUFDcEUsc0dBQXNHO0lBQ3RHLE1BQU0sTUFBTSxHQUFHLE9BQU87U0FDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxD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\",\"filename\":\"/archive/hack_2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///e40fa039-e023-4830-8ec9-7a73cfc1bc19\",\"moduleSequenceNumber\":68},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///16227fd0-97f4-43e6-8a7e-44ab5546ea0a\",\"moduleSequenceNumber\":69},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f8b6086d-6896-4301-aad1-54c2ca3264c7\",\"moduleSequenceNumber\":68},{\"filename\":\"/archive/hack_2.js\",\"url\":\"blob:file:///38d7cbef-0d67-4820-83ee-f86676975ac1\",\"moduleSequenceNumber\":182}],\"dependents\":[],\"ramUsage\":8.85,\"server\":\"home\",\"moduleSequenceNumber\":250231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/src/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":250232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.tail();\\r\\n    // const crimes = [\\r\\n    //     \\\"shoplift\\\",\\r\\n    //     \\\"rob store\\\",\\r\\n    //     \\\"mug\\\",\\r\\n    //     \\\"larceny\\\",\\r\\n    //     \\\"drugs\\\",\\r\\n    //     \\\"bond forge\\\",\\r\\n    //     \\\"traffick arms\\\",\\r\\n    //     \\\"homicide\\\",\\r\\n    //     \\\"grand auto\\\",\\r\\n    //     \\\"kidnap\\\",\\r\\n    //     \\\"assassinate\\\",\\r\\n    //     \\\"heist\\\",\\r\\n    // ];\\r\\n    // for (const crimename of crimes) {\\r\\n    //     const crimeStats = ns.getCrimeStats(crimename);\\r\\n    //     ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    // }\\r\\n    let dynamic = true;\\r\\n    let crime = \\\"shoplift\\\";\\r\\n    if (ns.args[0]) {\\r\\n        crime = ns.args[0].toString();\\r\\n        dynamic = false;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (dynamic) {\\r\\n            if (ns.singularity.getCrimeChance(\\\"mug\\\") > 0.7)\\r\\n                crime = \\\"mug\\\";\\r\\n            if (ns.singularity.getCrimeChance(\\\"homicide\\\") > 0.7)\\r\\n                crime = \\\"homicide\\\";\\r\\n        }\\r\\n        await ns.sleep(ns.singularity.commitCrime(crime) + 200);\\r\\n    }\\r\\n    ns.singularity.workForFaction(\\\"NiteSec\\\", \\\"Field Work\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JpbWUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjcmltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRVYsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLEtBQUs7SUFFTCxvQ0FBb0M7SUFDcEMsc0RBQXNEO0lBQ3RELGlOQUFpTjtJQUNqTixJQUFJO0lBRUosSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWixLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLEdBQUcsS0FBSyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDVCxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRztnQkFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQzlELElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRztnQkFBRSxLQUFLLEdBQUcsVUFBVSxDQUFDO1NBQzNFO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0tBQzNEO0lBRUQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzNELENBQUMifQ==\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crime.js\",\"url\":\"blob:file:///b8faad77-7c83-45ba-acb3-77c301e98ff7\",\"moduleSequenceNumber\":156401}],\"dependents\":[],\"ramUsage\":14.6,\"server\":\"home\",\"moduleSequenceNumber\":250233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var FragmentType;\\r\\n(function (FragmentType) {\\r\\n    // Special fragments for the UI\\r\\n    FragmentType[FragmentType[\\\"None\\\"] = 0] = \\\"None\\\";\\r\\n    FragmentType[FragmentType[\\\"Delete\\\"] = 1] = \\\"Delete\\\";\\r\\n    // Stats boosting fragments\\r\\n    FragmentType[FragmentType[\\\"HackingChance\\\"] = 2] = \\\"HackingChance\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingSpeed\\\"] = 3] = \\\"HackingSpeed\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingMoney\\\"] = 4] = \\\"HackingMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HackingGrow\\\"] = 5] = \\\"HackingGrow\\\";\\r\\n    FragmentType[FragmentType[\\\"Hacking\\\"] = 6] = \\\"Hacking\\\";\\r\\n    FragmentType[FragmentType[\\\"Strength\\\"] = 7] = \\\"Strength\\\";\\r\\n    FragmentType[FragmentType[\\\"Defense\\\"] = 8] = \\\"Defense\\\";\\r\\n    FragmentType[FragmentType[\\\"Dexterity\\\"] = 9] = \\\"Dexterity\\\";\\r\\n    FragmentType[FragmentType[\\\"Agility\\\"] = 10] = \\\"Agility\\\";\\r\\n    FragmentType[FragmentType[\\\"Charisma\\\"] = 11] = \\\"Charisma\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetMoney\\\"] = 12] = \\\"HacknetMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"HacknetCost\\\"] = 13] = \\\"HacknetCost\\\";\\r\\n    FragmentType[FragmentType[\\\"Rep\\\"] = 14] = \\\"Rep\\\";\\r\\n    FragmentType[FragmentType[\\\"WorkMoney\\\"] = 15] = \\\"WorkMoney\\\";\\r\\n    FragmentType[FragmentType[\\\"Crime\\\"] = 16] = \\\"Crime\\\";\\r\\n    FragmentType[FragmentType[\\\"Bladeburner\\\"] = 17] = \\\"Bladeburner\\\";\\r\\n    // utility fragments.\\r\\n    FragmentType[FragmentType[\\\"Booster\\\"] = 18] = \\\"Booster\\\";\\r\\n})(FragmentType || (FragmentType = {}));\\r\\nfunction fragmentTypeEffect(tpe) {\\r\\n    switch (tpe) {\\r\\n        case FragmentType.HackingChance: {\\r\\n            return \\\"+x% hack() success chance\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingSpeed: {\\r\\n            return \\\"+x% faster hack(), grow(), and weaken()\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingMoney: {\\r\\n            return \\\"+x% hack() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HackingGrow: {\\r\\n            return \\\"+x% grow() power\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Hacking: {\\r\\n            return \\\"+x% hacking skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Strength: {\\r\\n            return \\\"+x% strength skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Defense: {\\r\\n            return \\\"+x% defense skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Dexterity: {\\r\\n            return \\\"+x% dexterity skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Agility: {\\r\\n            return \\\"+x% agility skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Charisma: {\\r\\n            return \\\"+x% charisma skill\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetMoney: {\\r\\n            return \\\"+x% hacknet production\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.HacknetCost: {\\r\\n            return \\\"x% cheaper hacknet cost\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Rep: {\\r\\n            return \\\"+x% reputation from factions and companies\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.WorkMoney: {\\r\\n            return \\\"+x% work money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Crime: {\\r\\n            return \\\"+x% crime money\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Bladeburner: {\\r\\n            return \\\"+x% all bladeburner stats\\\";\\r\\n            break;\\r\\n        }\\r\\n        case FragmentType.Booster: {\\r\\n            return \\\"Booster\\\";\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    throw new Error(\\\"Calling effect for fragment type that doesn't have an effect \\\" + tpe);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const fragmentDefs = ns.stanek.fragmentDefinitions();\\r\\n    for (const fragmentDef of fragmentDefs) {\\r\\n        ns.tprintf(\\\"%s %s %s %s %s\\\", fragmentDef.id, fragmentDef.limit, fragmentDef.power, fragmentDef.shape, fragmentTypeEffect(fragmentDef.type));\\r\\n    }\\r\\n    // useful hack fragment id's are\\r\\n    // 0 1    S  +x% hacking skill  0,1\\r\\n    // 1 1    Z  +x% hacking skill  0,1\\r\\n    // 5 1.3  T  +x% faster HGW     0,1,2,3\\r\\n    // 6 2    I  +x% hack() power   0,1\\r\\n    // 7 0.5  J  +x% grow() power   0,1,2,3\\r\\n    // array of fragments, each fragment is an ID and an array of valid rotations\\r\\n    const fragmentIDs = [\\r\\n        //[100, [0, 1, 2, 3]], // 4\\r\\n        [0, [0, 1]],\\r\\n        //[101, [0, 1, 2, 3]], // 4\\r\\n        [1, [0, 1]],\\r\\n        //[102, [0, 1, 2, 3]], // 4\\r\\n        [5, [0, 1, 2, 3]],\\r\\n        //[103, [0, 1, 2, 3]], // 4\\r\\n        [6, [0, 1]],\\r\\n        //[104, [0, 1, 2, 3]], // 4\\r\\n        [7, [0, 1, 2, 3]],\\r\\n        //[105, [0, 1, 2, 3]], // 4\\r\\n        [25, [0, 1, 2, 3]],\\r\\n        //[106, [0, 1, 2, 3]], // 4\\r\\n        [28, [0, 1, 2, 3]], // 4\\r\\n        // [107, [0, 1, 2, 3]], // 4\\r\\n    ];\\r\\n    // a valid configuration is if all pieces can be placed\\r\\n    // try to place each piece\\r\\n    // if we hit a piece that cant be placed, iterate over all rotations\\r\\n    // if all rotations cant be placed, move to next cell and iterate over all rotations\\r\\n    // if all cells have been checked, roll back to earlier piece and rotate it.\\r\\n    ns.stanek.clearGift();\\r\\n    let watchdog = 0;\\r\\n    async function doPlacement(frag, x, y, rot) {\\r\\n        if (watchdog++ % 1000 === 0) {\\r\\n            await ns.sleep(0);\\r\\n        }\\r\\n        //ns.tprintf(\\\"Attempting to place %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n        if (ns.stanek.placeFragment(x, y, rot, fragmentIDs[frag][0])) {\\r\\n            if (frag === fragmentIDs.length - 1)\\r\\n                return true;\\r\\n            //ns.tprintf(\\\"Placed %d at %d,%d,%d\\\", fragmentIDs[frag][0], x, y, rot);\\r\\n            if (!(await doPlacement(frag + 1, 0, 0, 0))) {\\r\\n                // ns.tprintf(\\r\\n                //     \\\"Failed to place %d in current board, rolling back %d at %d,%d,%d\\\",\\r\\n                //     fragmentIDs[frag + 1][0],\\r\\n                //     fragmentIDs[frag][0],\\r\\n                //     x,\\r\\n                //     y,\\r\\n                //     rot\\r\\n                // );\\r\\n                ns.stanek.removeFragment(x, y);\\r\\n            }\\r\\n            else {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        if (rot + 1 < fragmentIDs[frag][1].length)\\r\\n            return await doPlacement(frag, x, y, rot + 1);\\r\\n        if (x + 1 < ns.stanek.giftWidth())\\r\\n            return await doPlacement(frag, x + 1, y, 0);\\r\\n        if (y + 1 < ns.stanek.giftHeight())\\r\\n            return await doPlacement(frag, 0, y + 1, 0);\\r\\n        return false;\\r\\n    }\\r\\n    await doPlacement(0, 0, 0, 0);\\r\\n    for (const fragment of ns.stanek.activeFragments()) {\\r\\n        ns.tprintf(\\\"%s %s %s %s\\\", fragment.id, fragment.x, fragment.y, fragment.rotation);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmVrLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3RhbmVrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUssWUF5Qko7QUF6QkQsV0FBSyxZQUFZO0lBQ2IsK0JBQStCO0lBQy9CLCtDQUFJLENBQUE7SUFDSixtREFBTSxDQUFBO0lBRU4sMkJBQTJCO0lBQzNCLGlFQUFhLENBQUE7SUFDYiwrREFBWSxDQUFBO0lBQ1osK0RBQVksQ0FBQTtJQUNaLDZEQUFXLENBQUE7SUFDWCxxREFBTyxDQUFBO0lBQ1AsdURBQVEsQ0FBQTtJQUNSLHFEQUFPLENBQUE7SUFDUCx5REFBUyxDQUFBO0lBQ1Qsc0RBQU8sQ0FBQTtJQUNQLHdEQUFRLENBQUE7SUFDUixnRUFBWSxDQUFBO0lBQ1osOERBQVcsQ0FBQTtJQUNYLDhDQUFHLENBQUE7SUFDSCwwREFBUyxDQUFBO0lBQ1Qsa0RBQUssQ0FBQTtJQUNMLDhEQUFXLENBQUE7SUFFWCxxQkFBcUI7SUFDckIsc0RBQU8sQ0FBQTtBQUNYLENBQUMsRUF6QkksWUFBWSxLQUFaLFlBQVksUUF5QmhCO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxHQUFpQjtJQUN6QyxRQUFRLEdBQUcsRUFBRTtRQUNULEtBQUssWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sMkJBQTJCLENBQUM7WUFDbkMsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUIsT0FBTyx5Q0FBeUMsQ0FBQztZQUNqRCxNQUFNO1NBQ1Q7UUFDRCxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QixPQUFPLGtCQUFrQixDQUFDO1lBQzFCLE1BQU07U0FDVDtRQUNELEtBQUssWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sa0JBQWtCLENBQUM7WUFDMUIsTUFBTTtTQUNUO1FBQ0QsS0FBSyxZQUFZLENB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\",\"filename\":\"stanek.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stanek.js\",\"url\":\"blob:file:///dbff1e3f-8e80-4462-82c6-90172926f74c\",\"moduleSequenceNumber\":73980}],\"dependents\":[],\"ramUsage\":12.55,\"server\":\"home\",\"moduleSequenceNumber\":250234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.placeFragment\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.removeFragment\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.giftWidth\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.giftHeight\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerService } from \\\"/services/server\\\";\\r\\nlet options;\\r\\nconst argsSchema = [[\\\"reserve\\\", Number.MAX_SAFE_INTEGER]];\\r\\nlet serverService;\\r\\nconst CHARGEJS = \\\"/lib/stanek/charge.js\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"scp\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.tail();\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    const fragments = ns.stanek.activeFragments().filter((x) => x.id < 100);\\r\\n    const scriptableServers = serverService.getScriptableServers(options.reserve);\\r\\n    for (const server of scriptableServers) {\\r\\n        if (server.hostname === \\\"home\\\")\\r\\n            continue;\\r\\n        await ns.scp(CHARGEJS, \\\"home\\\", server.hostname);\\r\\n    }\\r\\n    const availableThreadsTotal = scriptableServers.reduce((input, server) => input + Math.floor(server.threadsAvailable(ns.getScriptRam(CHARGEJS))), 0);\\r\\n    ns.tprintf(\\\"available threads: %d\\\", availableThreadsTotal);\\r\\n    const fragSplit = Math.floor(availableThreadsTotal / fragments.length);\\r\\n    ns.tprintf(\\\"Frags %d\\\", fragments.length);\\r\\n    ns.tprintf(\\\"Split %d\\\", fragSplit);\\r\\n    for (const fragment of fragments) {\\r\\n        let threadsRemaining = fragSplit;\\r\\n        for (const server of scriptableServers) {\\r\\n            server.reload();\\r\\n            const availableThreads = Math.floor(server.threadsAvailable(ns.getScriptRam(CHARGEJS)));\\r\\n            const usingThreads = Math.min(threadsRemaining, availableThreads);\\r\\n            if (usingThreads <= 0)\\r\\n                continue;\\r\\n            const pid = ns.exec(CHARGEJS, server.hostname, usingThreads, fragment.x, fragment.y);\\r\\n            threadsRemaining -= usingThreads;\\r\\n            if (threadsRemaining <= 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiY2hhcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxJQUFJLE9BQU8sQ0FBQztBQUNaLE1BQU0sVUFBVSxHQUFxRCxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFFNUcsSUFBSSxhQUE0QixDQUFDO0FBQ2pDLE1BQU0sUUFBUSxHQUFHLHVCQUF1QixDQUFDO0FBRXpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVWLElBQUk7UUFDQSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtRQUMvQyxFQUFFLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxPQUFPO0tBQ1Y7SUFFRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN4RSxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUUsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtRQUNwQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFDekMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsTUFBTSxxQkFBcUIsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQ2xELENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUN6RixDQUFDLENBQ0osQ0FBQztJQUVGLEVBQUUsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMzRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV2RSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFbEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsSUFBSSxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDakMsS0FBSyxNQUFNLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtZQUNwQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDaEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFbEUsSUFBSSxZQUFZLElBQUksQ0FBQztnQkFBRSxTQUFTO1lBRWhDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXJGLGdCQUFnQixJQUFJLFlBQVksQ0FBQztZQUVqQyxJQUFJLGdCQUFnQixJQUFJLENBQUM7Z0JBQUUsTUFBTTtTQUNwQztLQUNKO0FBQ0wsQ0FBQyJ9\",\"filename\":\"charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///f8a0e222-84df-4133-bc8b-1e7e5915ddc2\",\"moduleSequenceNumber\":43},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///a44ebbb7-ff82-483e-b69a-425834826731\",\"moduleSequenceNumber\":44},{\"filename\":\"charge.js\",\"url\":\"blob:file:///f3eee896-9eee-4a6f-a1d0-f2542ea2c967\",\"moduleSequenceNumber\":140}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":250235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.chargeFragment(Number(ns.args[0]), Number(ns.args[1]));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL3N0YW5lay9jaGFyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUU7QUFDTCxDQUFDIn0=\",\"filename\":\"/lib/stanek/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/stanek/charge.js\",\"url\":\"blob:file:///1dea4df2-ecba-4cae-b3a8-941df9ca23ca\",\"moduleSequenceNumber\":226}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":250236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Joining factions gives a small amount of int xp.\\r\\n// With singularity functions, soft reset, and the 10 corp factions you can create a script that farms int xp rather quickly.\\r\\n// This would be faster than the below travel-based method, which has been nerfed quite heavily\\r\\n/** @param {NS} ns\\r\\n * Script contributed by https://github.com/ShawnPatton\\r\\n * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\r\\nexport async function main(ns) {\\r\\n    //disableLogs(ns, [\\\"travelToCity\\\", \\\"sleep\\\"]);\\r\\n    ns.tail();\\r\\n    const tripsPerCycle = 1000;\\r\\n    const moneyThreshold = 1000000000000;\\r\\n    let previousInt = ns.getPlayer().intelligence;\\r\\n    let currentInt = previousInt;\\r\\n    let previousLevelTime = Date.now();\\r\\n    let levelupTime;\\r\\n    let cycles = 0;\\r\\n    let duration = 0;\\r\\n    let tripsPerLevel = 0;\\r\\n    let tripsPerMs = 0;\\r\\n    ns.print(`Starting Script at Int ` + currentInt);\\r\\n    while (true) {\\r\\n        while (ns.getPlayer().money > moneyThreshold) {\\r\\n            for (let i = 0; i < tripsPerCycle; i++) {\\r\\n                ns.singularity.travelToCity(\\\"Aevum\\\");\\r\\n                ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            }\\r\\n            await ns.sleep(1);\\r\\n            cycles++;\\r\\n            if (previousInt != ns.getPlayer().intelligence) {\\r\\n                currentInt = ns.getPlayer().intelligence;\\r\\n                levelupTime = Date.now();\\r\\n                duration = levelupTime - previousLevelTime;\\r\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\r\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\r\\n                // ns.print(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\r\\n                //     + formatDuration(duration) + ` & ` + formatNumberShort(tripsPerLevel) + ` Travels`);\\r\\n                ns.print(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\r\\n                previousLevelTime = levelupTime;\\r\\n                previousInt = currentInt;\\r\\n                cycles = 0;\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10000);\\r\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50XzEuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJhcmNoaXZlL2ludF8xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHlEQUF5RDtBQUN6RCw2SEFBNkg7QUFDN0gsK0ZBQStGO0FBRS9GOzt5SkFFeUo7QUFDekosTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3Qiw2Q0FBNkM7SUFDN0MsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztJQUNyQyxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWSxDQUFDO0lBQzlDLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztJQUM3QixJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNuQyxJQUFJLFdBQVcsQ0FBQztJQUNoQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDZixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNuQixFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sSUFBSSxFQUFFO1FBQ1QsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxHQUFHLGNBQWMsRUFBRTtZQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwQyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDckMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDNUM7WUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsTUFBTSxFQUFFLENBQUM7WUFDVCxJQUFJLFdBQVcsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWSxFQUFFO2dCQUM1QyxVQUFVLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDekMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDekIsUUFBUSxHQUFHLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztnQkFDM0MsYUFBYSxHQUFHLE1BQU0sR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLENBQUM7Z0JBQ2xELCtGQUErRjtnQkFDL0YsMkZBQTJGO2dCQUMzRixFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUMvRCxpQkFBaUIsR0FBRyxXQUFXLENBQUM7Z0JBQ2hDLFdBQVcsR0FBRyxVQUFVLENBQUM7Z0JBQ3pCLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDZDtTQUNKO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztLQUN6RDtBQUNMLENBQUMifQ==\",\"filename\":\"/archive/int_1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":250237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { permlog, stFormat } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    await permlog(ns, \\\"Ascending after %s [%s since the start of BitNode %s]\\\", stFormat(ns, ns.getPlayer().playtimeSinceLastAug), stFormat(ns, ns.getPlayer().playtimeSinceLastBitnode), ns.getPlayer().bitNodeN);\\r\\n    ns.singularity.destroyW0r1dD43m0n(12, \\\"starter.js\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNjZW5kLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXNjZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTlDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxPQUFPLENBQ1QsRUFBRSxFQUNGLHVEQUF1RCxFQUN2RCxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUNqRCxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxFQUNyRCxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUMxQixDQUFDO0lBQ0YsRUFBRSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDdkQsQ0FBQyJ9\",\"filename\":\"ascend.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///3070ab61-d132-40f5-ac56-b089fc673f29\",\"moduleSequenceNumber\":837526},{\"filename\":\"ascend.js\",\"url\":\"blob:file:///d3fcd415-9e25-43d0-8528-15d5dcf5b5f3\",\"moduleSequenceNumber\":838586}],\"dependents\":[],\"ramUsage\":34.1,\"server\":\"home\",\"moduleSequenceNumber\":250238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.destroyW0r1dD43m0n\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// DESCRIPTION: Fast hack using < 8GB footprint; Define simPlayer for a better experience (if you have Formulas.exe) but it puts it over 8GB.\\r\\nimport { HACKJS, GROWJS, WEAKENJS, llog, stFormat } from \\\"/lib/util\\\";\\r\\nimport { ServerService, Server } from \\\"/services/server\\\";\\r\\nconst TSPACER = 400;\\r\\nconst HOME_RESERVE_RAM = 16;\\r\\nconst HACK_RAM = 1.7;\\r\\nconst GROW_RAM = 1.75;\\r\\nconst WEAKEN_RAM = 1.75;\\r\\nconst SCRIPT_GAP = 400;\\r\\nfunction updateScriptExecutionArg(exec, arg, val) {\\r\\n    const argIndex = exec.args.findIndex((a) => a === arg);\\r\\n    if (argIndex !== -1 && argIndex + 1 < exec.args.length)\\r\\n        exec.args[argIndex + 1] = val;\\r\\n    return;\\r\\n}\\r\\nfunction testAllocateBatches(ns, servers, batches) {\\r\\n    // all hack threads and grow threads need to be allocated in a block, weaken threads can be spread out\\r\\n    const blocks = servers\\r\\n        .map((a) => a.availableRam())\\r\\n        .filter((a) => a > 0)\\r\\n        .sort((a, b) => a - b);\\r\\n    // attempt to reserve hack threads\\r\\n    for (const batch of batches) {\\r\\n        const hackThreadBlockSize = batch.hackThreads * HACK_RAM;\\r\\n        let hackReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (hackThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= hackThreadBlockSize;\\r\\n                hackReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!hackReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve grow threads\\r\\n    for (const batch of batches) {\\r\\n        const growThreadBlockSize = batch.growThreads * GROW_RAM;\\r\\n        let growReserveSuccess = false;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (growThreadBlockSize <= blockSize) {\\r\\n                blocks[i] -= growThreadBlockSize;\\r\\n                growReserveSuccess = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!growReserveSuccess)\\r\\n            return false;\\r\\n    }\\r\\n    // attempt to reserve weaken threads\\r\\n    for (const batch of batches) {\\r\\n        let weakenThreadsRemaining = batch.weakenGrowThreads + batch.weakenHackThreads;\\r\\n        for (const [i, blockSize] of blocks.entries()) {\\r\\n            if (WEAKEN_RAM <= blockSize) {\\r\\n                const weakenThreadsAllocate = Math.min(weakenThreadsRemaining, Math.floor(blockSize / WEAKEN_RAM));\\r\\n                blocks[i] -= weakenThreadsAllocate * WEAKEN_RAM;\\r\\n                weakenThreadsRemaining -= weakenThreadsAllocate;\\r\\n                if (weakenThreadsRemaining <= 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        if (weakenThreadsRemaining > 0)\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction testAllocateThreads(ns, servers, hackThreads, growThreads, weakenThreads) {\\r\\n    return testAllocateBatches(ns, servers, [\\r\\n        {\\r\\n            hackThreads: hackThreads,\\r\\n            growThreads: growThreads,\\r\\n            weakenHackThreads: weakenThreads,\\r\\n            weakenGrowThreads: 0,\\r\\n        },\\r\\n    ]);\\r\\n}\\r\\nfunction reserveBatch(ns, targetServer, batchID, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads) {\\r\\n    if (hackThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(HACK_RAM) < hackThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(HACKJS, HACK_RAM, hackThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (growThreads > 0) {\\r\\n        for (const server of servers) {\\r\\n            if (server.threadsAvailable(GROW_RAM) < growThreads)\\r\\n                continue; // exectue grows as a block\\r\\n            server.reserveScript(GROWJS, GROW_RAM, growThreads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--hackLvlEffect\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0,\\r\\n            ]);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenHackThreads) {\\r\\n        let weakenHackThreadsRemaining = weakenHackThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenHackThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                0, // set the weaken hack offset to 0 to differentiate it from a weaken grow\\r\\n            ]);\\r\\n            weakenHackThreadsRemaining -= threads;\\r\\n            if (weakenHackThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    if (weakenGrowThreads) {\\r\\n        let weakenGrowThreadsRemaining = weakenGrowThreads;\\r\\n        for (const server of servers) {\\r\\n            const threads = Math.min(weakenGrowThreadsRemaining, server.threadsAvailable(WEAKEN_RAM));\\r\\n            if (threads <= 0)\\r\\n                continue;\\r\\n            server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                \\\"--target\\\",\\r\\n                targetServer.hostname,\\r\\n                \\\"--hackLvlTiming\\\",\\r\\n                ns.getHackingLevel(),\\r\\n                \\\"--batchID\\\",\\r\\n                batchID,\\r\\n                \\\"--offset\\\",\\r\\n                1, // set the weaken grow offset to 1 to differentiate it from a weaken hack\\r\\n            ]);\\r\\n            weakenGrowThreadsRemaining -= threads;\\r\\n            if (weakenGrowThreadsRemaining === 0)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"target\\\", \\\"n00dles\\\"],\\r\\n    [\\\"reserve\\\", HOME_RESERVE_RAM],\\r\\n    [\\\"limit\\\", Number.MAX_SAFE_INTEGER],\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : \\\"\\\";\\r\\n    if ([\\\"--target\\\"].includes(lastFlag))\\r\\n        return data.servers;\\r\\n    if ([\\\"--reserve\\\"].includes(lastFlag))\\r\\n        return [\\\"16\\\", \\\"32\\\", \\\"64\\\", \\\"128\\\"];\\r\\n    return [\\\"--target\\\", \\\"--reserve\\\", \\\"--limit\\\"];\\r\\n}\\r\\nlet serverService;\\r\\n// allocate a batch\\r\\n// check to see if server is initialized, if not, reserve a GW batch\\r\\n// else figure out optimal batch size for number of batches left to allocate\\r\\n// and reserve all of those\\r\\nfunction allocateBatches(ns, targetServer, servers, hackLimit, doLog, timeLimit, simPlayer) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const weakenPerThread = targetServer.weakenAmount(1);\\r\\n    const weakenTimeShort = targetServer.weakenTime(ns.getHackingLevel(), simPlayer);\\r\\n    if (timeLimit > 10 * 60 * 60 * 1000)\\r\\n        timeLimit = weakenTimeShort * 2;\\r\\n    const batchCountLimit = Math.max(Math.floor((timeLimit - weakenTimeShort) / batchSpacer), 1);\\r\\n    const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n    const batchCountMax = Math.min(Math.max(Math.floor(hackTimeLong / batchSpacer), 1), batchCountLimit);\\r\\n    // update batchCountMax to prevent time stretching when security isnt minimized\\r\\n    // if (targetServer.hackDifficulty - targetServer.minDifficulty > 0) {\\r\\n    //     const newBatchCountLimit = Math.max(Math.floor(weakenTimeShort / batchSpacer), 1);\\r\\n    //     llog(ns, \\\"Reducing batch count limit from %f to %f\\\", batchCountMax, batchCountLimit);\\r\\n    //     batchCountMax = Math.min(batchCountMax, batchCountLimit);\\r\\n    // }\\r\\n    // if (doLog)\\r\\n    //     llog(ns, \\\"timeLimit: %f; weakenTimeShort %f; batchCountLimit: %f\\\", timeLimit, weakenTimeShort, batchCountLimit);\\r\\n    if (doLog)\\r\\n        llog(ns, \\\"Maximum Batches: %d; hackLimit %.3f\\\", batchCountMax, hackLimit);\\r\\n    let totalMoney = 0;\\r\\n    let totalPercent = 0;\\r\\n    let batchID = 0;\\r\\n    let hasPrimary = false;\\r\\n    while (true) {\\r\\n        // If we're maxed out on batches, break\\r\\n        if (batchID >= batchCountMax)\\r\\n            break;\\r\\n        // is server initialized\\r\\n        const securityDiff = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n        const moneyDiff = targetServer.moneyMax - targetServer.moneyAvailable;\\r\\n        if (moneyDiff > 0) {\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Allocating Primary Batch (BatchID %d)\\\", batchID);\\r\\n            hasPrimary = true;\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Big Block %d\\\", bigBlock);\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            let growThreads = Math.floor(bigBlock / GROW_RAM);\\r\\n            let weakenGrowThreads = 0;\\r\\n            // if we're smart, only allocate the needed threads instead of max'ing out the big block\\r\\n            if (simPlayer) {\\r\\n                const growThreadsNeeded = Math.ceil(targetServer.growthAmount(simPlayer));\\r\\n                growThreads = Math.min(growThreads, growThreadsNeeded);\\r\\n            }\\r\\n            while (growThreads > 0) {\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil((growSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, 0, growThreads, weakenGrowThreads))\\r\\n                    break;\\r\\n                growThreads--;\\r\\n            }\\r\\n            if (growThreads === 0) {\\r\\n                let threadCount = 0;\\r\\n                for (const server of servers) {\\r\\n                    const threads = server.threadsAvailable(WEAKEN_RAM);\\r\\n                    if (threads <= 0)\\r\\n                        continue;\\r\\n                    server.reserveScript(WEAKENJS, WEAKEN_RAM, threads, [\\r\\n                        \\\"--target\\\",\\r\\n                        targetServer.hostname,\\r\\n                        \\\"--hackLvlTiming\\\",\\r\\n                        ns.getHackingLevel(),\\r\\n                        \\\"--batchID\\\",\\r\\n                        batchID,\\r\\n                        \\\"--offset\\\",\\r\\n                        0,\\r\\n                    ]);\\r\\n                    threadCount += threads;\\r\\n                }\\r\\n                if (doLog)\\r\\n                    llog(ns, \\\"Reserved Final Weaken Batch W-%d; Big Block %d\\\", threadCount, bigBlock);\\r\\n                // Full weaken loop indicates we are done allocating batches\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                reserveBatch(ns, targetServer, batchID, servers, 0, growThreads, 0, weakenGrowThreads);\\r\\n            }\\r\\n            if (doLog)\\r\\n                llog(ns, \\\"Reserving Primary Batch %d G-%d GW-%d; Big Block %d\\\", batchID, growThreads, weakenGrowThreads, bigBlock);\\r\\n            // if this isnt a sim, or we are unable to simulate because we dont have formulas.exe, keep looping until we run\\r\\n            // out of available threads, just assign everything to batchID 0.\\r\\n            if (!simPlayer)\\r\\n                continue;\\r\\n            targetServer.simGrowBatch(growThreads, weakenGrowThreads, simPlayer);\\r\\n            batchID++;\\r\\n        }\\r\\n        else {\\r\\n            // allocate primary thread\\r\\n            const bigBlock = servers\\r\\n                .map((a) => a.availableRam())\\r\\n                .filter((a) => a > 0)\\r\\n                .sort((a, b) => b - a)[0];\\r\\n            // We've run out of available ram, break out and execute reserved scripts\\r\\n            if (bigBlock < GROW_RAM)\\r\\n                break;\\r\\n            const hackOverride = ns.getHackingLevel();\\r\\n            // maximum number of hack threads this batch can not be higher than either how many threads\\r\\n            // you can fit in the server with the most free RAM, or the maximum number of hack threads\\r\\n            // you can target a server with before it is completely drained.\\r\\n            const maxHackThreads = hackLimit / targetServer.hackAnalyze(hackOverride, simPlayer);\\r\\n            let hackThreads = Math.min(Math.floor(bigBlock / HACK_RAM), hackLimit === 1 ? maxHackThreads - 1 : maxHackThreads);\\r\\n            let hackAmount = 0;\\r\\n            let weakenHackThreads = 0;\\r\\n            let growThreads = 0;\\r\\n            let weakenGrowThreads = 0;\\r\\n            while (hackThreads > 0) {\\r\\n                hackAmount = targetServer.hackAmount(hackThreads, hackOverride, simPlayer);\\r\\n                const hackSecurityIncrease = targetServer.hackAmountSecurity(hackThreads);\\r\\n                weakenHackThreads = Math.ceil((hackSecurityIncrease + securityDiff) / weakenPerThread);\\r\\n                growThreads = Math.ceil(targetServer.growthAmount(simPlayer, targetServer.moneyMax / (targetServer.moneyAvailable - hackAmount)));\\r\\n                const growSecurityIncrease = targetServer.growthAmountSecurity(growThreads);\\r\\n                weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenPerThread);\\r\\n                if (testAllocateThreads(ns, servers, hackThreads, growThreads, weakenHackThreads + weakenGrowThreads))\\r\\n                    break;\\r\\n                hackThreads--;\\r\\n            }\\r\\n            if (hackThreads === 0)\\r\\n                break;\\r\\n            // if (doLog)\\r\\n            //     llog(\\r\\n            //         ns,\\r\\n            //         \\\"Reserving Batch %d H-%d HW-%d G-%d GW-%d; Big Block %d; Total %s (%.2f%%)\\\",\\r\\n            //         batchID,\\r\\n            //         hackThreads,\\r\\n            //         weakenHackThreads,\\r\\n            //         growThreads,\\r\\n            //         weakenGrowThreads,\\r\\n            //         bigBlock,\\r\\n            //         ns.nFormat(hackAmount, \\\"$0.000a\\\"),\\r\\n            //         (hackAmount / targetServer.moneyMax) * 100\\r\\n            //     );\\r\\n            reserveBatch(ns, targetServer, batchID++, servers, hackThreads, growThreads, weakenHackThreads, weakenGrowThreads);\\r\\n            totalMoney += hackAmount;\\r\\n            totalPercent += (hackAmount / targetServer.moneyMax) * 100;\\r\\n        }\\r\\n    }\\r\\n    return { batchID: batchID, totalMoney: totalMoney, totalPercent: totalPercent, hasPrimary: hasPrimary };\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.disableLog(\\\"getHackingLevel\\\");\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    ns.tail();\\r\\n    let targetServer;\\r\\n    await doSoften(ns);\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n        serverService = new ServerService(ns);\\r\\n        targetServer = serverService.loadServer(options.target);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    // if (!targetServer.canRunScripts()) {\\r\\n    //     ns.tprintf(\\\"ERROR: Cannot hack %s: No root access\\\", targetServer.hostname);\\r\\n    //     return;\\r\\n    // }\\r\\n    if (!targetServer.canBeHacked(ns.getHackingLevel())) {\\r\\n        ns.tprintf(\\\"ERROR: Cannot hack %s: Insufficient hacking experience %d < %d\\\", targetServer.hostname, ns.getHackingLevel(), targetServer.requiredHackingSkill);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.reserve) || options.reserve < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --reserve must be a number > 0 (%s)\\\", options.reserve);\\r\\n        return;\\r\\n    }\\r\\n    if (isNaN(options.limit) || options.limit < 0) {\\r\\n        ns.tprintf(\\\"ERROR: --limit must be a number > 0 (%s)\\\", options.limit);\\r\\n        return;\\r\\n    }\\r\\n    options.limit *= 60 * 1000; // limit input assumed to be in minutes\\r\\n    const servers = serverService\\r\\n        .getScriptableServers(options.reserve)\\r\\n        .sort((a, b) => a.availableRam() - b.availableRam());\\r\\n    const simPlayer = undefined; // ns.getPlayer();\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    // const targets = serverService.getHackableServers(ns.getHackingLevel());\\r\\n    // const targetIncomes: [Server, number][] = [];\\r\\n    // for (const target of targets) {\\r\\n    //     targetIncomes.push([target, getIncome(target)]);\\r\\n    // }\\r\\n    while (true) {\\r\\n        let bestHackLimit = 0;\\r\\n        let bestHackLimitValue = 0;\\r\\n        for (const hackLimit of [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.975, 1]) {\\r\\n            targetServer.reload();\\r\\n            const allocateBatchResult = allocateBatches(ns, targetServer, servers, hackLimit, false, options.limit, simPlayer);\\r\\n            const batchCount = allocateBatchResult.batchID;\\r\\n            const totalMoney = allocateBatchResult.totalMoney;\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Check %.3f - %d, %s, %s/s\\\",\\r\\n            //     hackLimit,\\r\\n            //     batchCount,\\r\\n            //     ns.nFormat(totalMoney, \\\"$0.000a\\\"),\\r\\n            //     ns.nFormat(value, \\\"$0.000a\\\")\\r\\n            // );\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer.reload();\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchID;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const totalPercent = allocateBatchResult.totalPercent;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        // const hackTimeLong = targetServer.hackTime(Number.MIN_VALUE, simPlayer);\\r\\n        // const batchCountMax = Math.max(Math.floor(hackTimeLong / batchSpacer), 1);\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const hackLevelCalc = targetServer.hackLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const hackLevel = hackLevelCalc <= 0 || hackLevelCalc > playerHackingLevel ? playerHackingLevel : hackLevelCalc;\\r\\n        const growLevelCalc = targetServer.growLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const growLevel = growLevelCalc <= 0 || growLevelCalc > playerHackingLevel ? playerHackingLevel : growLevelCalc;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const hackTime = targetServer.hackTime(hackLevel);\\r\\n        const growTime = targetServer.growTime(growLevel);\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const hackOffset = weakenTime - TSPACER - hackTime;\\r\\n        const growOffset = weakenTime + TSPACER - growTime;\\r\\n        const weakenHackOffset = 0;\\r\\n        const weakenGrowOffset = TSPACER * 2;\\r\\n        const startOffset = hackOffset < 0 ? -hackOffset : 0;\\r\\n        // ns.tprintf(\\\"Batches: %d\\\", batchCount);\\r\\n        // ns.tprintf(\\\"Target Time: %s\\\", stFormat(ns, hackTimeTarget, true));\\r\\n        // ns.tprintf(\\\"Hack Level          : %8.4f/%8.4f %s\\\", hackLevelCalc, hackLevel, stFormat(ns, hackTime, true));\\r\\n        // ns.tprintf(\\\"Grow Level          : %8.4f/%8.4f %s\\\", growLevelCalc, growLevel, stFormat(ns, growTime, true));\\r\\n        // ns.tprintf(\\\"Weaken Level        : %8.4f/%8.4f %s\\\", weakenLevelCalc, weakenLevel, stFormat(ns, weakenTime, true));\\r\\n        // ns.tprintf(\\\"Hack Timeline       : %6d %6d %6d\\\", hackOffset + startOffset, hackTime, hackOffset + startOffset + hackTime);\\r\\n        // ns.tprintf(\\\"Weaken Hack Timeline: %6d %6d %6d\\\", weakenHackOffset + startOffset, weakenTime, weakenHackOffset + startOffset + weakenTime);\\r\\n        // ns.tprintf(\\\"Grow Timeline       : %6d %6d %6d\\\", growOffset + startOffset, growTime, growOffset + startOffset + growTime);\\r\\n        // ns.tprintf(\\\"Weaken Grow Timeline: %6d %6d %6d\\\", weakenGrowOffset + startOffset, weakenTime, weakenGrowOffset + startOffset + weakenTime);\\r\\n        // fix up hack overrides on execs\\r\\n        for (const exec of execs) {\\r\\n            switch (exec.filename) {\\r\\n                case HACKJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", hackLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + hackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case GROWJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", growLevel);\\r\\n                    exec.offset = exec.batchID * batchSpacer + growOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n                case WEAKENJS:\\r\\n                    updateScriptExecutionArg(exec, \\\"--hackLvlTiming\\\", weakenLevel);\\r\\n                    if (exec.offset)\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenGrowOffset + startOffset;\\r\\n                    else\\r\\n                        exec.offset = exec.batchID * batchSpacer + weakenHackOffset + startOffset;\\r\\n                    updateScriptExecutionArg(exec, \\\"--offset\\\", exec.offset);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        llog(ns, \\\"Executing %d batches over %s for %s income (%s/s) %d%%\\\", batchCount, stFormat(ns, cycleTime, true), ns.nFormat(totalMoney, \\\"$0.000a\\\"), ns.nFormat(totalMoney / (cycleTime / 1000), \\\"$0.000a\\\"), totalPercent);\\r\\n        const port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write(JSON.stringify([\\r\\n            new Date(),\\r\\n            cycleTime,\\r\\n            targetServer.hostname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args).toString(),\\r\\n            \\\"SMART\\\",\\r\\n        ]));\\r\\n        await executeAndWait(ns, execs);\\r\\n    }\\r\\n}\\r\\nfunction getIncome(ns, _targetServer, servers, timespan) {\\r\\n    const batchSpacer = TSPACER * 4;\\r\\n    const simPlayer = ns.getPlayer();\\r\\n    let bestHackLimit = 0;\\r\\n    let bestHackLimitValue = 0;\\r\\n    const initialTargetServer = new Server(ns, _targetServer);\\r\\n    let targetServer = new Server(ns, initialTargetServer);\\r\\n    let timeleft = timespan;\\r\\n    let totalMoneyGained = 0;\\r\\n    while (timeleft > 0) {\\r\\n        const tmpServer = new Server(ns, targetServer);\\r\\n        for (const hackLimit of [0.25, 0.5, 0.75, 0.9, 1]) {\\r\\n            targetServer = new Server(ns, tmpServer);\\r\\n            const allocateBatchResult = allocateBatches(ns, targetServer, servers, hackLimit, false, timeleft, simPlayer);\\r\\n            const batchCount = allocateBatchResult.batchID;\\r\\n            const totalMoney = allocateBatchResult.totalMoney;\\r\\n            const weakenLevelCalc = targetServer.weakenLevelForTime(batchCount * batchSpacer, simPlayer);\\r\\n            const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > ns.getHackingLevel() ? ns.getHackingLevel() : weakenLevelCalc;\\r\\n            const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n            const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n            const value = totalMoney / (cycleTime / 1000);\\r\\n            if (value > bestHackLimitValue) {\\r\\n                bestHackLimit = hackLimit;\\r\\n                bestHackLimitValue = value;\\r\\n            }\\r\\n            servers.map((a) => a.clearReservedScripts());\\r\\n        }\\r\\n        targetServer = new Server(ns, tmpServer);\\r\\n        const allocateBatchResult = allocateBatches(ns, targetServer, servers, bestHackLimit, true, options.limit, simPlayer);\\r\\n        const batchCount = allocateBatchResult.batchID;\\r\\n        const totalMoney = allocateBatchResult.totalMoney;\\r\\n        const usedPrimary = allocateBatchResult.hasPrimary;\\r\\n        const execs = [];\\r\\n        servers.map((a) => execs.push(...a.popReservedScripts()));\\r\\n        // reverse engineer hackOverride to tightly fit batch count\\r\\n        const playerHackingLevel = simPlayer.hacking;\\r\\n        const hackTimeTarget = batchCount * batchSpacer;\\r\\n        const weakenLevelCalc = targetServer.weakenLevelForTime(hackTimeTarget, simPlayer);\\r\\n        const weakenLevel = weakenLevelCalc <= 0 || weakenLevelCalc > playerHackingLevel ? playerHackingLevel : weakenLevelCalc;\\r\\n        const weakenTime = targetServer.weakenTime(weakenLevel);\\r\\n        const cycleTime = weakenTime + batchCount * batchSpacer;\\r\\n        if (usedPrimary) {\\r\\n            timeleft -= cycleTime;\\r\\n            totalMoneyGained += totalMoney;\\r\\n            // simulate the batches on targetServer and do the loop again\\r\\n        }\\r\\n        else {\\r\\n            const cyclesLeft = Math.ceil(timeleft / cycleTime);\\r\\n            timeleft -= cycleTime * cyclesLeft;\\r\\n            totalMoneyGained += totalMoney * cyclesLeft;\\r\\n        }\\r\\n    }\\r\\n    const totalTime = timespan - timeleft;\\r\\n    return totalMoneyGained / (totalTime / 1000); // $/s\\r\\n}\\r\\nasync function executeAndWait(ns, execs) {\\r\\n    execs.sort((a, b) => a.offset - b.offset);\\r\\n    const startTime = new Date().getTime();\\r\\n    let waitPID = 0;\\r\\n    while (true) {\\r\\n        const exec = execs.shift();\\r\\n        if (!exec)\\r\\n            break;\\r\\n        while (true) {\\r\\n            const curOffset = new Date().getTime() - startTime;\\r\\n            const offsetDiff = curOffset - exec.offset;\\r\\n            if (offsetDiff < 0) {\\r\\n                await ns.sleep(20);\\r\\n                continue;\\r\\n            }\\r\\n            if (offsetDiff > SCRIPT_GAP / 2) {\\r\\n                llog(ns, \\\"WARNING: Script execution offset off by %d (> minimum difference of %d)\\\", offsetDiff, SCRIPT_GAP / 2);\\r\\n                execs = execs.filter((a) => a.batchID !== exec.batchID);\\r\\n                break;\\r\\n            }\\r\\n            // llog(\\r\\n            //     ns,\\r\\n            //     \\\"Executing %s:%s -t%d offset: %s\\\",\\r\\n            //     exec.hostname,\\r\\n            //     exec.filename,\\r\\n            //     exec.threads,\\r\\n            //     stFormat(ns, exec.offset, true)\\r\\n            // );\\r\\n            const pid = ns.exec(exec.filename, exec.hostname, exec.threads, ...exec.args);\\r\\n            // Set waitPID to the last weaken call (assumed to be the last call to finish of the last batch)\\r\\n            if (exec.filename === WEAKENJS)\\r\\n                waitPID = pid;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nasync function doSoften(ns) {\\r\\n    const waitPID = ns.exec(\\\"crawl.js\\\", \\\"home\\\", 1, \\\"-bs\\\", \\\"--suppress\\\");\\r\\n    while (ns.getRunningScript(waitPID) !== null) {\\r\\n        await ns.sleep(0);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja194LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiYXJjaGl2ZS9oYWNrX3gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNklBQTZJO0FBRzdJLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUE2QixNQUFNLGtCQUFrQixDQUFDO0FBRXBGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUVwQixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUM1QixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUM7QUFDckIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQztBQUV4QixNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFdkIsU0FBUyx3QkFBd0IsQ0FBQyxJQUFxQixFQUFFLEdBQVcsRUFBRSxHQUFhO0lBQy9FLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdkQsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07UUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdEYsT0FBTztBQUNYLENBQUM7QUFTRCxTQUFTLG1CQUFtQixDQUFDLEVBQU0sRUFBRSxPQUFpQixFQUFFLE9BQWdCO0lBQ3BFLHNHQUFzRztJQUN0RyxNQUFNLE1BQU0sR0FBRyxPQUFPO1NBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxF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\",\"filename\":\"/archive/hack_x.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":250239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doBackdoor } from '/lib/util';\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any,  @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    await doBackdoor(ns, String(ns.args[0]));\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2Rvb3IuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJiYWNrZG9vci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRXRDLHFKQUFxSjtBQUNySixNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFjO0lBQ2xELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN4QixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzVDLENBQUMifQ==\",\"filename\":\"backdoor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///a5e08b33-d587-4ed7-912f-2ed65cead841\",\"moduleSequenceNumber\":250212},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///6f8c4e5c-d995-4b14-a4f9-4bdf5a28e7ad\",\"moduleSequenceNumber\":354590}],\"dependents\":[],\"ramUsage\":8.15,\"server\":\"home\",\"moduleSequenceNumber\":354590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Augmentation } from \\\"/lib/augmentation/augmentation\\\";\\r\\nimport { allHosts, CONSTWEAKENJS, doBuyAndSoftenAll } from \\\"/lib/util\\\";\\r\\nimport { ServerService } from \\\"/services/server\\\";\\r\\nconst HOME_RESERVE_RAM = 128;\\r\\nfunction favorToRep(f) {\\r\\n    const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n    return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    ns.disableLog(\\\"brutessh\\\");\\r\\n    ns.disableLog(\\\"ftpcrack\\\");\\r\\n    ns.disableLog(\\\"httpworm\\\");\\r\\n    ns.disableLog(\\\"relaysmtp\\\");\\r\\n    ns.disableLog(\\\"sqlinject\\\");\\r\\n    ns.disableLog(\\\"nuke\\\");\\r\\n    //ns.tail();\\r\\n    const serverService = new ServerService(ns);\\r\\n    if (ns.getRunningScript(\\\"clock.js\\\", \\\"home\\\") === null)\\r\\n        ns.exec(\\\"clock.js\\\", \\\"home\\\");\\r\\n    let doExp = true;\\r\\n    //const msToRep = 0;\\r\\n    let doServerBuys = true;\\r\\n    while (true) {\\r\\n        const hackPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n        while (ns.getRunningScript(hackPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        if (ns.getPlayer().factions.length > 0) {\\r\\n            const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(cctPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n        }\\r\\n        // if we have the red pill and we can hack the world daemon, ascend\\r\\n        if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\"))\\r\\n            ns.exec(\\\"ascend.js\\\", \\\"home\\\");\\r\\n        const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1, \\\"-c\\\");\\r\\n        while (ns.getRunningScript(joinPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        const augTargets = [\\r\\n            {\\r\\n                faction: \\\"Tian Di Hui\\\",\\r\\n                aug: \\\"Social Negotiation Assistant (S.N.A)\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"CyberSec\\\",\\r\\n                aug: \\\"Cranial Signal Processors - Gen I\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"NiteSec\\\",\\r\\n                aug: \\\"CRTX42-AA Gene Modification\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"The Black Hand\\\",\\r\\n                aug: \\\"The Black Hand\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Chongqing\\\",\\r\\n                aug: \\\"Neuregen Gene Modification\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"BitRunners\\\",\\r\\n                aug: \\\"Embedded Netburner Module Core V2 Upgrade\\\",\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Daedalus\\\",\\r\\n                aug: \\\"The Red Pill\\\",\\r\\n            },\\r\\n        ];\\r\\n        const backupTargets = [\\r\\n            {\\r\\n                faction: \\\"Sector-12\\\",\\r\\n                aug: \\\"CashRoot Starter Kit\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Ishima\\\",\\r\\n                aug: \\\"INFRARET Enhancement\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Volhaven\\\",\\r\\n                aug: \\\"Combat Rib II\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"New Tokyo\\\",\\r\\n                aug: \\\"NutriGen Implant\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Tian Di Hui\\\",\\r\\n                aug: \\\"Neuroreceptor Management Implant\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n            {\\r\\n                faction: \\\"Aevum\\\",\\r\\n                aug: \\\"PCMatrix\\\",\\r\\n                allbuy: true,\\r\\n            },\\r\\n        ];\\r\\n        let doInstall = false;\\r\\n        let allInstalled = true;\\r\\n        let installNonHackAugs = false;\\r\\n        for (const augTarget of augTargets) {\\r\\n            let targetAug = new Augmentation(ns, augTarget.aug, augTarget.faction);\\r\\n            if (targetAug.owned)\\r\\n                continue;\\r\\n            let targetFaction = augTarget.faction;\\r\\n            installNonHackAugs = !!augTarget.allbuy;\\r\\n            // override target aug if we're targeting Daedalus but we dont have enough augments banked\\r\\n            if (augTarget.faction === \\\"Daedalus\\\" &&\\r\\n                ns.singularity.getOwnedAugmentations().length < ns.getBitNodeMultipliers().DaedalusAugsRequirement) {\\r\\n                ns.tprintf(\\\"Overriding Daedalus\\\");\\r\\n                for (const altAugTarget of backupTargets) {\\r\\n                    const altTargetAug = new Augmentation(ns, altAugTarget.aug, altAugTarget.faction);\\r\\n                    if (altTargetAug.owned)\\r\\n                        continue;\\r\\n                    targetAug = new Augmentation(ns, altAugTarget.aug, altAugTarget.faction);\\r\\n                    targetFaction = altAugTarget.faction;\\r\\n                    installNonHackAugs = !!altAugTarget.allbuy;\\r\\n                    ns.tprintf(\\\"Overriding Daedalus => %s\\\", targetFaction);\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            let targetRepDisp = targetAug.rep;\\r\\n            const augs = ns.singularity\\r\\n                .getAugmentationsFromFaction(targetFaction)\\r\\n                .map((name) => {\\r\\n                return new Augmentation(ns, name, targetFaction);\\r\\n            })\\r\\n                .filter((a) => a.rep <= targetAug.rep && !a.owned && !a.installed)\\r\\n                .sort((a, b) => a.rep - b.rep);\\r\\n            let goalCost = 0;\\r\\n            let multpow = 0;\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            for (const aug of augs) {\\r\\n                goalCost += aug.price * Math.pow(multmult, multpow);\\r\\n                multpow++;\\r\\n            }\\r\\n            let overrideDoInstall = false;\\r\\n            allInstalled = false;\\r\\n            if (ns.singularity.checkFactionInvitations().includes(targetFaction))\\r\\n                ns.singularity.joinFaction(targetFaction);\\r\\n            ns.singularity.workForFaction(targetFaction, \\\"Hacking Contracts\\\", true);\\r\\n            if (targetAug.purchaseable)\\r\\n                doInstall = true;\\r\\n            if (targetAug.rep > favorToRep(ns.getFavorToDonate())) {\\r\\n                const favor = ns.singularity.getFactionFavor(targetFaction);\\r\\n                const targetRep = favorToRep(ns.getFavorToDonate());\\r\\n                const currentRep = ns.singularity.getFactionRep(targetFaction) +\\r\\n                    (ns.getPlayer().currentWorkFactionName === targetFaction ? ns.getPlayer().workRepGained : 0);\\r\\n                const storedRep = Math.max(0, favorToRep(favor));\\r\\n                const targetRep15Percent = targetRep * 0.15;\\r\\n                const totalRep = currentRep + storedRep;\\r\\n                // first pass\\r\\n                if (totalRep < targetRep15Percent && favor < 25) {\\r\\n                    targetRepDisp = targetRep15Percent;\\r\\n                    // const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                    // const msToRep = (targetRep15Percent - totalRep) / repGainPerMS;\\r\\n                    // ns.tprintf(\\r\\n                    //     \\\"Time For %s %d => %d: %s\\\",\\r\\n                    //     targetFaction,\\r\\n                    //     totalRep,\\r\\n                    //     targetRep15Percent,\\r\\n                    //     stFormat(ns, msToRep)\\r\\n                    // );\\r\\n                }\\r\\n                if (totalRep >= targetRep15Percent && favor < 25) {\\r\\n                    overrideDoInstall = true;\\r\\n                    doInstall = true;\\r\\n                }\\r\\n                // second pass\\r\\n                if (totalRep > targetRep15Percent && totalRep < targetRep && favor < ns.getFavorToDonate()) {\\r\\n                    targetRepDisp = targetRep;\\r\\n                    // const repGainPerMS = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                    // const msToRep = (targetRep - totalRep) / repGainPerMS;\\r\\n                    // ns.tprintf(\\\"Time For %s %d => %d: %s\\\", targetFaction, totalRep, targetRep, stFormat(ns, msToRep));\\r\\n                }\\r\\n                if (totalRep > targetRep15Percent && totalRep > targetRep && favor < ns.getFavorToDonate()) {\\r\\n                    overrideDoInstall = true;\\r\\n                    doInstall = true;\\r\\n                }\\r\\n                // third pass\\r\\n                if (favor > ns.getFavorToDonate() && currentRep < targetAug.rep) {\\r\\n                    const donateAmt = 1e6 * ((targetAug.rep - currentRep) / ns.getPlayer().faction_rep_mult);\\r\\n                    if (donateAmt < ns.getPlayer().money) {\\r\\n                        ns.singularity.donateToFaction(targetFaction, donateAmt);\\r\\n                        doInstall = true;\\r\\n                    }\\r\\n                    else {\\r\\n                        goalCost += donateAmt;\\r\\n                    }\\r\\n                }\\r\\n                if (ns.getPlayer().money < goalCost && !overrideDoInstall) {\\r\\n                    ns.tprintf(\\\"Controller: Target Cash %s\\\", ns.nFormat(goalCost, \\\"$0.000a\\\"));\\r\\n                    if (doInstall)\\r\\n                        doServerBuys = false;\\r\\n                    doInstall = false;\\r\\n                }\\r\\n            }\\r\\n            const port = ns.getPortHandle(2);\\r\\n            port.clear();\\r\\n            port.write(JSON.stringify([targetFaction, targetRepDisp, goalCost]));\\r\\n            break;\\r\\n        }\\r\\n        if (doInstall) {\\r\\n            ns.singularity.stopAction();\\r\\n            const baFlags = installNonHackAugs ? \\\"-gn\\\" : \\\"-g\\\";\\r\\n            const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, baFlags);\\r\\n            while (ns.getRunningScript(mcpPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(joinPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n            while (ns.getRunningScript(cctPID) !== null)\\r\\n                await ns.sleep(10);\\r\\n            ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n        }\\r\\n        if (allInstalled) {\\r\\n            // level up until we can hack the world daemon\\r\\n            const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n            const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n            const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n            let ngPrice = ns.singularity.getAugmentationPrice(\\\"NeuroFlux Governor\\\");\\r\\n            let ngRepReq = ns.singularity.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n            let total = 0;\\r\\n            for (let i = 0; i < 10; i++) {\\r\\n                total += ngPrice;\\r\\n                ngPrice = ngPrice * 1.14 * multmult;\\r\\n                ngRepReq *= 1.14;\\r\\n            }\\r\\n            const donateAmt = 1e6 * (ngRepReq / ns.getPlayer().faction_rep_mult);\\r\\n            if (donateAmt + total <= ns.getPlayer().money) {\\r\\n                ns.exec(\\\"reset.js\\\", \\\"home\\\", 1);\\r\\n            }\\r\\n        }\\r\\n        const servers = serverService.getScriptableServers(HOME_RESERVE_RAM);\\r\\n        const availableRamBefore = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        doBuyAndSoftenAll(ns);\\r\\n        if (ns.getPlayer().money * 0.25 > ns.singularity.getUpgradeHomeRamCost())\\r\\n            ns.singularity.upgradeHomeRam();\\r\\n        if (ns.getPlayer().money < 1000000000 && doServerBuys) {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.5, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        else {\\r\\n            const bsaPID = ns.exec(\\\"buy_server_all.js\\\", \\\"home\\\", 1, \\\"--allow\\\", 0.25, \\\"-qe\\\");\\r\\n            while (ns.getRunningScript(bsaPID) !== null)\\r\\n                await ns.sleep(100);\\r\\n        }\\r\\n        const availableRamAfter = servers.reduce((tally, server) => tally + server.availableRam(), 0);\\r\\n        if (availableRamBefore < availableRamAfter || doExp) {\\r\\n            doExp = false;\\r\\n            ns.exec(\\\"exp.js\\\", \\\"home\\\", 1, \\\"--reserve\\\", HOME_RESERVE_RAM);\\r\\n            await ns.sleep(60 * 1000);\\r\\n            // kill all weaken scripts\\r\\n            const allHostnames = allHosts(ns);\\r\\n            for (const hostname of allHostnames) {\\r\\n                const processes = ns.ps(hostname).filter((a) => a.filename === CONSTWEAKENJS);\\r\\n                for (const process of processes) {\\r\\n                    ns.kill(process.pid);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // if we have the red pill and we can hack the world daemon, ascend\\r\\n        if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\"))\\r\\n            ns.exec(\\\"ascend.js\\\", \\\"home\\\");\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUU3QixTQUFTLFVBQVUsQ0FBQyxDQUFTO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsK0JBQStCO0FBQzNFLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QixFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQixFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV0QixZ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\",\"filename\":\"controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///3dc3090d-c290-46f5-9896-20fce66b43a2\",\"moduleSequenceNumber\":344},{\"filename\":\"/services/server.js\",\"url\":\"blob:file:///7efda93e-efe6-4330-989a-a499601145ea\",\"moduleSequenceNumber\":345},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///d90ed32e-e8ef-4c64-a352-499728218d35\",\"moduleSequenceNumber\":344},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///043b21bb-bb31-4268-b21a-1eefebbff8c8\",\"moduleSequenceNumber\":344},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///572b418f-152f-474f-b624-9c4fe352d69f\",\"moduleSequenceNumber\":359},{\"filename\":\"controller.js\",\"url\":\"blob:file:///8d47a499-fa9c-4f7d-9fdc-b8aaed9e12fc\",\"moduleSequenceNumber\":1006}],\"dependents\":[],\"ramUsage\":69.9,\"server\":\"home\",\"moduleSequenceNumber\":250241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { permlog, stFormat } from \\\"/lib/util\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.singularity.stopAction();\\r\\n    const mainFaction = ns.getPlayer().factions[0];\\r\\n    const ownedAugs = ns.singularity\\r\\n        .getOwnedAugmentations(true)\\r\\n        .filter((a) => !ns.singularity.getOwnedAugmentations().includes(a));\\r\\n    const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\");\\r\\n    while (ns.getRunningScript(joinPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n    while (ns.getRunningScript(cctPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    while (ns.singularity.upgradeHomeRam())\\r\\n        await ns.sleep(10);\\r\\n    while (ns.singularity.upgradeHomeCores())\\r\\n        await ns.sleep(10);\\r\\n    const mcpPID = ns.exec(\\\"buy_augs.js\\\", \\\"home\\\", 1, \\\"-ng\\\");\\r\\n    while (ns.getRunningScript(mcpPID) !== null)\\r\\n        await ns.sleep(10);\\r\\n    await permlog(ns, \\\"Resetting after %s [%s since the start of BitNode %s]\\\", stFormat(ns, ns.getPlayer().playtimeSinceLastAug), stFormat(ns, ns.getPlayer().playtimeSinceLastBitnode), ns.getPlayer().bitNodeN);\\r\\n    await permlog(ns, \\\"%s (%d):\\\", mainFaction, ns.singularity.getFactionRep(mainFaction));\\r\\n    for (const augname of ownedAugs) {\\r\\n        await permlog(ns, \\\"  %s\\\", augname);\\r\\n    }\\r\\n    ns.singularity.installAugmentations(\\\"mcp.js\\\");\\r\\n    // in case install fails because we dont have any augs to install\\r\\n    ns.singularity.softReset(\\\"mcp.js\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJyZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU5QyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFNUIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsV0FBVztTQUMzQixxQkFBcUIsQ0FBQyxJQUFJLENBQUM7U0FDM0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV4RSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQyxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWpFLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QyxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWhFLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUU7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0QsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTdELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEQsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVoRSxNQUFNLE9BQU8sQ0FDVCxFQUFFLEVBQ0YsdURBQXVELEVBQ3ZELFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQ2pELFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLHdCQUF3QixDQUFDLEVBQ3JELEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQzFCLENBQUM7SUFDRixNQUFNLE9BQU8sQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLEtBQUssTUFBTSxPQUFPLElBQUksU0FBUyxFQUFFO1FBQzdCLE1BQU0sT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDdEM7SUFFRCxFQUFFLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTlDLGlFQUFpRTtJQUNqRSxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2QyxDQUFDIn0=\",\"filename\":\"reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///4189114e-e344-4684-9869-919a014b4ddb\",\"moduleSequenceNumber\":57781},{\"filename\":\"reset.js\",\"url\":\"blob:file:///27d1c81c-e72e-4d76-ba7e-986db43bdb03\",\"moduleSequenceNumber\":250203}],\"dependents\":[],\"ramUsage\":26.7,\"server\":\"home\",\"moduleSequenceNumber\":250242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.softReset\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.stanek.chargeFragment(Number(ns.args[0]), Number(ns.args[1]));\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3RhbmVrL2NoYXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSSxFQUFFO1FBQ1QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMxRTtBQUNMLENBQUMifQ==\",\"filename\":\"/stanek/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":250243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nimport { doBuyAndSoftenAll, doBackdoors, ALL_FACTIONS } from \\\"lib/util\\\";\\r\\nimport { Augmentation } from \\\"lib/augmentation/augmentation\\\";\\r\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\nlet options;\\r\\nconst argsSchema = [\\r\\n    [\\\"a\\\", false],\\r\\n    [\\\"n\\\", false],\\r\\n    [\\\"g\\\", false], // execute buys\\r\\n];\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any,  @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    data.flags(argsSchema);\\r\\n    return [\\\"-a\\\", \\\"-n\\\", \\\"-an\\\"];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    try {\\r\\n        options = ns.flags(argsSchema);\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n        return;\\r\\n    }\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n    let sortedFactions;\\r\\n    if (!options.a) {\\r\\n        const player = ns.getPlayer();\\r\\n        const checkFactions = player.factions.concat(ns.singularity.checkFactionInvitations());\\r\\n        sortedFactions = checkFactions.sort((a, b) => (ns.getPlayer().currentWorkFactionName === b ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.singularity.getFactionRep(b) -\\r\\n            ((ns.getPlayer().currentWorkFactionName === a ? ns.getPlayer().workRepGained : 0) + ns.singularity.getFactionRep(a)));\\r\\n    }\\r\\n    else {\\r\\n        sortedFactions = ALL_FACTIONS.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a));\\r\\n    }\\r\\n    sortedFactions = sortedFactions.filter((a) => a !== \\\"Church of the Machine God\\\");\\r\\n    let allPurchaseableAugs = [];\\r\\n    let topFaction = true;\\r\\n    for (const faction of sortedFactions) {\\r\\n        const augs = ns\\r\\n            .singularity.getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n            return new Augmentation(ns, name, faction);\\r\\n        })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        const augsToBuy = [];\\r\\n        for (const aug of augs) {\\r\\n            if (aug.isHackUseful(options.n) && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful(options.n) && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n        if (augsToBuy.length === 0 && !topFaction)\\r\\n            continue;\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.singularity.getFactionRep(faction));\\r\\n        for (const aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n        topFaction = false;\\r\\n    }\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        const checkName = allPurchaseableAugs[i].name;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === checkName) {\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n            }\\r\\n            else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n    // reorder array to buy dependent augs first and purge augs that cant be bought\\r\\n    // because of a missing dependency, need to loop multiple times until no more dependencies are found\\r\\n    while (true) {\\r\\n        let didDepMove = false;\\r\\n        for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n            const augName = allPurchaseableAugs[i].name;\\r\\n            const depName = allPurchaseableAugs[i].dep;\\r\\n            if (depName === \\\"\\\")\\r\\n                continue;\\r\\n            let foundDep = false;\\r\\n            // check to see if we've already re-organized this dep and it is placed higher in the queue\\r\\n            for (let k = 0; k < i; k++) {\\r\\n                if (allPurchaseableAugs[k].name === depName) {\\r\\n                    foundDep = true;\\r\\n                }\\r\\n            }\\r\\n            if (foundDep)\\r\\n                continue;\\r\\n            const depLoc = allPurchaseableAugs.findIndex((a) => a.name === depName);\\r\\n            if (depLoc >= 0) {\\r\\n                const tmp = allPurchaseableAugs[depLoc];\\r\\n                // remove aug from current place\\r\\n                allPurchaseableAugs.splice(depLoc, 1);\\r\\n                // place it before the main aug\\r\\n                const curLoc = allPurchaseableAugs.findIndex((a) => a.name === augName);\\r\\n                allPurchaseableAugs.splice(curLoc, 0, tmp);\\r\\n                foundDep = true;\\r\\n                didDepMove = true;\\r\\n            }\\r\\n            // if we dont have the dependency queued, remove this aug from the buy list\\r\\n            if (!foundDep) {\\r\\n                ns.tprintf(\\\"WARNING: Unable to find dependency %s:%s in the queue\\\", allPurchaseableAugs[i].name, allPurchaseableAugs[i].dep);\\r\\n                allPurchaseableAugs.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n        if (!didDepMove)\\r\\n            break;\\r\\n    }\\r\\n    if (options.g) {\\r\\n        ns.singularity.stopAction();\\r\\n    }\\r\\n    let mult = 1;\\r\\n    const srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n    const srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n    const multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n    let total = Number.MAX_SAFE_INTEGER;\\r\\n    let startAug = 0;\\r\\n    const purchaseableAugs = allPurchaseableAugs.filter((a) => a.name !== \\\"The Red Pill\\\");\\r\\n    while (startAug < purchaseableAugs.length) {\\r\\n        total = 0;\\r\\n        mult = 1;\\r\\n        for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n            total += purchaseableAugs[augIdx].price * mult;\\r\\n            mult *= multmult;\\r\\n        }\\r\\n        if (total < ns.getPlayer().money)\\r\\n            break;\\r\\n        startAug++;\\r\\n    }\\r\\n    let affordableAugs = purchaseableAugs.slice(startAug);\\r\\n    // check if affordableAugs includes deps if they're not already installed\\r\\n    let redoUpdate = false;\\r\\n    for (const aug of affordableAugs) {\\r\\n        const depName = aug.dep;\\r\\n        if (depName === \\\"\\\")\\r\\n            continue;\\r\\n        if (ns.singularity.getOwnedAugmentations(true).includes(depName))\\r\\n            continue;\\r\\n        let depAug = affordableAugs.find((a) => a.name === depName);\\r\\n        if (depAug === undefined) {\\r\\n            // dependency is not installed, and not in the list to be installed, pull it from purchaseableAugs\\r\\n            depAug = purchaseableAugs.find((a) => a.name === depName);\\r\\n            if (depAug === undefined) {\\r\\n                ns.tprintf(\\\"ERROR: Unable to find dependency aug in the purchaseableAugs \\\" +\\r\\n                    \\\"array even though it should be there %s | %s\\\");\\r\\n                return;\\r\\n            }\\r\\n            const thisAugIdx = affordableAugs.findIndex((a) => a.name === aug.name);\\r\\n            affordableAugs.splice(thisAugIdx, 0, depAug);\\r\\n            redoUpdate = true;\\r\\n        }\\r\\n    }\\r\\n    if (redoUpdate) {\\r\\n        startAug = 0;\\r\\n        while (startAug < affordableAugs.length) {\\r\\n            total = 0;\\r\\n            mult = 1;\\r\\n            for (let augIdx = startAug; augIdx < affordableAugs.length; augIdx++) {\\r\\n                total += affordableAugs[augIdx].price * mult;\\r\\n                mult *= multmult;\\r\\n            }\\r\\n            if (total < ns.getPlayer().money)\\r\\n                break;\\r\\n            startAug++;\\r\\n        }\\r\\n        affordableAugs = affordableAugs.slice(startAug);\\r\\n    }\\r\\n    //if (affordableAugs.length === 0) return;\\r\\n    ns.tprintf(\\\"============================\\\");\\r\\n    total = 0;\\r\\n    mult = 1;\\r\\n    const startmoney = ns.getPlayer().money;\\r\\n    for (const aug of affordableAugs) {\\r\\n        if (options.g)\\r\\n            ns.singularity.purchaseAugmentation(aug.faction, aug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", aug.name, ns.nFormat(aug.price * mult, \\\"$0.000a\\\"), aug.dep);\\r\\n        total += aug.price * mult;\\r\\n        mult *= multmult;\\r\\n    }\\r\\n    // see how many Neuroflux Governors we can buy\\r\\n    let neurofluxFactionIdx = 0;\\r\\n    while (neurofluxFactionIdx < sortedFactions.length) {\\r\\n        if (ns.gang.inGang() && ns.gang.getGangInformation().faction === sortedFactions[neurofluxFactionIdx]) {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else if (sortedFactions[neurofluxFactionIdx] === \\\"Bladeburners\\\") {\\r\\n            neurofluxFactionIdx++;\\r\\n        }\\r\\n        else {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const topFactionForNeuroflux = neurofluxFactionIdx >= sortedFactions.length ? \\\"\\\" : sortedFactions[neurofluxFactionIdx];\\r\\n    const topFactionRep = topFactionForNeuroflux !== \\\"\\\"\\r\\n        ? (ns.getPlayer().currentWorkFactionName === topFactionForNeuroflux ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.singularity.getFactionRep(topFactionForNeuroflux)\\r\\n        : 0;\\r\\n    let ngPrice = ns.singularity.getAugmentationPrice(\\\"NeuroFlux Governor\\\") * (options.g ? 1 : mult);\\r\\n    let ngRepReq = ns.singularity.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n    let nfCount = 1;\\r\\n    let neuroError = false;\\r\\n    while (true) {\\r\\n        if (total + ngPrice < startmoney && ngRepReq <= topFactionRep) {\\r\\n            if (options.g) {\\r\\n                const result = ns.singularity.purchaseAugmentation(topFactionForNeuroflux, \\\"NeuroFlux Governor\\\");\\r\\n                if (!result) {\\r\\n                    ns.tprintf(\\\"ERROR, could not buy Neuroflux governor\\\");\\r\\n                    neuroError = true;\\r\\n                }\\r\\n            }\\r\\n            ns.tprintf(\\\"%50s - %9s %s\\\", \\\"NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            nfCount++;\\r\\n            total += ngPrice;\\r\\n            ngPrice = ngPrice * 1.14 * multmult;\\r\\n            ngRepReq *= 1.14;\\r\\n        }\\r\\n        else {\\r\\n            ns.tprintf(\\\"%50s - %9s %s)\\\", \\\"(NeuroFlux Governor +\\\" + nfCount.toString(), ns.nFormat(ngPrice, \\\"$0.000a\\\"), ns.nFormat(ngRepReq, \\\"0.000a\\\"));\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const redPillAug = allPurchaseableAugs.find((a) => a.name === \\\"The Red Pill\\\");\\r\\n    if (!neuroError && redPillAug) {\\r\\n        if (options.g)\\r\\n            ns.singularity.purchaseAugmentation(redPillAug.faction, redPillAug.name);\\r\\n        ns.tprintf(\\\"%50s - %9s %s\\\", \\\"The Red Pill\\\", ns.nFormat(0, \\\"$0.000a\\\"), ns.nFormat(redPillAug.rep, \\\"0.000a\\\"));\\r\\n    }\\r\\n    ns.tprintf(\\\"\\\\n%50s - %9s (%s)\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"), ns.nFormat(total + ngPrice, \\\"$0.000a\\\"));\\r\\n    if (options.n && options.g) {\\r\\n        // find a faction with donation favor\\r\\n        const joinedFactions = ns.getPlayer().factions;\\r\\n        let targetFaction = \\\"\\\";\\r\\n        for (const faction of joinedFactions) {\\r\\n            if (ns.singularity.getFactionFavor(faction) >= ns.getFavorToDonate()) {\\r\\n                targetFaction = faction;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (targetFaction !== \\\"\\\") {\\r\\n            while (true) {\\r\\n                const aug = new Augmentation(ns, \\\"NeuroFlux Governor\\\", targetFaction);\\r\\n                if (aug.price > ns.getPlayer().money)\\r\\n                    break;\\r\\n                if (aug.purchaseable) {\\r\\n                    if (ns.singularity.purchaseAugmentation(aug.faction, aug.name))\\r\\n                        continue;\\r\\n                    else\\r\\n                        break;\\r\\n                }\\r\\n                const repDiff = aug.rep - ns.singularity.getFactionRep(targetFaction);\\r\\n                const donateAmt = 1e6 * (repDiff / ns.getPlayer().faction_rep_mult);\\r\\n                if (donateAmt > ns.getPlayer().money)\\r\\n                    break;\\r\\n                ns.singularity.donateToFaction(targetFaction, donateAmt);\\r\\n                if (aug.price > ns.getPlayer().money)\\r\\n                    break;\\r\\n                ns.singularity.purchaseAugmentation(aug.faction, aug.name);\\r\\n                ns.tprintf(\\\"Donated %s for %d rep and paid %s for a level of NeuroFlux Governor\\\", ns.nFormat(donateAmt, \\\"$0.000a\\\"), repDiff, ns.nFormat(aug.price, \\\"$0.000a\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X2F1Z3MuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJidXlfYXVncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSw2REFBNkQ7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBWSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTdELDhEQUE4RDtBQUM5RCxJQUFJLE9BQVksQ0FBQztBQUNqQixNQUFNLFVBQVUsR0FBcUQ7SUFDakUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ1osQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsZUFBZTtDQUNoQyxDQUFDO0FBRUYscUpBQXFKO0FBQ3JKLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBUyxFQUFFLElBQWM7SUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixJQUFJO1FBQ0EsT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDbEM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU87S0FDVjtJQUVELGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLElBQUksY0FBd0IsQ0FBQztJQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUNaLE1BQU0s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\",\"filename\":\"buy_augs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///312b682f-4d8a-416a-b26a-262d80437bd1\",\"moduleSequenceNumber\":250212},{\"filename\":\"/lib/augmentation/augmentation.js\",\"url\":\"blob:file:///2c64b785-35aa-472b-a308-92e197f7736d\",\"moduleSequenceNumber\":250227},{\"filename\":\"/lib/util.js\",\"url\":\"blob:file:///1aa89cad-91a2-425e-ba90-735afba1e132\",\"moduleSequenceNumber\":250212},{\"filename\":\"buy_augs.js\",\"url\":\"blob:file:///22c412fa-eea9-41db-bdb0-61827c2652d2\",\"moduleSequenceNumber\":353456}],\"dependents\":[],\"ramUsage\":61.85,\"server\":\"home\",\"moduleSequenceNumber\":353456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFavorToDonate\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        if (ns.getServerMaxRam(\\\"home\\\") >= 128) {\\r\\n            ns.run(\\\"mcp.js\\\");\\r\\n            break;\\r\\n        }\\r\\n        const hackPID = ns.exec(\\\"hack.js\\\", \\\"home\\\", 1, \\\"--limit\\\", 10, \\\"--rounds\\\", 1);\\r\\n        while (ns.getRunningScript(hackPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        const cctPID = ns.exec(\\\"cct.js\\\", \\\"home\\\", 1);\\r\\n        while (ns.getRunningScript(cctPID) !== null)\\r\\n            await ns.sleep(10);\\r\\n        while (ns.singularity.upgradeHomeRam())\\r\\n            await ns.sleep(10);\\r\\n        const joinPID = ns.exec(\\\"join.js\\\", \\\"home\\\", 1, \\\"-t\\\", \\\"Tian Di Hui\\\");\\r\\n        while (ns.getRunningScript(joinPID) !== null)\\r\\n            await ns.sleep(100);\\r\\n        ns.singularity.workForFaction(\\\"Tian Di Hui\\\", \\\"Hacking Contracts\\\", true);\\r\\n        if (!ns.singularity.isFocused()) {\\r\\n            ns.singularity.createProgram(\\\"BruteSSH.exe\\\", true) ||\\r\\n                ns.singularity.createProgram(\\\"FTPCrack.exe\\\", true) ||\\r\\n                ns.singularity.createProgram(\\\"relaySMTP.exe\\\", true) ||\\r\\n                ns.singularity.createProgram(\\\"HTTPWorm.exe\\\", true) ||\\r\\n                ns.singularity.createProgram(\\\"SQLInject.exe\\\", true);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnRlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInN0YXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixPQUFPLElBQUksRUFBRTtRQUNULElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUU7WUFDbkMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqQixNQUFNO1NBQ1Q7UUFFRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUk7WUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEUsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUk7WUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFaEUsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRTtZQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUzRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNuRSxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJO1lBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxFLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4RSxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUM3QixFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO2dCQUM5QyxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO2dCQUNsRCxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDO2dCQUNuRCxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO2dCQUNsRCxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDM0Q7S0FDSjtBQUNMLENBQUMifQ==\",\"filename\":\"starter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"starter.js\",\"url\":\"blob:file:///f9c8f9ce-1293-4dd1-adb7-7ef7e3e65b22\",\"moduleSequenceNumber\":840363}],\"dependents\":[],\"ramUsage\":15.35,\"server\":\"home\",\"moduleSequenceNumber\":250245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprintf(\\\"HELLO WORLD\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdF93YWl0LmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsidGVzdF93YWl0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFDOUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"test_wait.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test_wait.js\",\"url\":\"blob:file:///f909b565-99d6-4d9d-a381-c3c2a327eb8d\",\"moduleSequenceNumber\":62642}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":250246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"log.txt\",\"text\":\"16:17:03 Resetting after 45:42 [06:41:55 since the start of BitNode 12]\\n16:17:03 Chongqing (37509):\\n16:17:03   Neuregen Gene Modification\\n16:17:03   Speech Processor Implant\\n18:04:04 Resetting after 01:47:01 [08:28:56 since the start of BitNode 12]\\n18:04:04 BitRunners (134056):\\n18:04:04   Cranial Signal Processors - Gen IV\\n18:04:04   DataJack\\n22:11:49 Resetting after 04:07:44 [12:36:41 since the start of BitNode 12]\\n22:11:49 BitRunners (759636):\\n22:11:49   Artificial Bio-neural Network Implant\\n22:11:49   Embedded Netburner Module Core Implant\\n22:11:49   Cranial Signal Processors - Gen V\\n22:11:49   Neural Accelerator\\n22:22:07 Resetting after 10:18 [12:46:59 since the start of BitNode 12]\\n22:22:07 BitRunners (1000000):\\n22:22:07   Embedded Netburner Module Core V2 Upgrade\\n22:22:07   BitRunners Neurolink\\n22:31:24 Resetting after 09:17 [12:56:16 since the start of BitNode 12]\\n22:31:24 Sector-12 (23094):\\n22:31:24   CashRoot Starter Kit\\n22:31:24   Augmented Targeting I\\n22:31:24   Augmented Targeting II\\n22:31:24   Wired Reflexes\\n22:44:53 Resetting after 13:28 [13:09:45 since the start of BitNode 12]\\n22:44:53 Ishima (7505):\\n22:44:53   INFRARET Enhancement\\n22:44:53   Combat Rib I\\n22:55:42 Resetting after 10:49 [13:20:34 since the start of BitNode 12]\\n22:55:42 Volhaven (32402):\\n22:55:42   Combat Rib II\\n22:55:42   DermaForce Particle Barrier\\n22:59:28 Resetting after 03:46 [13:24:20 since the start of BitNode 12]\\n22:59:28 New Tokyo (6294):\\n22:59:28   NutriGen Implant\\n01:16:41 Ascending after 08:08 [15:41:33 since the start of BitNode 12]\\n02:19:15 Resetting after 01:02:33 [01:02:33 since the start of BitNode 12]\\n02:19:15 Tian Di Hui (6250):\\n02:19:15   Social Negotiation Assistant (S.N.A)\\n02:19:15   Nuoptimal Nootropic Injector Implant\\n02:19:15   ADR-V1 Pheromone Gene\\n02:19:15   Speech Enhancement\\n03:12:04 Resetting after 52:49 [01:55:22 since the start of BitNode 12]\\n03:12:04 CyberSec (10004):\\n03:12:04   Cranial Signal Processors - Gen I\\n03:12:04   BitWire\\n03:12:04   Synaptic Enhancement Implant\\n03:12:04   Neurotrainer I\\n04:45:18 Resetting after 01:33:14 [03:28:36 since the start of BitNode 12]\\n04:45:18 NiteSec (45007):\\n04:45:18   Embedded Netburner Module\\n04:45:18   Neural-Retention Enhancement\\n04:45:18   CRTX42-AA Gene Modification\\n04:45:18   Cranial Signal Processors - Gen II\\n04:45:18   Artificial Synaptic Potentiation\\n04:45:18   Neurotrainer II\\n06:40:38 Resetting after 01:55:20 [05:23:57 since the start of BitNode 12]\\n06:40:38 The Black Hand (100003):\\n06:40:38   Neuralstimulator\\n06:40:38   Enhanced Myelin Sheathing\\n06:40:38   Cranial Signal Processors - Gen III\\n06:40:38   The Black Hand\\n07:28:45 Resetting after 48:06 [06:12:03 since the start of BitNode 12]\\n07:28:45 Chongqing (37506):\\n07:28:45   Neuregen Gene Modification\\n07:28:45   Speech Processor Implant\\n09:27:51 Resetting after 01:59:06 [08:11:10 since the start of BitNode 12]\\n09:27:51 BitRunners (145414):\\n09:27:51   Cranial Signal Processors - Gen IV\\n09:27:51   DataJack\\n14:40:38 Resetting after 05:12:46 [13:23:56 since the start of BitNode 12]\\n14:40:38 BitRunners (824050):\\n14:40:38   Artificial Bio-neural Network Implant\\n14:40:38   Embedded Netburner Module Core Implant\\n14:40:38   Cranial Signal Processors - Gen V\\n14:40:38   Neural Accelerator\\n14:54:14 Resetting after 13:36 [13:37:32 since the start of BitNode 12]\\n14:54:14 BitRunners (1613849):\\n14:54:14   Embedded Netburner Module Core V2 Upgrade\\n14:54:14   BitRunners Neurolink\\n15:00:01 Resetting after 05:47 [13:43:19 since the start of BitNode 12]\\n15:00:01 Sector-12 (24048):\\n15:00:01   CashRoot Starter Kit\\n15:00:01   Augmented Targeting I\\n15:00:01   Augmented Targeting II\\n15:03:21 Resetting after 03:20 [13:46:39 since the start of BitNode 12]\\n15:03:21 Ishima (7571):\\n15:03:21   INFRARET Enhancement\\n15:03:21   Combat Rib I\\n15:08:55 Resetting after 05:34 [13:52:13 since the start of BitNode 12]\\n15:08:55 Volhaven (19548):\\n15:08:55   Combat Rib II\\n15:08:55   DermaForce Particle Barrier\\n15:12:01 Resetting after 03:05 [13:55:19 since the start of BitNode 12]\\n15:12:01 New Tokyo (6326):\\n15:12:01   NutriGen Implant\\n15:26:29 Resetting after 14:28 [14:09:48 since the start of BitNode 12]\\n15:26:29 Tian Di Hui (75599):\\n15:26:29   Neuroreceptor Management Implant\\n15:26:29   Nanofiber Weave\\n15:58:46 Resetting after 32:16 [14:42:04 since the start of BitNode 12]\\n15:58:46 Daedalus (145423):\\n16:58:38 Resetting after 59:52 [15:41:57 since the start of BitNode 12]\\n16:58:38 Daedalus (824063):\\n16:58:38   Embedded Netburner Module Analyze Engine\\n17:03:03 Resetting after 04:24 [15:46:21 since the start of BitNode 12]\\n17:03:03 Daedalus (2500174):\\n17:03:03   Embedded Netburner Module Core V3 Upgrade\\n17:03:03   Embedded Netburner Module Direct Memory Access Upgrade\\n17:03:03   The Red Pill\\n17:03:49 Ascending after 46 [15:47:08 since the start of BitNode 12]\\n17:03:50 Ascending after 47 [15:47:09 since the start of BitNode 12]\\n17:03:51 Ascending after 48 [15:47:10 since the start of BitNode 12]\\n17:03:52 Ascending after 49 [15:47:11 since the start of BitNode 12]\\n17:03:53 Ascending after 50 [15:47:12 since the start of BitNode 12]\\n17:03:54 Ascending after 51 [15:47:13 since the start of BitNode 12]\\n17:03:55 Ascending after 52 [15:47:14 since the start of BitNode 12]\\n17:03:56 Ascending after 53 [15:47:15 since the start of BitNode 12]\\n17:03:57 Ascending after 54 [15:47:16 since the start of BitNode 12]\\n17:03:58 Ascending after 55 [15:47:17 since the start of BitNode 12]\\n17:03:59 Ascending after 56 [15:47:18 since the start of BitNode 12]\\n17:04:00 Ascending after 57 [15:47:19 since the start of BitNode 12]\\n17:04:01 Ascending after 58 [15:47:20 since the start of BitNode 12]\\n17:04:02 Ascending after 59 [15:47:21 since the start of BitNode 12]\\n17:04:03 Ascending after 01:00 [15:47:22 since the start of BitNode 12]\\n17:04:04 Ascending after 01:01 [15:47:23 since the start of BitNode 12]\\n17:04:05 Ascending after 01:02 [15:47:24 since the start of BitNode 12]\\n17:04:06 Ascending after 01:03 [15:47:25 since the start of BitNode 12]\\n17:04:07 Ascending after 01:04 [15:47:26 since the start of BitNode 12]\\n17:04:08 Ascending after 01:05 [15:47:27 since the start of BitNode 12]\\n17:04:09 Ascending after 01:06 [15:47:28 since the start of BitNode 12]\\n17:04:10 Ascending after 01:07 [15:47:29 since the start of BitNode 12]\\n17:04:11 Ascending after 01:08 [15:47:30 since the start of BitNode 12]\\n17:04:12 Ascending after 01:09 [15:47:31 since the start of BitNode 12]\\n17:04:13 Ascending after 01:10 [15:47:32 since the start of BitNode 12]\\n17:04:14 Ascending after 01:11 [15:47:33 since the start of BitNode 12]\\n17:04:15 Ascending after 01:12 [15:47:34 since the start of BitNode 12]\\n17:04:16 Ascending after 01:13 [15:47:35 since the start of BitNode 12]\\n17:04:17 Ascending after 01:14 [15:47:36 since the start of BitNode 12]\\n17:04:18 Ascending after 01:15 [15:47:37 since the start of BitNode 12]\\n17:04:19 Ascending after 01:16 [15:47:38 since the start of BitNode 12]\\n17:04:20 Ascending after 01:17 [15:47:39 since the start of BitNode 12]\\n17:04:21 Ascending after 01:18 [15:47:40 since the start of BitNode 12]\\n17:04:22 Ascending after 01:19 [15:47:41 since the start of BitNode 12]\\n17:04:23 Ascending after 01:20 [15:47:42 since the start of BitNode 12]\\n17:04:24 Ascending after 01:21 [15:47:43 since the start of BitNode 12]\\n17:04:25 Ascending after 01:22 [15:47:44 since the start of BitNode 12]\\n17:04:26 Ascending after 01:23 [15:47:45 since the start of BitNode 12]\\n17:04:27 Ascending after 01:24 [15:47:46 since the start of BitNode 12]\\n17:04:28 Ascending after 01:25 [15:47:47 since the start of BitNode 12]\\n17:04:29 Ascending after 01:26 [15:47:48 since the start of BitNode 12]\\n17:04:30 Ascending after 01:27 [15:47:49 since the start of BitNode 12]\\n17:04:31 Ascending after 01:28 [15:47:50 since the start of BitNode 12]\\n17:04:32 Ascending after 01:29 [15:47:51 since the start of BitNode 12]\\n17:04:33 Ascending after 01:30 [15:47:52 since the start of BitNode 12]\\n17:04:34 Ascending after 01:31 [15:47:53 since the start of BitNode 12]\\n17:04:35 Ascending after 01:32 [15:47:54 since the start of BitNode 12]\\n17:04:36 Ascending after 01:33 [15:47:55 since the start of BitNode 12]\\n17:04:37 Ascending after 01:34 [15:47:56 since the start of BitNode 12]\\n17:04:38 Ascending after 01:35 [15:47:57 since the start of BitNode 12]\\n17:04:39 Ascending after 01:36 [15:47:58 since the start of BitNode 12]\\n17:04:40 Ascending after 01:37 [15:47:59 since the start of BitNode 12]\\n17:04:41 Ascending after 01:38 [15:48:00 since the start of BitNode 12]\\n17:04:42 Ascending after 01:39 [15:48:01 since the start of BitNode 12]\\n17:04:43 Ascending after 01:40 [15:48:02 since the start of BitNode 12]\\n17:04:44 Ascending after 01:41 [15:48:03 since the start of BitNode 12]\\n17:04:45 Ascending after 01:42 [15:48:04 since the start of BitNode 12]\\n17:04:46 Ascending after 01:43 [15:48:05 since the start of BitNode 12]\\n17:04:47 Ascending after 01:44 [15:48:06 since the start of BitNode 12]\\n17:04:51 Ascending after 01:48 [15:48:10 since the start of BitNode 12]\\n17:04:52 Ascending after 01:49 [15:48:11 since the start of BitNode 12]\\n17:04:53 Ascending after 01:50 [15:48:12 since the start of BitNode 12]\\n17:04:54 Ascending after 01:51 [15:48:13 since the start of BitNode 12]\\n17:04:55 Ascending after 01:52 [15:48:14 since the start of BitNode 12]\\n17:04:56 Ascending after 01:53 [15:48:15 since the start of BitNode 12]\\n17:04:57 Ascending after 01:54 [15:48:16 since the start of BitNode 12]\\n17:04:58 Ascending after 01:55 [15:48:17 since the start of BitNode 12]\\n17:04:59 Ascending after 01:56 [15:48:18 since the start of BitNode 12]\\n17:05:00 Ascending after 01:57 [15:48:19 since the start of BitNode 12]\\n17:05:01 Ascending after 01:58 [15:48:20 since the start of BitNode 12]\\n17:05:02 Ascending after 01:59 [15:48:21 since the start of BitNode 12]\\n17:05:03 Ascending after 02:00 [15:48:22 since the start of BitNode 12]\\n17:05:04 Ascending after 02:01 [15:48:23 since the start of BitNode 12]\\n17:05:05 Ascending after 02:02 [15:48:24 since the start of BitNode 12]\\n17:05:06 Ascending after 02:03 [15:48:25 since the start of BitNode 12]\\n17:05:07 Ascending after 02:04 [15:48:26 since the start of BitNode 12]\\n17:05:08 Ascending after 02:05 [15:48:27 since the start of BitNode 12]\\n17:05:09 Ascending after 02:06 [15:48:28 since the start of BitNode 12]\\n17:05:10 Ascending after 02:07 [15:48:29 since the start of BitNode 12]\\n17:05:11 Ascending after 02:08 [15:48:30 since the start of BitNode 12]\\n17:05:12 Ascending after 02:09 [15:48:31 since the start of BitNode 12]\\n17:05:13 Ascending after 02:10 [15:48:32 since the start of BitNode 12]\\n17:05:14 Ascending after 02:11 [15:48:33 since the start of BitNode 12]\\n17:05:15 Ascending after 02:12 [15:48:34 since the start of BitNode 12]\\n17:05:16 Ascending after 02:13 [15:48:35 since the start of BitNode 12]\\n17:05:17 Ascending after 02:14 [15:48:36 since the start of BitNode 12]\\n17:05:18 Ascending after 02:15 [15:48:37 since the start of BitNode 12]\\n17:05:19 Ascending after 02:16 [15:48:38 since the start of BitNode 12]\\n17:05:20 Ascending after 02:17 [15:48:39 since the start of BitNode 12]\\n17:05:21 Ascending after 02:18 [15:48:40 since the start of BitNode 12]\\n17:05:22 Ascending after 02:19 [15:48:41 since the start of BitNode 12]\\n17:05:23 Ascending after 02:20 [15:48:42 since the start of BitNode 12]\\n17:05:24 Ascending after 02:21 [15:48:43 since the start of BitNode 12]\\n17:05:25 Ascending after 02:22 [15:48:44 since the start of BitNode 12]\\n17:05:26 Ascending after 02:23 [15:48:45 since the start of BitNode 12]\\n17:05:27 Ascending after 02:24 [15:48:46 since the start of BitNode 12]\\n17:05:28 Ascending after 02:25 [15:48:47 since the start of BitNode 12]\\n17:05:29 Ascending after 02:26 [15:48:48 since the start of BitNode 12]\\n17:05:30 Ascending after 02:27 [15:48:49 since the start of BitNode 12]\\n17:05:31 Ascending after 02:28 [15:48:50 since the start of BitNode 12]\\n17:05:32 Ascending after 02:29 [15:48:51 since the start of BitNode 12]\\n17:05:33 Ascending after 02:30 [15:48:52 since the start of BitNode 12]\\n17:05:34 Ascending after 02:31 [15:48:53 since the start of BitNode 12]\\n17:05:35 Ascending after 02:32 [15:48:54 since the start of BitNode 12]\\n17:05:36 Ascending after 02:33 [15:48:55 since the start of BitNode 12]\\n17:05:37 Ascending after 02:34 [15:48:56 since the start of BitNode 12]\\n17:05:38 Ascending after 02:35 [15:48:57 since the start of BitNode 12]\\n17:05:39 Ascending after 02:36 [15:48:58 since the start of BitNode 12]\\n17:05:40 Ascending after 02:37 [15:48:59 since the start of BitNode 12]\\n17:05:41 Ascending after 02:38 [15:49:00 since the start of BitNode 12]\\n17:05:42 Ascending after 02:39 [15:49:01 since the start of BitNode 12]\\n17:05:43 Ascending after 02:40 [15:49:02 since the start of BitNode 12]\\n17:05:44 Ascending after 02:41 [15:49:03 since the start of BitNode 12]\\n17:05:45 Ascending after 02:42 [15:49:04 since the start of BitNode 12]\\n17:05:46 Ascending after 02:43 [15:49:05 since the start of BitNode 12]\\n17:05:47 Ascending after 02:44 [15:49:06 since the start of BitNode 12]\\n17:05:48 Ascending after 02:45 [15:49:07 since the start of BitNode 12]\\n17:05:49 Ascending after 02:46 [15:49:08 since the start of BitNode 12]\\n17:05:50 Ascending after 02:47 [15:49:09 since the start of BitNode 12]\\n17:05:51 Ascending after 02:48 [15:49:10 since the start of BitNode 12]\\n17:05:52 Ascending after 02:49 [15:49:11 since the start of BitNode 12]\\n17:05:53 Ascending after 02:50 [15:49:12 since the start of BitNode 12]\\n17:05:54 Ascending after 02:51 [15:49:13 since the start of BitNode 12]\\n17:05:56 Ascending after 02:52 [15:49:14 since the start of BitNode 12]\\n17:05:57 Ascending after 02:53 [15:49:15 since the start of BitNode 12]\\n17:05:58 Ascending after 02:54 [15:49:16 since the start of BitNode 12]\\n17:05:59 Ascending after 02:55 [15:49:17 since the start of BitNode 12]\\n17:06:00 Ascending after 02:56 [15:49:18 since the start of BitNode 12]\\n17:06:01 Ascending after 02:57 [15:49:19 since the start of BitNode 12]\\n17:06:02 Ascending after 02:58 [15:49:20 since the start of BitNode 12]\\n17:06:03 Ascending after 02:59 [15:49:21 since the start of BitNode 12]\\n17:06:04 Ascending after 03:00 [15:49:22 since the start of BitNode 12]\\n17:06:05 Ascending after 03:01 [15:49:23 since the start of BitNode 12]\\n17:06:06 Ascending after 03:02 [15:49:24 since the start of BitNode 12]\\n17:06:07 Ascending after 03:03 [15:49:25 since the start of BitNode 12]\\n17:06:08 Ascending after 03:04 [15:49:26 since the start of BitNode 12]\\n17:06:09 Ascending after 03:05 [15:49:27 since the start of BitNode 12]\\n17:06:10 Ascending after 03:06 [15:49:28 since the start of BitNode 12]\\n17:06:11 Ascending after 03:07 [15:49:29 since the start of BitNode 12]\\n17:06:12 Ascending after 03:08 [15:49:30 since the start of BitNode 12]\\n17:06:13 Ascending after 03:09 [15:49:31 since the start of BitNode 12]\\n17:06:14 Ascending after 03:10 [15:49:32 since the start of BitNode 12]\\n17:06:15 Ascending after 03:11 [15:49:33 since the start of BitNode 12]\\n17:06:16 Ascending after 03:12 [15:49:34 since the start of BitNode 12]\\n17:06:17 Ascending after 03:13 [15:49:35 since the start of BitNode 12]\\n17:06:18 Ascending after 03:14 [15:49:36 since the start of BitNode 12]\\n17:06:19 Ascending after 03:15 [15:49:37 since the start of BitNode 12]\\n17:06:20 Ascending after 03:16 [15:49:38 since the start of BitNode 12]\\n17:06:21 Ascending after 03:17 [15:49:39 since the start of BitNode 12]\\n17:06:22 Ascending after 03:18 [15:49:40 since the start of BitNode 12]\\n17:06:23 Ascending after 03:19 [15:49:41 since the start of BitNode 12]\\n17:06:24 Ascending after 03:20 [15:49:42 since the start of BitNode 12]\\n17:06:25 Ascending after 03:21 [15:49:43 since the start of BitNode 12]\\n17:06:26 Ascending after 03:22 [15:49:44 since the start of BitNode 12]\\n17:06:27 Ascending after 03:23 [15:49:45 since the start of BitNode 12]\\n17:06:28 Ascending after 03:24 [15:49:46 since the start of BitNode 12]\\n17:06:29 Ascending after 03:25 [15:49:47 since the start of BitNode 12]\\n17:06:30 Ascending after 03:26 [15:49:48 since the start of BitNode 12]\\n17:06:31 Ascending after 03:27 [15:49:49 since the start of BitNode 12]\\n17:06:32 Ascending after 03:28 [15:49:50 since the start of BitNode 12]\\n17:06:33 Ascending after 03:29 [15:49:51 since the start of BitNode 12]\\n17:06:34 Ascending after 03:30 [15:49:52 since the start of BitNode 12]\\n17:06:35 Ascending after 03:31 [15:49:53 since the start of BitNode 12]\\n17:06:36 Ascending after 03:32 [15:49:54 since the start of BitNode 12]\\n17:06:37 Ascending after 03:33 [15:49:55 since the start of BitNode 12]\\n17:06:38 Ascending after 03:34 [15:49:56 since the start of BitNode 12]\\n17:06:39 Ascending after 03:35 [15:49:57 since the start of BitNode 12]\\n17:06:40 Ascending after 03:36 [15:49:58 since the start of BitNode 12]\\n17:06:41 Ascending after 03:37 [15:49:59 since the start of BitNode 12]\\n17:06:42 Ascending after 03:38 [15:50:00 since the start of BitNode 12]\\n17:06:43 Ascending after 03:39 [15:50:01 since the start of BitNode 12]\\n17:06:44 Ascending after 03:40 [15:50:02 since the start of BitNode 12]\\n17:06:45 Ascending after 03:41 [15:50:03 since the start of BitNode 12]\\n17:06:46 Ascending after 03:42 [15:50:04 since the start of BitNode 12]\\n17:06:47 Ascending after 03:43 [15:50:05 since the start of BitNode 12]\\n17:06:48 Ascending after 03:44 [15:50:06 since the start of BitNode 12]\\n17:06:49 Ascending after 03:45 [15:50:07 since the start of BitNode 12]\\n17:06:50 Ascending after 03:46 [15:50:08 since the start of BitNode 12]\\n17:06:51 Ascending after 03:47 [15:50:09 since the start of BitNode 12]\\n17:06:52 Ascending after 03:48 [15:50:10 since the start of BitNode 12]\\n17:06:53 Ascending after 03:49 [15:50:11 since the start of BitNode 12]\\n17:06:54 Ascending after 03:50 [15:50:12 since the start of BitNode 12]\\n17:06:55 Ascending after 03:51 [15:50:13 since the start of BitNode 12]\\n17:06:56 Ascending after 03:52 [15:50:14 since the start of BitNode 12]\\n17:06:57 Ascending after 03:53 [15:50:15 since the start of BitNode 12]\\n17:06:58 Ascending after 03:54 [15:50:16 since the start of BitNode 12]\\n17:06:59 Ascending after 03:55 [15:50:17 since the start of BitNode 12]\\n17:07:00 Ascending after 03:56 [15:50:18 since the start of BitNode 12]\\n17:07:01 Ascending after 03:57 [15:50:19 since the start of BitNode 12]\\n17:07:02 Ascending after 03:58 [15:50:20 since the start of BitNode 12]\\n17:07:03 Ascending after 03:59 [15:50:21 since the start of BitNode 12]\\n17:07:04 Ascending after 04:00 [15:50:22 since the start of BitNode 12]\\n17:07:05 Ascending after 04:01 [15:50:23 since the start of BitNode 12]\\n17:07:06 Ascending after 04:02 [15:50:24 since the start of BitNode 12]\\n17:07:07 Ascending after 04:03 [15:50:25 since the start of BitNode 12]\\n17:07:08 Ascending after 04:04 [15:50:26 since the start of BitNode 12]\\n17:07:09 Ascending after 04:05 [15:50:27 since the start of BitNode 12]\\n17:07:10 Ascending after 04:06 [15:50:28 since the start of BitNode 12]\\n17:07:11 Ascending after 04:07 [15:50:29 since the start of BitNode 12]\\n17:07:12 Ascending after 04:08 [15:50:30 since the start of BitNode 12]\\n17:07:13 Ascending after 04:09 [15:50:31 since the start of BitNode 12]\\n17:07:14 Ascending after 04:10 [15:50:32 since the start of BitNode 12]\\n17:07:15 Ascending after 04:11 [15:50:33 since the start of BitNode 12]\\n17:07:16 Ascending after 04:12 [15:50:34 since the start of BitNode 12]\\n17:07:17 Ascending after 04:13 [15:50:35 since the start of BitNode 12]\\n17:07:18 Ascending after 04:14 [15:50:36 since the start of BitNode 12]\\n17:07:19 Ascending after 04:15 [15:50:37 since the start of BitNode 12]\\n17:07:20 Ascending after 04:16 [15:50:38 since the start of BitNode 12]\\n17:07:21 Ascending after 04:17 [15:50:39 since the start of BitNode 12]\\n17:07:22 Ascending after 04:18 [15:50:40 since the start of BitNode 12]\\n17:07:23 Ascending after 04:19 [15:50:41 since the start of BitNode 12]\\n17:07:24 Ascending after 04:20 [15:50:42 since the start of BitNode 12]\\n17:07:25 Ascending after 04:21 [15:50:43 since the start of BitNode 12]\\n17:07:26 Ascending after 04:22 [15:50:44 since the start of BitNode 12]\\n17:07:27 Ascending after 04:23 [15:50:45 since the start of BitNode 12]\\n17:07:28 Ascending after 04:24 [15:50:46 since the start of BitNode 12]\\n17:07:29 Ascending after 04:25 [15:50:47 since the start of BitNode 12]\\n17:07:30 Ascending after 04:26 [15:50:48 since the start of BitNode 12]\\n17:07:31 Ascending after 04:27 [15:50:49 since the start of BitNode 12]\\n17:07:32 Ascending after 04:28 [15:50:50 since the start of BitNode 12]\\n17:07:33 Ascending after 04:29 [15:50:51 since the start of BitNode 12]\\n17:07:34 Ascending after 04:30 [15:50:52 since the start of BitNode 12]\\n17:07:35 Ascending after 04:31 [15:50:53 since the start of BitNode 12]\\n17:07:36 Ascending after 04:32 [15:50:54 since the start of BitNode 12]\\n17:07:37 Ascending after 04:33 [15:50:55 since the start of BitNode 12]\\n17:07:38 Ascending after 04:34 [15:50:56 since the start of BitNode 12]\\n17:07:39 Ascending after 04:35 [15:50:57 since the start of BitNode 12]\\n17:07:40 Ascending after 04:36 [15:50:58 since the start of BitNode 12]\\n17:07:41 Ascending after 04:37 [15:50:59 since the start of BitNode 12]\\n17:07:42 Ascending after 04:38 [15:51:00 since the start of BitNode 12]\\n17:07:43 Ascending after 04:39 [15:51:01 since the start of BitNode 12]\\n17:07:44 Ascending after 04:40 [15:51:02 since the start of BitNode 12]\\n17:07:45 Ascending after 04:41 [15:51:03 since the start of BitNode 12]\\n17:07:46 Ascending after 04:42 [15:51:04 since the start of BitNode 12]\\n17:07:47 Ascending after 04:43 [15:51:05 since the start of BitNode 12]\\n17:07:48 Ascending after 04:44 [15:51:06 since the start of BitNode 12]\\n17:07:49 Ascending after 04:45 [15:51:07 since the start of BitNode 12]\\n17:07:50 Ascending after 04:46 [15:51:08 since the start of BitNode 12]\\n17:07:51 Ascending after 04:47 [15:51:09 since the start of BitNode 12]\\n17:07:52 Ascending after 04:48 [15:51:10 since the start of BitNode 12]\\n17:07:53 Ascending after 04:49 [15:51:11 since the start of BitNode 12]\\n17:07:54 Ascending after 04:50 [15:51:12 since the start of BitNode 12]\\n17:07:55 Ascending after 04:51 [15:51:13 since the start of BitNode 12]\\n17:07:56 Ascending after 04:52 [15:51:14 since the start of BitNode 12]\\n17:07:57 Ascending after 04:53 [15:51:15 since the start of BitNode 12]\\n17:07:58 Ascending after 04:54 [15:51:16 since the start of BitNode 12]\\n17:07:59 Ascending after 04:55 [15:51:17 since the start of BitNode 12]\\n17:08:00 Ascending after 04:56 [15:51:18 since the start of BitNode 12]\\n17:08:01 Ascending after 04:57 [15:51:19 since the start of BitNode 12]\\n17:08:02 Ascending after 04:58 [15:51:20 since the start of BitNode 12]\\n17:08:03 Ascending after 04:59 [15:51:21 since the start of BitNode 12]\\n17:08:04 Ascending after 05:00 [15:51:22 since the start of BitNode 12]\\n17:08:05 Ascending after 05:01 [15:51:23 since the start of BitNode 12]\\n17:08:06 Ascending after 05:02 [15:51:24 since the start of BitNode 12]\\n17:08:10 Ascending after 05:06 [15:51:28 since the start of BitNode 12]\\n10:01:35 Resetting after 16:53:24 [16:53:24 since the start of BitNode 9]\\n10:01:35 Tian Di Hui (6252):\\n10:01:35   Social Negotiation Assistant (S.N.A)\\n10:01:35   Nuoptimal Nootropic Injector Implant\\n10:01:35   ADR-V1 Pheromone Gene\\n10:01:35   Speech Enhancement\\n13:12:54 Resetting after 03:11:18 [20:04:43 since the start of BitNode 9]\\n13:12:54 CyberSec (68595):\\n13:12:54   Cranial Signal Processors - Gen I\\n13:12:54   Cranial Signal Processors - Gen II\\n13:12:54   BitWire\\n13:12:54   Synaptic Enhancement Implant\\n13:12:54   Neurotrainer I\\n07:34:42 Resetting after 42:21:48 [62:26:31 since the start of BitNode 9]\\n07:34:42 NiteSec (538780):\\n07:34:42   DataJack\\n07:34:42   Embedded Netburner Module\\n07:34:42   Neural-Retention Enhancement\\n07:34:42   CRTX42-AA Gene Modification\\n07:34:42   Artificial Synaptic Potentiation\\n07:34:42   Neurotrainer II\\n09:26:42 Resetting after 73:52:00 [136:18:31 since the start of BitNode 9]\\n09:26:42 The Black Hand (519073):\\n09:26:42   Cranial Signal Processors - Gen III\\n09:26:42   Cranial Signal Processors - Gen IV\\n09:26:42   The Black Hand\\n12:42:50 Resetting after 03:16:07 [139:34:39 since the start of BitNode 9]\\n12:42:50 Chongqing (37502):\\n12:42:50   Neuregen Gene Modification\\n12:42:50   Speech Processor Implant\\n08:33:58 Resetting after 19:51:07 [159:25:46 since the start of BitNode 9]\\n08:33:58 BitRunners (69375):\\n13:45:16 Resetting after 29:11:19 [188:37:05 since the start of BitNode 9]\\n13:45:16 The Black Hand (669206):\\n13:45:16   Neuralstimulator\\n13:45:16   Embedded Netburner Module Core Implant\\n23:58:34 Resetting after 10:13:18 [198:50:23 since the start of BitNode 9]\\n23:58:34 BitRunners (393122):\\n23:58:34   Neural Accelerator\\n23:58:34   Enhanced Myelin Sheathing\\n11:08:42 Resetting after 107:10:08 [306:00:31 since the start of BitNode 9]\\n11:08:42 BitRunners (5403353):\\n11:08:42   Embedded Netburner Module Core V2 Upgrade\\n11:08:42   BitRunners Neurolink\\n11:08:42   Artificial Bio-neural Network Implant\\n11:08:42   Cranial Signal Processors - Gen V\\n16:57:51 Resetting after 05:49:08 [311:49:40 since the start of BitNode 9]\\n16:57:51 BitRunners (1535680):\\n09:33:07 Resetting after 17:25:09 [352:24:56 since the start of BitNode 9]\\n09:33:07 BitRunners (5855724):\\n09:33:07   PCMatrix\\n09:33:07   Neuroreceptor Management Implant\\n09:33:07   CashRoot Starter Kit\\n16:33:39 Resetting after 07:00:32 [359:25:29 since the start of BitNode 9]\\n16:33:39 Fulcrum Secret Technologies (11740):\\n14:00:54 Resetting after 21:27:14 [380:52:43 since the start of BitNode 9]\\n14:00:54 ECorp (165387):\\n14:00:54   Embedded Netburner Module Core V3 Upgrade\\n14:00:54   Embedded Netburner Module Direct Memory Access Upgrade\\n14:00:54   Embedded Netburner Module Analyze Engine\\n16:30:50 Resetting after 02:29:55 [383:22:39 since the start of BitNode 9]\\n16:30:50 ECorp (880669):\\n16:30:50   PC Direct-Neural Interface\\n16:30:50   PC Direct-Neural Interface NeuroNet Injector\\n16:30:50   PC Direct-Neural Interface Optimization Submodule\\n17:02:42 Resetting after 31:52 [383:54:31 since the start of BitNode 9]\\n17:02:42 Daedalus (69405):\\n18:42:05 Resetting after 01:39:23 [385:33:54 since the start of BitNode 9]\\n18:42:05 Daedalus (393123):\\n19:06:00 Resetting after 23:54 [385:57:49 since the start of BitNode 9]\\n19:06:00 Daedalus (2500000):\\n19:06:00   The Red Pill\\n04:12:02 Resetting after 09:06:02 [395:03:51 since the start of BitNode 9]\\n04:12:02 BitRunners (34346490):\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"suppression\":0,\"activeSuppressionThreads\":[],\"suppressionIntervalID\":null,\"suppressionLastUpdateTime\":0}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-484583-Sector-12.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":903699520,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"20.8.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":250470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":250472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":250474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":250476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":86.56,\"minDifficulty\":83,\"moneyAvailable\":16211840411.750004,\"moneyMax\":16211840411.750004,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1061,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"86.9.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":250438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":250440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":250442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":250444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":5361931693,\"moneyMax\":13404829232.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1125,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"23.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":250510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":250512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":250514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":250516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":185,\"hackDifficulty\":185,\"minDifficulty\":62,\"moneyAvailable\":2910204474.6000004,\"moneyMax\":7275511186.500002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1093,\"serverGrowth\":67}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"4.4.4.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":250462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":250464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///a1d9c607-2d28-4932-a9b5-4fd6f9d8ed45\",\"moduleSequenceNumber\":252697}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":252697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///cff4e32e-105c-48aa-9a72-680da5c378c1\",\"moduleSequenceNumber\":256570}],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":256570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///4bc0bc9c-40b4-43b2-85c5-ad85fa2484f3\",\"moduleSequenceNumber\":354211}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":354211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237.5,\"hackDifficulty\":237.5,\"minDifficulty\":79,\"moneyAvailable\":2721383681.8,\"moneyMax\":6803459204.500001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1064,\"serverGrowth\":79}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"62.4.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":250550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":250552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":250554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":250556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":3930307239.4,\"moneyMax\":9825768098.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":984,\"serverGrowth\":87}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"62.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":250478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":250480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":250482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":250484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":1913629322.3000002,\"moneyMax\":4784073305.750001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1083,\"serverGrowth\":62}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"49.8.2.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":250502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":250504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e4d2b99f-2855-4038-ba10-1fcc2bd41f31\",\"moduleSequenceNumber\":252695}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":252695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///77bfd94c-ea92-43c1-be97-215499c85746\",\"moduleSequenceNumber\":256573}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":256573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///92dad0f4-1c05-4630-965c-1127a5a68fa6\",\"moduleSequenceNumber\":354214}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":354214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237.5,\"hackDifficulty\":237.5,\"minDifficulty\":79,\"moneyAvailable\":2036476958.1000001,\"moneyMax\":5091192395.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1031,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"55.1.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":250542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":250544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":250546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":250548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":2037457259,\"moneyMax\":5093643147.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1223,\"serverGrowth\":88}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"49.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":250422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":250424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":250426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":250428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":245,\"hackDifficulty\":245,\"minDifficulty\":82,\"moneyAvailable\":2231584307.7000003,\"moneyMax\":5578960769.250001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1170,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"28.4.9.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":250414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":250416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e970d471-b02d-4ddc-9ff6-d812899267bf\",\"moduleSequenceNumber\":252696}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":252696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///2302582e-60d0-4fad-8c58-5aaf6a3df404\",\"moduleSequenceNumber\":256567}],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":256567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///7f1ef0b5-d1dc-48e7-aacd-030bfb3d1c74\",\"moduleSequenceNumber\":354208}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":354208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":227.5,\"hackDifficulty\":227.5,\"minDifficulty\":76,\"moneyAvailable\":158970086.6,\"moneyMax\":397425216.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1099,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"57.0.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":250518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":250520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":250522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":250524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":100000,\"moneyMax\":250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1377,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"22.4.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":250446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":250448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":250450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":250452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":222.5,\"hackDifficulty\":222.5,\"minDifficulty\":74,\"moneyAvailable\":108773918.7,\"moneyMax\":271934796.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1044,\"serverGrowth\":78}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"58.9.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":250582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":250584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":250586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":250588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":210,\"hackDifficulty\":210,\"minDifficulty\":70,\"moneyAvailable\":81431785.9,\"moneyMax\":203579464.75000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":48}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"46.2.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":250390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":250392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":250394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":250396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":215,\"hackDifficulty\":215,\"minDifficulty\":72,\"moneyAvailable\":89845852.5,\"moneyMax\":224614631.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":68}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"6.7.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":250486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":250488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///24228341-bca6-4ae8-971d-db62d3036b80\",\"moduleSequenceNumber\":252694}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":252694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///0212e0e7-0b89-4c29-996b-e9db48e08a29\",\"moduleSequenceNumber\":256571}],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":256571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///7e2fa77d-fefb-4b5c-89a8-2b1ac7f89c85\",\"moduleSequenceNumber\":354212}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":354212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237.5,\"hackDifficulty\":237.5,\"minDifficulty\":79,\"moneyAvailable\":73904327.4,\"moneyMax\":184760818.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"74.7.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":250494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":250496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c2740fc7-0a52-4ec0-a545-5d942d67a525\",\"moduleSequenceNumber\":252691}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":252691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///c76c584e-2016-4d17-bb17-224d93ce6c71\",\"moduleSequenceNumber\":256572}],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":256572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///6a49bd26-b709-4678-9f02-6d124db0b76d\",\"moduleSequenceNumber\":354213}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":354213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":212.5,\"hackDifficulty\":212.5,\"minDifficulty\":71,\"moneyAvailable\":74438502.2,\"moneyMax\":186096255.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"80.6.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":250590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":250592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":250594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":250596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":220,\"hackDifficulty\":220,\"minDifficulty\":73,\"moneyAvailable\":97756366.7,\"moneyMax\":244390916.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"75.8.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":250342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":250344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///43608b15-a0ad-4959-88db-8f2f97b94641\",\"moduleSequenceNumber\":252682}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":252682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///c26c0685-c02f-4f7c-a684-d2d61d6d9998\",\"moduleSequenceNumber\":256562}],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":256562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///1cac50ae-a839-4a00-8e6b-d45916731a18\",\"moduleSequenceNumber\":354203}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":354203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":207.5,\"hackDifficulty\":207.5,\"minDifficulty\":69,\"moneyAvailable\":115041662.30000001,\"moneyMax\":287604155.75000006,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":890,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"40.4.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":250398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":250400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///26dd53a7-c7d0-4a35-8265-f7ada74b2d42\",\"moduleSequenceNumber\":252687}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":252687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///7379b93e-5334-4e63-a426-74da9f9d6750\",\"moduleSequenceNumber\":256565}],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":256565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d796adea-164a-4232-9492-f7141b8df2b4\",\"moduleSequenceNumber\":354206}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":354206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":185,\"hackDifficulty\":185,\"minDifficulty\":62,\"moneyAvailable\":79097064.3,\"moneyMax\":197742660.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"37.1.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":250358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":250360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///206662f0-92fd-4e61-be1a-2f6c9c8463cd\",\"moduleSequenceNumber\":252683}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":252683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///4ca8a2fa-8a01-47b2-ae36-bcaf3a81337f\",\"moduleSequenceNumber\":256563}],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":256563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///9e748cf0-746c-4337-9094-8af797704427\",\"moduleSequenceNumber\":354204}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":354204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":175,\"hackDifficulty\":175,\"minDifficulty\":58,\"moneyAvailable\":66728623.900000006,\"moneyMax\":166821559.75000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":81}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-596673.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[100,72,50,77,46,13,60],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"94.5.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":250350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":250352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":250354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":250356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192.5,\"hackDifficulty\":192.5,\"minDifficulty\":64,\"moneyAvailable\":86786156.10000001,\"moneyMax\":216965390.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":935,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"62.9.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":250790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":250792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":250794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":250796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":157.5,\"hackDifficulty\":157.5,\"minDifficulty\":53,\"moneyAvailable\":76189989.5,\"moneyMax\":190474973.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"10.7.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":250630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":250632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":250634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":250636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":200,\"hackDifficulty\":200,\"minDifficulty\":67,\"moneyAvailable\":116608997.80000001,\"moneyMax\":291522494.50000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814156-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[126,151,66,93,159,14,28,54,102,110,192,152,88,53,76,36,182,5,28,67,11,151,142,2,48,6,97,112,96,104],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"27.5.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":250574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":250576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///26245247-0365-49f1-97f9-ad161069b4a9\",\"moduleSequenceNumber\":252689}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":252689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///dffbf6f2-0919-4e88-9d95-6a27c0d0496a\",\"moduleSequenceNumber\":256574}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":256574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///595b8f21-59e2-4208-8444-efd1b36c27d7\",\"moduleSequenceNumber\":354215}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":354215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":235,\"hackDifficulty\":235,\"minDifficulty\":78,\"moneyAvailable\":95091993.60000001,\"moneyMax\":237729984,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":899,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"47.5.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":250558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":250560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":250562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":250564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152.5,\"hackDifficulty\":152.5,\"minDifficulty\":51,\"moneyAvailable\":91322588.60000001,\"moneyMax\":228306471.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":787,\"serverGrowth\":69}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"96.2.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":250374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":250376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":250378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":250380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":165,\"hackDifficulty\":165,\"minDifficulty\":55,\"moneyAvailable\":75108476.9,\"moneyMax\":187771192.25000003,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"6.0.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":250382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":250384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1ab37040-6ef2-46a0-b0c8-2a1b62957453\",\"moduleSequenceNumber\":252686}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":252686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///da0c2074-3449-4411-b357-0ac917be32c0\",\"moduleSequenceNumber\":256564}],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":256564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d78d45d0-4a1d-45c9-b484-74bd0f0fcb27\",\"moduleSequenceNumber\":354205}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":354205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":197.5,\"hackDifficulty\":197.5,\"minDifficulty\":66,\"moneyAvailable\":88736039.2,\"moneyMax\":221840098,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"73.7.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":250598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":250600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":250602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":250604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":145085103.70000002,\"moneyMax\":362712759.25000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":62}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"38.7.4.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":250326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":250328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///af57e558-3552-4304-989c-db8f9e29addf\",\"moduleSequenceNumber\":252679}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":252679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///e49490df-8938-4169-ba05-faae210bb06e\",\"moduleSequenceNumber\":256560}],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":256560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///50ded0a6-646a-4d91-b349-65ee66e32244\",\"moduleSequenceNumber\":354201}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":354201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":197.5,\"hackDifficulty\":197.5,\"minDifficulty\":66,\"moneyAvailable\":150704316.4,\"moneyMax\":376760791,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"68.6.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":250366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":250368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":250370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":250372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":167.5,\"hackDifficulty\":167.5,\"minDifficulty\":56,\"moneyAvailable\":123881489.5,\"moneyMax\":309703723.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":777,\"serverGrowth\":76}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"93.4.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":250606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":250608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":250610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":250612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":185,\"hackDifficulty\":185,\"minDifficulty\":62,\"moneyAvailable\":140068573.8,\"moneyMax\":350171434.50000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"57.2.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":250334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":250336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6ede4596-72e1-4e87-95b6-cb0449f218e5\",\"moduleSequenceNumber\":252681}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":252681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///02983a05-70df-48e4-9dc3-8c87b6a47a86\",\"moduleSequenceNumber\":256561}],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":256561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///72480a01-6b87-40e2-8930-4a02e6497eb9\",\"moduleSequenceNumber\":354202}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":354202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":106212162.9,\"moneyMax\":265530407.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"27.0.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":250622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":250624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///aa7bd55e-0263-4e8c-ac35-902f31fff528\",\"moduleSequenceNumber\":252685}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":252685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///91fc75c4-5c48-48df-a023-ff39b48cd2df\",\"moduleSequenceNumber\":256575}],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":256575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///f2baf790-49aa-41a7-bda6-092c9d8ff97f\",\"moduleSequenceNumber\":354216}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":354216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":72421051.5,\"moneyMax\":181052628.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":738,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-738161-Daedalus.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[121,[1,3,4,5,7,8,9,10]],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"28.6.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":250318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":250320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b7e14731-ce9b-4d43-adb5-12ffcd3aefb3\",\"moduleSequenceNumber\":250833}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":250833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///c3a52e97-08a2-40ed-9384-7fd6f6858ac7\",\"moduleSequenceNumber\":251608}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":251608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///edcb7c02-6254-4a80-8820-9f77fc3775ad\",\"moduleSequenceNumber\":251231}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":251231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":110,\"hackDifficulty\":37,\"minDifficulty\":37,\"moneyAvailable\":127748058.25,\"moneyMax\":127748058.25,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":481,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"21.7.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":250806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":250808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e480e13f-9dde-4088-937b-f0983134d233\",\"moduleSequenceNumber\":252692}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":252692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///0388ac1d-476f-44ab-a525-97580fe0762d\",\"moduleSequenceNumber\":256577}],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":256577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///2c26a144-fb55-41a4-9072-ead80d3c529c\",\"moduleSequenceNumber\":354218}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":354218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":74341367.5,\"moneyMax\":185853418.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":547,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"20.5.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":250782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":250784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ef14f7d2-32be-49d9-9af1-fa2f8f8a1988\",\"moduleSequenceNumber\":252690}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":252690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///aac617df-2886-4e5e-a804-11fecac06b7b\",\"moduleSequenceNumber\":256576}],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":256576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///c12811f3-7d29-4548-b456-334fb421403b\",\"moduleSequenceNumber\":354217}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":354217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":34235574.2,\"moneyMax\":85588935.50000001,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":400,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"30.0.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":250774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":250776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///2ad60fde-db54-4225-8df2-bafbab1f0c1d\",\"moduleSequenceNumber\":250839}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":250839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///99a40d47-3cfc-4beb-874c-132bd5cb1d7d\",\"moduleSequenceNumber\":251625}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":251625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b1b66554-1d34-46a6-91b5-ce6b9b968881\",\"moduleSequenceNumber\":251248}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":251248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117.5,\"hackDifficulty\":117.5,\"minDifficulty\":39,\"moneyAvailable\":18961740.8,\"moneyMax\":47404352,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":413,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"89.2.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":250286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":250288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///3c653fa1-1745-478a-ad94-1c45de4de244\",\"moduleSequenceNumber\":252680}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":252680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///83ebbbcc-89da-4856-aca8-cdeb5027af44\",\"moduleSequenceNumber\":256559}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":256559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///803a93c8-42a3-473e-9d8e-c2fbf9669c8f\",\"moduleSequenceNumber\":354200}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":354200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":84864280.60000001,\"moneyMax\":212160701.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":745,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"71.5.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":250310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":250312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///77f1941e-0014-4b15-a7db-452b8a0702a5\",\"moduleSequenceNumber\":250832}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":250832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///f459b50f-fb5b-4741-a4d5-1f437988efef\",\"moduleSequenceNumber\":251607}],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":251607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///8c149177-72b6-4470-979b-5a0d56119d8f\",\"moduleSequenceNumber\":251230}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":251230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":34251228.800000004,\"moneyMax\":85628072.00000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":438,\"serverGrowth\":50}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"15.7.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":250798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":250800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":250802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":250804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192.5,\"hackDifficulty\":192.5,\"minDifficulty\":64,\"moneyAvailable\":45119111.400000006,\"moneyMax\":112797778.50000003,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":649,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"35.3.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":250614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":250616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c901a274-0a46-480d-801c-b013ec422d8c\",\"moduleSequenceNumber\":250844}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":250844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///d18ca717-8a4b-48ee-8c02-c1a14932b1a3\",\"moduleSequenceNumber\":251609}],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":251609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ba93cd84-7219-480e-ac1e-cfd9b1ec7d56\",\"moduleSequenceNumber\":251232}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":251232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162.5,\"hackDifficulty\":162.5,\"minDifficulty\":54,\"moneyAvailable\":34183491.2,\"moneyMax\":85458728.00000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":432,\"serverGrowth\":28}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"70.8.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":250750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":250752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///0b84ce5b-a97a-472b-a033-7089d3e3d58e\",\"moduleSequenceNumber\":250843}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":250843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///6a7591ad-b253-4007-b802-ed855c85221c\",\"moduleSequenceNumber\":251623}],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":251623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///44acdbb9-0cdb-4937-8fb0-b10b3a06f7b0\",\"moduleSequenceNumber\":251246}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":251246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92.5,\"hackDifficulty\":92.5,\"minDifficulty\":31,\"moneyAvailable\":18090740.7,\"moneyMax\":45226851.75,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":303,\"serverGrowth\":53}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"83.3.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":250278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":250280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":250282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"computek\",\"moduleSequenceNumber\":250284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":22979890.8,\"moneyMax\":57449727,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":302,\"serverGrowth\":56}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"95.3.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":250302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":250304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///8a94d11f-0411-4a9a-9c89-91277eca1161\",\"moduleSequenceNumber\":250841}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":250841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///57d50280-8cc8-4e4b-9ec3-72cbd91ccb7b\",\"moduleSequenceNumber\":251606}],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":251606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///53419f04-a1e1-40d1-b1a1-1753b4ec6c76\",\"moduleSequenceNumber\":251229}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":251229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":197.5,\"hackDifficulty\":197.5,\"minDifficulty\":66,\"moneyAvailable\":27500000,\"moneyMax\":68750000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":408,\"serverGrowth\":74}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"12.4.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":250766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":250768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":250770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":250772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":7523779.800000001,\"moneyMax\":18809449.500000004,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":273,\"serverGrowth\":64}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"17.7.6.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":250254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":250256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///f7dcf85a-bbfe-487e-ace6-e811fc5caef2\",\"moduleSequenceNumber\":250821}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":250821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///ec7a4d2c-4eb1-433d-999f-25ad1fca7b6b\",\"moduleSequenceNumber\":251602}],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":251602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///c62c1d69-2d75-43b1-a875-ab3962320c17\",\"moduleSequenceNumber\":251225}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":251225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2.5,\"hackDifficulty\":2.5,\"minDifficulty\":1,\"moneyAvailable\":7000,\"moneyMax\":17500,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"78.7.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":250678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":250680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///efe38363-e4a5-41da-bf0f-23f3e324faa2\",\"moduleSequenceNumber\":250824}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":250824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///3114aa56-a43a-451d-afff-ca2c28ed74fa\",\"moduleSequenceNumber\":251614}],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":251614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///4bfe4174-1518-4ff1-b63b-a4c2eb29729b\",\"moduleSequenceNumber\":251237}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":251237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":200000,\"moneyMax\":500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"58.5.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":250694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":250696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///20919aa9-a686-4537-854d-015086975c01\",\"moduleSequenceNumber\":250826}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":250826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///45f2fad2-e85e-4304-9724-946900c3f3a8\",\"moduleSequenceNumber\":251616}],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":251616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///77847e0c-250c-48dc-ba00-636d4c4e67b1\",\"moduleSequenceNumber\":251239}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":251239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":575000,\"moneyMax\":575000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"31.5.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":250702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":250704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1df46b5e-042b-40b6-bbb6-0f80628b381c\",\"moduleSequenceNumber\":250827}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":250827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///0f9d867a-65e1-4237-9c7c-be18815f9bff\",\"moduleSequenceNumber\":251617}],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":251617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///7f1b627e-df2b-4589-9f62-24c36d31cf5e\",\"moduleSequenceNumber\":251240}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":251240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":250000,\"moneyMax\":625000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"88.1.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":250262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":250264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///dff5abb6-b5e8-408b-98d6-1547ecb3db4e\",\"moduleSequenceNumber\":250830}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":250830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///d775157a-4472-4d24-a636-56d6c9f3813f\",\"moduleSequenceNumber\":251603}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":251603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///91a2814f-47e2-4656-8f6b-b64d6b66add6\",\"moduleSequenceNumber\":251226}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":251226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":750000,\"moneyMax\":1875000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"71.8.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":250686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":250688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///ff85595f-20d3-4f5d-94f9-9cbb49bc6dd3\",\"moduleSequenceNumber\":250825}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":250825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///072e5175-b683-4d19-b559-ddbcb713f4c2\",\"moduleSequenceNumber\":251615}],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":251615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///dd77a315-e248-4b95-abb6-7321e0e4b91c\",\"moduleSequenceNumber\":251238}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":251238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":275000,\"moneyMax\":687500,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"18.0.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":250270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":250272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///c0b0855d-cb7f-44f0-ab82-cc3f138a987f\",\"moduleSequenceNumber\":250831}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":250831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///390cc273-f803-4a20-92f1-bd52b066d8cb\",\"moduleSequenceNumber\":251604}],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":251604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///aa061a81-91d4-438f-8954-8b757d25ac8b\",\"moduleSequenceNumber\":251227}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":251227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"computek\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":500000,\"moneyMax\":1250000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"89.9.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":250662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":250664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///76fb91af-b910-420c-8e14-6bb548e3c006\",\"moduleSequenceNumber\":250842}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":250842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///ffd136d3-e49e-4835-895a-7bfe193ce842\",\"moduleSequenceNumber\":251612}],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":251612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///27f3dbc7-e5df-4540-9017-3c17ec9a53e1\",\"moduleSequenceNumber\":251235}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":251235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":4500000,\"moneyMax\":11250000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"1.9.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":250710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":250712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///1e1ae93f-aa51-42bf-9a33-fcc8b24c1c8f\",\"moduleSequenceNumber\":250828}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":250828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///4e6bd301-a697-49b7-b0f8-9dd1ea93192f\",\"moduleSequenceNumber\":251618}],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":251618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///f3ddc9d8-3f65-4fcd-b05a-6cd8ac4e7399\",\"moduleSequenceNumber\":251241}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":251241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":300000,\"moneyMax\":750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"64.2.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":250718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":250720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///551d3dd9-03eb-4a6c-be4a-44b8888a3964\",\"moduleSequenceNumber\":250829}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":250829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///585f29f8-0af1-4291-8eff-fd530fcde3f4\",\"moduleSequenceNumber\":251619}],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":251619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///8106fe19-cc65-458c-a6cd-712f0cb91ac5\",\"moduleSequenceNumber\":251242}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":251242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":400000,\"moneyMax\":1000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"24.4.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":250742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":250744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///8787112e-e94f-415d-90dc-4d37cfee0996\",\"moduleSequenceNumber\":250837}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":250837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///d396bffc-040b-4317-a96a-c463ab66fa8a\",\"moduleSequenceNumber\":251622}],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":251622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///20287ed7-7123-44d4-9ff9-1bc96db2799f\",\"moduleSequenceNumber\":251245}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":251245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2400000,\"moneyMax\":6000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"85.0.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":250670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":250672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///57d2a2c2-6afe-46e3-a8f5-ae4cae87c169\",\"moduleSequenceNumber\":250835}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":250835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///26822ad8-92a9-49d5-a35c-f4dbec3a3fe6\",\"moduleSequenceNumber\":251613}],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":251613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///d85a371e-678e-4819-a0f7-deca3898d6aa\",\"moduleSequenceNumber\":251236}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":251236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":1000000,\"moneyMax\":2500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"63.2.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":250758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":250760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///b60ad3eb-b46a-43fb-9a39-408decf1db3f\",\"moduleSequenceNumber\":250838}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":250838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///981b10a4-0eb1-41aa-94d7-2b7d682ba0d6\",\"moduleSequenceNumber\":251624}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":251624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///0122ba63-e3c9-410f-9b5b-5c7f79f279f4\",\"moduleSequenceNumber\":251247}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":251247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":6664318.5,\"moneyMax\":16660796.25,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":187,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"65.5.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":250646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":250648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":250650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":250652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102.5,\"hackDifficulty\":102.5,\"minDifficulty\":34,\"moneyAvailable\":4709035.2,\"moneyMax\":11772588,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":249,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"57.8.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":250726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":250728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///6fb797a6-cfe6-4c46-99eb-cfc5a63defcc\",\"moduleSequenceNumber\":250836}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":250836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///75c74acc-fbfc-4880-b203-e37b176378bd\",\"moduleSequenceNumber\":251620}],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":251620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ca7e22c5-772f-403b-acbd-6633d90d72df\",\"moduleSequenceNumber\":251243}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":251243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":2000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"83.7.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":250294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":250296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///51ecb46c-565a-45b7-9725-35929438f175\",\"moduleSequenceNumber\":250840}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":250840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///eaa7d02a-40f0-490d-98c9-13463067c7af\",\"moduleSequenceNumber\":251605}],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":251605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///f8606644-bd8e-40a8-8899-cdb11e18bedb\",\"moduleSequenceNumber\":251228}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":251228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115,\"hackDifficulty\":115,\"minDifficulty\":38,\"moneyAvailable\":25000000,\"moneyMax\":62500000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":523,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"92.1.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":250430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":250432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///4cbda041-ef96-4ea5-bbce-3f88ed4334cf\",\"moduleSequenceNumber\":252688}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":252688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///656022a5-9c6e-41fa-a093-61dc24ee647b\",\"moduleSequenceNumber\":256568}],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":256568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///eb1c4b11-54d1-4b89-b81c-3019083c80b9\",\"moduleSequenceNumber\":354209}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":354209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":155,\"hackDifficulty\":155,\"minDifficulty\":52,\"moneyAvailable\":90000000,\"moneyMax\":225000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":983,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"12.7.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":250566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":250568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":250570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":250572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102.5,\"hackDifficulty\":102.5,\"minDifficulty\":34,\"moneyAvailable\":45000000,\"moneyMax\":112500000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":713,\"serverGrowth\":43}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"1.7.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":250406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":250408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///414730e5-54fb-4ba9-9555-3ab199dc2714\",\"moduleSequenceNumber\":252693}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":252693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///43ae62bd-0d34-47c2-9b38-4b32997f0c69\",\"moduleSequenceNumber\":256566}],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":256566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ea55968b-f625-4535-93d4-9381c0bc0363\",\"moduleSequenceNumber\":354207}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":354207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":525,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"84.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":250638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":250640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///77bcac1d-d8ff-4987-9a3b-dbd597f775b8\",\"moduleSequenceNumber\":250823}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":250823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///7ba9f5b0-68c6-4428-9823-b54dbb2a959c\",\"moduleSequenceNumber\":251610}],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":251610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b718c44b-781c-456e-b043-03e6cf93a3b4\",\"moduleSequenceNumber\":251233}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":251233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":345,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"84.3.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":250654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":250656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///65c4ceed-9259-427f-8c33-3005ce31626c\",\"moduleSequenceNumber\":250834}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":250834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///d8b1f6ee-3d86-4f32-9dba-13de90692128\",\"moduleSequenceNumber\":251611}],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":251611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///fb2979e3-bf7e-4ef7-9899-7c6c8621b283\",\"moduleSequenceNumber\":251234}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":251234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"94.2.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":250454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":250456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///e9165a20-899d-4a25-b3eb-c3f1ff4fff9f\",\"moduleSequenceNumber\":252684}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":252684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///cc1a778b-5239-4bb8-9e5f-652b7766c025\",\"moduleSequenceNumber\":256569}],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":256569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///b143788e-1b24-42e4-838f-ad511f6fa30a\",\"moduleSequenceNumber\":354210}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":354210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":520,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"23.7.5.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":250734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":250736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/weaken.js\",\"url\":\"blob:file:///925f79b0-08ec-46f8-9997-83a875f1b830\",\"moduleSequenceNumber\":250822}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":250822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_share.js\",\"url\":\"blob:file:///b028e7a8-a4f6-4be0-9448-e7bf89ae273f\",\"moduleSequenceNumber\":251621}],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":251621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"blob:file:///ff965062-275c-4ca8-8f54-6ceef0ebe020\",\"moduleSequenceNumber\":251244}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":251244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"44.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":250526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":250528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":250530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":250532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"92.0.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":250534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":250536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":250538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":250540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"75.4.7.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.hack(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":250814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"hackLvlEffect\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.grow(flags.target, {\\r\\n        hackOverrideTiming: flags.hackLvlTiming,\\r\\n        hackOverrideEffect: flags.hackLvlEffect,\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImxpYi9leGVjL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3hCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO1FBQ3ZDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxhQUFhO0tBQzFDLENBQUMsQ0FBQztBQUNQLENBQUMifQ==\",\"filename\":\"/lib/exec/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":250816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"target\\\", \\\"n00dles\\\"],\\r\\n        [\\\"hackLvlTiming\\\", 1],\\r\\n        [\\\"batchID\\\", 0],\\r\\n        [\\\"offset\\\", 0],\\r\\n        [\\\"uid\\\", 0],\\r\\n    ]);\\r\\n    await ns.weaken(flags[\\\"target\\\"], {\\r\\n        hackOverrideTiming: flags[\\\"hackLvlTiming\\\"],\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNiLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNiLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFDUCxDQUFDIn0=\",\"filename\":\"/lib/exec/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":250818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true)\\r\\n        await ns.share();\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfc2hhcmUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvZXhlYy9jb25zdF9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE9BQU8sSUFBSTtRQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMifQ==\",\"filename\":\"/lib/exec/const_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"darkweb\",\"moduleSequenceNumber\":250820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([[\\\"target\\\", \\\"n00dles\\\"]]);\\r\\n    while (true)\\r\\n        await ns.weaken(flags[\\\"target\\\"]);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3Rfd2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsibGliL2V4ZWMvY29uc3Rfd2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQyJ9\",\"filename\":\"/lib/exec/const_weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":354199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":160.1398,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":232163.20290602627,\"favor\":0.038,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":200661.68658328,\"favor\":0.038,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":172.0607,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.038,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":242.5501,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":783416.7932467917}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":299.3376,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":9129122.495773403}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":273968.5902477228}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":115008.17419172428}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":320.7441,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":962023.0710971382}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":386.6897,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":9613077.555817826}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":239.2561,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":529883.1367059799}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":220.2889,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":500170.7400026213}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":226.5022,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":509903.96548856975}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":46.2728,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":64.7465,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":189168.0995334479}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":168.1666,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":418520.3933678485}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":176.1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":430948.18070632283}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"test\":\"run test.js\",\"crawl\":\"run crawl.js\",\"hack\":\"run hack.js\",\"ll\":\"run ll.js\",\"ka\":\"run ka.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe\",\"trace\":\"run trace.js\",\"ss\":\"run services/server.js\",\"kss\":\"kill /services/server.js\",\"exp\":\"run exp.js\",\"soften\":\"run soften.js\",\"cct\":\"run cct.js\",\"bsa\":\"run buy_server_all.js\",\"share\":\"run share.js\",\"c\":\"run clock.js\",\"mcp\":\"run mcp.js\",\"join\":\"run join.js\",\"exp0\":\"run exp.js --reserve 0\",\"cb\":\"run crawl.js -bs\",\"crime\":\"run crime.js\",\"ascend\":\"run ascend.js\",\"controller\":\"run controller.js\",\"reset\":\"run reset.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":1,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"16","AllGangsSave":"","LastExportBonus":"1653671061728","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}